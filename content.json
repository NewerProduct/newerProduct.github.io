[{"title":"Git的基本使用","date":"2024-07-08T07:53:36.000Z","path":"2024/07/08/Git的基本使用/","content":"","categories":[],"tags":[]},{"title":"jQuery学习","date":"2024-07-06T10:12:07.000Z","path":"2024/07/06/jQuery学习/","content":"<h1 id=\"jQuery第一部分\"><a href=\"#jQuery第一部分\" class=\"headerlink\" title=\"jQuery第一部分\"></a>jQuery第一部分</h1><h2 id=\"1-使用准备\"><a href=\"#1-使用准备\" class=\"headerlink\" title=\"1.使用准备\"></a>1.使用准备</h2><p>首先来对比一下jQ语法和原生Dom语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原生js</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> liArr = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;li&#x27;</span>)</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; liArr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">   liArr[i].<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = <span class=\"string\">&#x27;orange&#x27;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// jQuery  </span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;li&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;backgroundColor&#x27;</span>, <span class=\"string\">&#x27;orange&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>可以发现，通过jQ语法操作样式要比原生操作Dom简单不少，那么如何使用jQ呢？下面介绍</p>\n<ol>\n<li><p>下包:你得先把这个别人写好<code>js</code>文件下载到本地</p>\n</li>\n<li><p>导包:下载完毕之后需要导入到使用的页面中</p>\n</li>\n<li><p>另起一行<code>script</code>输出一下<code>$</code>,看看是否输出了下图内容:</p>\n<ol>\n<li><img src=\"/2024/07/06/jQuery%E5%AD%A6%E4%B9%A0/image-20240706181617819.png\" alt=\"image-20240706181617819\"></li>\n</ol>\n</li>\n<li><p>确保上一步做完之后,我们写一段测试代码</p>\n<ol>\n<li><pre><code class=\"js\">$(&#39;body&#39;).css(&#39;backgroundColor&#39;,&#39;yellowgreen&#39;)\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">   2. 可以看出，操作的元素是body标签，设置的样式是背景色，且颜色为黄绿色。</span><br><span class=\"line\"></span><br><span class=\"line\">jQ官方网站：https://jquery.com/</span><br><span class=\"line\"></span><br><span class=\"line\">## 2.选择器</span><br><span class=\"line\"></span><br><span class=\"line\">jQuery中如何获取需要操纵的元素?在我们学习Dom的时候，想要操作这个元素，第一步也是先获取元素，所以在jQ学习中也是一样的，下面来介绍如何通过jQ的方式来获取元素，语法很简单:</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">// 基本用法</span><br><span class=\"line\">$(&#x27;选择器&#x27;)</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ol>\n</li>\n</ol>\n<p>直接调用$方法即可，选择器通过字符串的方式传递进去,基本上兼容所有<code>css</code>的选择器，比如标签选择器，类选择器，后代选择器等。导入了jQuery之后我们通过console的方式了$这个全局变量，打印的是一个函数。既然是函数加括号就是调用他。只不过之前的函数名都不是$而已。</p>\n<p>标签选择：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 标签选择器</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;p&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>类选择器(在css中选择类就是<code>.</code>)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类选择器</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;.p&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>id选择器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// id 选择器</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#p&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>后代选择器(这里选择body中的所有p标签为例子)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 后代选择器</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;body p&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>小结:</strong></p>\n<p>选择器的语法咋写来着？</p>\n<p>​\t\t调用$方法然后以字符串的方式传入css的选择器即可。</p>\n<h2 id=\"3-jQuery对象\"><a href=\"#3-jQuery对象\" class=\"headerlink\" title=\"3.jQuery对象\"></a>3.jQuery对象</h2><p>jQuery 中利用选择器获取到的并非原生的 DOM 对象，而是 jQuery 对象，我们在学习jQ选择器的时候，调用$方法获取到的返回值就是jQuery对象，jQuery提供的绝大多数方法都需要通过jQuery对象才可以访问。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// jQuery</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;p&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>然后我们通过css方法把元素的背景色变成了粉色</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// jQuery</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;p&#x27;</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;backgroundColor&#x27;</span>,<span class=\"string\">&#x27;pink&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>如果使用Dom对象来实现，是这样的,先获取到dom对象，然后通过点语法访问style属性，接着为backgroundColor赋值.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;p&#x27;</span>).<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = <span class=\"string\">&#x27;pink&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：两者的写法不能混淆。</p>\n<p>除了通过选择器以外，我们还可以把dom对象直接丢到$方法中，他返回的也是一个jQ对象，就可以使用jQuery提供的那些高级方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>)</span><br><span class=\"line\">$(dom对象)</span><br></pre></td></tr></table></figure>\n\n<p>就比如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 4. dom对象转jQ对象，li是一个dom对象</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> $li2 = $(li)</span><br><span class=\"line\">     $li2.<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;backgroundColor&#x27;</span>, <span class=\"string\">&#x27;skyblue&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>jQuery对象</p>\n<ol>\n<li><p>调用$方法传入选择器或dom元素获取到的是什么对象  ？</p>\n<p><strong>jQuery对象</strong></p>\n</li>\n<li><p>jQuery对象的方法,比如css方法放在什么位置？</p>\n<p><strong>原型上</strong></p>\n</li>\n</ol>\n<h2 id=\"4-事件绑定\"><a href=\"#4-事件绑定\" class=\"headerlink\" title=\"4.事件绑定\"></a>4.事件绑定</h2><p>语法是这样的：先通过选择器找到希望绑定的元素，然后然后调用对应的事件名方法，传入回调函数，逻辑直接写在回调函数里面即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).事件名(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 逻辑....</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>注意：<strong>在操作dom元素时</strong>，我们在绑定事件的时候<strong>一是要在事件名称前面加上on</strong>，<strong>二是通过赋值号<code>=</code>来写对应事件的回调函数(触发事件时要做的逻辑)</strong>,然而jQ语法是不一样的，这要注意了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.为 li 添加点击事件</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;li&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;这是点击事件！&#x27;</span>);</span><br><span class=\"line\">  <span class=\"comment\">//当触发点击事件时，把背景颜色变成红色</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  <span class=\"comment\">//这里的this是dom对象，你可以通过以下方法实现变红</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">style</span>.<span class=\"property\">background</span> = <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">//也可以通过jQ语法变红，但是需要进行转换</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> jqObj = $(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  jqObj.<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;background&#x27;</span>,<span class=\"string\">&#x27;red&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>从上面可以看到，当我们操作jQ对象进行操作绑定事件时，不需要在加<code>onxxxx</code> 和 <code>=</code>，方便许多，这点注意。</p>\n<p>其他事件，比如聚焦(focus)，失焦(blur)，鼠标移入移出等等，如下所示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2.为 .text 添加获得焦点事件</span></span><br><span class=\"line\">    $(<span class=\"string\">&#x27;.text&#x27;</span>).<span class=\"title function_\">focus</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;focus&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3.为 .text 添加失去焦点事件</span></span><br><span class=\"line\">    $(<span class=\"string\">&#x27;.text&#x27;</span>).<span class=\"title function_\">blur</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;blur&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4.为 .box 添加鼠标移入事件</span></span><br><span class=\"line\">    $(<span class=\"string\">&#x27;.box&#x27;</span>).<span class=\"title function_\">mouseenter</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;mouseenter&#x27;</span>)</span><br><span class=\"line\">      $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;backgroundColor&#x27;</span>, <span class=\"string\">&#x27;pink&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 5.为 .box 添加鼠标移出事件</span></span><br><span class=\"line\">    $(<span class=\"string\">&#x27;.box&#x27;</span>).<span class=\"title function_\">mouseleave</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;mouseleave&#x27;</span>)</span><br><span class=\"line\">      $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;backgroundColor&#x27;</span>, <span class=\"string\">&#x27;yellowgreen&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>jQuery中的事件绑定。</p>\n<ol>\n<li><p>为jQuery对象绑定事件时，方法名字中有没有on？</p>\n<p>没有，$(‘选择器’).</p>\n</li>\n<li><p>传入的回调函数中，如何获取触发事件的dom元素?</p>\n<p>this,可以调用$方法将他转为jQuery对象，从而使用jQuery对象强大的方法</p>\n</li>\n</ol>\n<h2 id=\"5-链式编程\"><a href=\"#5-链式编程\" class=\"headerlink\" title=\"5.链式编程\"></a>5.链式编程</h2><p>指的是通过点把多个操作（<strong>方法</strong>）连续的写下去，这样形成的结构和链子一样，所以叫做链式编程。</p>\n<p>上一节中的对于text类的操作方法，写了两部分重复了，下面来展示链式编程的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;.text&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">focus</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;获取焦点&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">blur</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;失去焦点&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>我们在<code>.focus</code>方法的后面继续点<code>.blur</code>就可以再为他绑定失去焦点事件。形式上看去就好比下面这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;.text&#x27;</span>).<span class=\"title function_\">focus</span>(回调函数).<span class=\"title function_\">blur</span>(回调函数)</span><br></pre></td></tr></table></figure>\n\n<p>甚至是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;.text&#x27;</span>).<span class=\"title function_\">focus</span>(回调函数).<span class=\"title function_\">blur</span>(回调函数).<span class=\"title function_\">change</span>(回调函数)</span><br></pre></td></tr></table></figure>\n\n<p>为什么可以这么写？答：因为通过jQ对象调用的大部分方法返回的还是同一个jQ对象。</p>\n<p>链式编程</p>\n<ol>\n<li><p>链式编程的含义是?</p>\n<p>通过 点 把多个操作连续的写下去, 形成和 链子 一样的结构</p>\n</li>\n<li><p>有没有特殊情况?</p>\n<p>有</p>\n</li>\n</ol>\n<h2 id=\"6-内容操纵\"><a href=\"#6-内容操纵\" class=\"headerlink\" title=\"6.内容操纵\"></a>6.内容操纵</h2><p>如何通过jQuery操纵元素的内容</p>\n<p>jQuery封装了2个方法让我们对元素的文本进行设置或者,根据是否传参功能是不一样的,如何使用呢?</p>\n<p><strong>传递参数就是设置,不传递参数就是取值</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">html</span>(<span class=\"string\">&#x27;内容&#x27;</span>)</span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">text</span>(<span class=\"string\">&#x27;内容&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 取值</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">html</span>()</span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">text</span>()</span><br></pre></td></tr></table></figure>\n\n<p>如果，我们要设置的<strong>内容中包含标签</strong>，那么就用.html()方法。如果要获取的内容<strong>只希望获取文本内容，不包含标签</strong>，那么推荐使用.text()方法</p>\n<p>举例，设置普通文本：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  1. 设置普通文本</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;.box1&#x27;</span>).<span class=\"title function_\">html</span>(<span class=\"string\">&#x27;测试内容&#x27;</span>)</span><br><span class=\"line\">$(<span class=\"string\">&#x27;.box2&#x27;</span>).<span class=\"title function_\">text</span>(<span class=\"string\">&#x27;测试内容&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这两种方式，在页面中呈现的内容是一样的</p>\n<p><img src=\"/2024/07/06/jQuery%E5%AD%A6%E4%B9%A0/image-20240707124044784.png\" alt=\"image-20240707124044784\"></p>\n<p>但是如果，这时我们在带入标签进行内容的设置，代码是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2. 设置标签</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;.box1&#x27;</span>).<span class=\"title function_\">html</span>(<span class=\"string\">&#x27; &lt;a href=&quot;#&quot;&gt;黑马程序员&lt;/a&gt;&#x27;</span>)</span><br><span class=\"line\">$(<span class=\"string\">&#x27;.box2&#x27;</span>).<span class=\"title function_\">text</span>(<span class=\"string\">&#x27; &lt;a href=&quot;#&quot;&gt;黑马程序员&lt;/a&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/07/06/jQuery%E5%AD%A6%E4%B9%A0/image-20240707124157612.png\" alt=\"image-20240707124157612\"></p>\n<p>可以清楚的发现.text方法并没有将a标签解析，而.html方法解析了</p>\n<p>接下来测试取值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. 取值</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> htmlContent = $(<span class=\"string\">&#x27;.box1&#x27;</span>).<span class=\"title function_\">html</span>();</span><br><span class=\"line\"> <span class=\"comment\">//包含标签</span></span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(htmlContent);</span><br><span class=\"line\"> <span class=\"keyword\">let</span> textContent  = $(<span class=\"string\">&#x27;.box1&#x27;</span>).<span class=\"title function_\">text</span>();</span><br><span class=\"line\"> <span class=\"comment\">//包含文本</span></span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(textContent);</span><br></pre></td></tr></table></figure>\n\n<p>结果<br><img src=\"/2024/07/06/jQuery%E5%AD%A6%E4%B9%A0/image-20240707124540444.png\" alt=\"image-20240707124540444\"></p>\n<p>可以看到，html方法的取值可以将标签取到并输出。而text方法只能取到文本，也就是标签的内容。</p>\n<p>下面来说一点链式编程不适用的情况。链式编程是只要你返回的对象是jQ对象，就可以继续.<code>.</code>来执行下面的方法，我们只需要比较在赋值时，将被赋值的内容获取，在与jQ选择器获取的对象进行比较即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> $box1 = $(<span class=\"string\">&#x27;.box1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> $res =  $box1.<span class=\"title function_\">html</span>(<span class=\"string\">&#x27;测试内容&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>($box1===$res) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>说明$box1和$res是同一个jq对象,那么进行赋值操作的时候就可以调用其他的jq方法。</p>\n<ol>\n<li><p>哪个方法设置的标签会被正常解析？</p>\n<p>html方法</p>\n</li>\n<li><p>只获取元素的文本使用哪个方法?</p>\n<p>text方法</p>\n</li>\n<li><p>赋值还是取值支持链式编程?</p>\n<p>​\t赋值</p>\n</li>\n</ol>\n<h2 id=\"案例1-计数器\"><a href=\"#案例1-计数器\" class=\"headerlink\" title=\"案例1:计数器\"></a>案例1:计数器</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>案例计数器<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入jQ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../jquery/jquery-3.5.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-num&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 减号 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn1&quot;</span>&gt;</span> - <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 内容 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 加号 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn2&quot;</span>&gt;</span> + <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> i = $(<span class=\"string\">&#x27;.input-num span&#x27;</span>).<span class=\"title function_\">text</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 分情况讨论</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    $(<span class=\"string\">&#x27;.input-num #btn1&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> btn1Obj = $(<span class=\"string\">&#x27;.input-num #btn1&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span>(i !== <span class=\"number\">0</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">         i--;</span></span><br><span class=\"line\"><span class=\"language-javascript\">         $(<span class=\"string\">&#x27;.input-num span&#x27;</span>).<span class=\"title function_\">text</span>(i)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">window</span>.<span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;i已经是0了,不能够继续递减了!&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    $(<span class=\"string\">&#x27;.input-num #btn2&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> btn2Obj = $(<span class=\"string\">&#x27;.input-num #btn2&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">10</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">window</span>.<span class=\"title function_\">alert</span>(<span class=\"string\">&quot;i已经到最大值10了,不能够增加了&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            i++;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            $(<span class=\"string\">&#x27;.input-num span&#x27;</span>).<span class=\"title function_\">text</span>(i)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>针对于两个按钮，除了可以按照上面的那种方法来给它们写一个不同的id以外，还可以用伪类选择器，指的是，在一个大元素中的第一个子元素和最后一个子元素，可以用到下面这样的</p>\n<ol>\n<li><p>last-child和first-child叫做什么选择器?</p>\n<p>伪类选择器</p>\n<p>写法：</p>\n<p><img src=\"/2024/07/06/jQuery%E5%AD%A6%E4%B9%A0/image-20240707131838304.png\" alt=\"image-20240707131838304\"></p>\n</li>\n<li><p>span里面的文本设置和取值用的是什么方法</p>\n<p>text方法</p>\n</li>\n</ol>\n<h2 id=\"7-过滤方法\"><a href=\"#7-过滤方法\" class=\"headerlink\" title=\"7.过滤方法\"></a>7.过滤方法</h2><p>使用jQuery的过滤方法对找到的元素再次筛选</p>\n<p>jQuery中的过滤方法,作用是对jQuery对象中的dom元素再次进行筛选,让我们更精确的定位到希望操纵的元素。</p>\n<p>方法一共有3个,分别是first,last,和eq,其中first和last不需要传递参数,作用分别是获取到第一个和最后一个元素,eq方法需要传递索引作为参数,索引从0开始.这三个方法返回的都是jQ对象,这就意味着我们可以直接用点语法调用我们目前学过的那些方法,比如绑定事件,修改内容等等</p>\n<p>现在针对上面的内容，对案例：计数器中的进行改写如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>案例计数器<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入jQ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../jquery/jquery-3.5.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-num&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 减号 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> &gt;</span> - <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 内容 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 加号 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> &gt;</span> + <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> i = $(<span class=\"string\">&#x27;.input-num span&#x27;</span>).<span class=\"title function_\">text</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 分情况讨论</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    $(<span class=\"string\">&#x27;.input-num button &#x27;</span>).<span class=\"title function_\">first</span>().<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span>(i != <span class=\"number\">0</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">         i--;</span></span><br><span class=\"line\"><span class=\"language-javascript\">         $(<span class=\"string\">&#x27;.input-num span&#x27;</span>).<span class=\"title function_\">text</span>(i)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">window</span>.<span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;i已经是0了,不能够继续递减了!&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    $(<span class=\"string\">&#x27;.input-num button&#x27;</span>).<span class=\"title function_\">last</span>().<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">10</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">window</span>.<span class=\"title function_\">alert</span>(<span class=\"string\">&quot;i已经到最大值10了,不能够增加了&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            i++;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            $(<span class=\"string\">&#x27;.input-num span&#x27;</span>).<span class=\"title function_\">text</span>(i)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-样式操纵\"><a href=\"#8-样式操纵\" class=\"headerlink\" title=\"8.样式操纵\"></a>8.样式操纵</h2><p>基础语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;样式名&#x27;</span>,<span class=\"string\">&#x27;值&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//注意，驼峰命名，否则不识别</span></span><br><span class=\"line\">.<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;backgroundColor&#x27;</span>,<span class=\"string\">&#x27;pink&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>如果要设置多个样式，可以以对象的形式进行传递</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"title function_\">css</span>(对象)</span><br><span class=\"line\">.<span class=\"title function_\">css</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">backgroundColor</span>:<span class=\"string\">&#x27;pink&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">color</span>:<span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">width</span>:<span class=\"string\">&#x27;200px&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">height</span>:<span class=\"number\">200</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>同样，也可以获取对应样式名字的值</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;样式名&#x27;</span>)</span><br><span class=\"line\">.<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;width&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>css方法取值时是否需要传递参数?</p>\n<p>需要，需要告诉css方法希望获取的是什么样式</p>\n</li>\n<li><p>设置时数值类的样式省略单位,默认值是什么？</p>\n<p>px</p>\n</li>\n<li><p>css方法设置的样式在元素什么位置?</p>\n<p>行内</p>\n</li>\n</ol>\n<h2 id=\"9-属性操纵\"><a href=\"#9-属性操纵\" class=\"headerlink\" title=\"9.属性操纵\"></a>9.属性操纵</h2><p>使用jQuery提供的方法操纵元素的属性</p>\n<p>示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span>&gt;</span>点击跳转百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;logo.png&quot;</span> <span class=\"attr\">info</span>=<span class=\"string\">&quot;测试照片&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>方法有2个，分别是<code>attr</code>和<code>removeAttr</code>，其中attr方法可以用来设置或者读取属性，<code>removeAttr</code>的作用是删除属性</p>\n<p>我们先来看看attr方法的用法</p>\n<ol>\n<li><p>设置属性是通过attr方法传入两个参数，分别是属性名和设置的值</p>\n</li>\n<li><p>取值需传入属性名就好，和css方法是一致的。</p>\n</li>\n<li><p>基础语法：</p>\n<ol>\n<li><pre><code class=\"js\">// 赋值\n.attr(&#39;属性名&#39;,&#39;值&#39;)\n// 取值\n.attr(&#39;属性名&#39;)\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">removeAttr方法</span><br><span class=\"line\"></span><br><span class=\"line\">基础语法：</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">// 删除属性</span><br><span class=\"line\">.removeAttr(&#x27;属性名&#x27;)</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ol>\n</li>\n</ol>\n<p>示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>12-属性操纵<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 测试用标签 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>黑马程序员<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 导入 jQuery --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./jquery/jquery-3.5.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1. 赋值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;a&#x27;</span>).<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;href&#x27;</span>, <span class=\"string\">&#x27;http://www.baidu.com/&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;img&#x27;</span>).<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;src&#x27;</span>, <span class=\"string\">&#x27;http://www.baidu.com/images/logo.png&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;img&#x27;</span>).<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;info&#x27;</span>, <span class=\"string\">&#x27;测试照片&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2. 取值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> href = $(<span class=\"string\">&#x27;a&#x27;</span>).<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;href&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;href:&#x27;</span>, href)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> info = $(<span class=\"string\">&#x27;img&#x27;</span>).<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;info&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;info:&#x27;</span>, info)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3. 删除</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;a&#x27;</span>).<span class=\"title function_\">removeAttr</span>(<span class=\"string\">&#x27;href&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;img&#x27;</span>).<span class=\"title function_\">removeAttr</span>(<span class=\"string\">&#x27;src&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;img&#x27;</span>).<span class=\"title function_\">removeAttr</span>(<span class=\"string\">&#x27;info&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>attr方法赋值操作时需要传递几个参数？</p>\n<p>2个，参数1是属性名，参数2是属性值</p>\n</li>\n<li><p>attr方法传递一个参数的作用是什么？</p>\n<p>取值，要获取什么属性的值，传入对应的名字就ok啦！</p>\n</li>\n<li><p>删除属性的方法名叫什么？</p>\n<p>removeAttr</p>\n</li>\n</ol>\n<h2 id=\"案例2-图片切换\"><a href=\"#案例2-图片切换\" class=\"headerlink\" title=\"案例2:图片切换\"></a>案例2:图片切换</h2><p>完成图片切换demo</p>\n<p>案例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>13-图片切换<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./css/index.css&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;mask&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./images/logo.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 图片 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;cover&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./images/1.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 左箭头 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:void(0)&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./images/prev.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 右箭头 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:void(0)&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./images/next.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 导入jQuery --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./jquery/jquery-3.5.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 箭头缩放</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">//移入</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">$(<span class=\"string\">&#x27;.center a&#x27;</span>).<span class=\"title function_\">mouseenter</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;鼠标移入&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;transform&#x27;</span>,<span class=\"string\">&#x27;scale(1.1)&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">.<span class=\"title function_\">mouseleave</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;鼠标移出&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;transform&#x27;</span>,<span class=\"string\">&#x27;scale(1)&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 图片切换</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">$(<span class=\"string\">&#x27;.left&#x27;</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;display&#x27;</span>,<span class=\"string\">&#x27;none&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">let</span> index = <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">$(<span class=\"string\">&#x27;.left&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">index--</span></span><br><span class=\"line\"><span class=\"language-javascript\">$(<span class=\"string\">&#x27;.cover&#x27;</span>).<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;src&#x27;</span>,<span class=\"string\">`./images/<span class=\"subst\">$&#123;index&#125;</span>.png`</span>)   </span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">if</span>(index == <span class=\"number\">1</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    $(<span class=\"string\">&#x27;.right&#x27;</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;display&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;display&#x27;</span>,<span class=\"string\">&#x27;none&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">$(<span class=\"string\">&#x27;.right&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    index++</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(index);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    $(<span class=\"string\">&#x27;.cover&#x27;</span>).<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;src&#x27;</span>,<span class=\"string\">`./images/<span class=\"subst\">$&#123;index&#125;</span>.png`</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span>(index == <span class=\"number\">5</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;display&#x27;</span>,<span class=\"string\">&#x27;none&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        $(<span class=\"string\">&#x27;.left&#x27;</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;display&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>为transform设置什么可以调整元素缩放?</p>\n<p>scale</p>\n</li>\n<li><p>使用什么方法修改元素属性？</p>\n<p>attr方法</p>\n</li>\n<li><p>使用什么方法修改元素样式</p>\n<p>css方法</p>\n</li>\n</ol>\n<h2 id=\"10-操纵value\"><a href=\"#10-操纵value\" class=\"headerlink\" title=\"10.操纵value\"></a>10.操纵value</h2><p>使用jQuery提供的方法操纵表单元素的value值</p>\n<p><code>jQuery</code>中如何去操纵表单元素的<code>value</code>值，在网页开发中获取用户的输入。语法很简单，就是一个方法<code>.val</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取值</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">val</span>()</span><br><span class=\"line\"><span class=\"comment\">// 赋值</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">val</span>(<span class=\"string\">&#x27;值&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>val</code>也有两种用法，取值和赋值，<strong>我们在取值的时候，不需要传递参数。</strong></p>\n<p>示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 测试用输入框 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 引入 jQuery --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./jquery/jquery-3.5.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 1. 赋值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    $(<span class=\"string\">&#x27;.text&#x27;</span>).<span class=\"title function_\">val</span>(<span class=\"string\">&#x27;测试内容！&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 2. 取值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    $(<span class=\"string\">&#x27;.text&#x27;</span>).<span class=\"title function_\">blur</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> value = $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">val</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;value:&#x27;</span>, value)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>测试结果：</p>\n<p>赋值</p>\n<p><img src=\"/2024/07/06/jQuery%E5%AD%A6%E4%B9%A0/image-20240707144340720.png\" alt=\"image-20240707144340720\"></p>\n<p>取值</p>\n<p><img src=\"/2024/07/06/jQuery%E5%AD%A6%E4%B9%A0/image-20240707144346590.png\" alt=\"image-20240707144346590\"></p>\n<ol>\n<li><p>val方法是操纵元素的什么属性?</p>\n<p>value属性</p>\n</li>\n<li><p>获取value是否需要传递参数</p>\n</li>\n</ol>\n<h2 id=\"11-查找方法\"><a href=\"#11-查找方法\" class=\"headerlink\" title=\"11.查找方法\"></a>11.查找方法</h2><p>使用jQuery提供的查找方法对元素再次检索</p>\n<p>jQuery提供了一些查找元素的方法，通过这些方法就可以通过元素去查找他的父元素，兄弟元素，子元素和后代元素。</p>\n<p>方法有4个，但是非常好理解：<strong>parent方法</strong>用来获取父元素，<strong>children方法</strong>用来获取子元素，<strong>siblings</strong>用来获取兄弟元素，find用来获取后代元素，考虑到后代元素种类比较多，<strong>所以find方法必须传入选择器</strong></p>\n<p>这4个方法返回的都是jQ对象，之前的方法也是适用的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>查找方法<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./jquery/jquery-3.5.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>课程列表<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;course&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>html<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>css<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>javascript<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>校区列表<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;campus&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bj&quot;</span>&gt;</span>北京校区<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sh&quot;</span>&gt;</span>上海校区<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;gz&quot;</span>&gt;</span>广州校区<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sz&quot;</span>&gt;</span>深圳校区<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 获取父元素,在这个例子中父元素就是div</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> parentElement = $(<span class=\"string\">&#x27;.course&#x27;</span>).<span class=\"title function_\">parent</span>().<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;backgroundColor&#x27;</span>, <span class=\"string\">&#x27;pink&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 获取子元素上面的两个h4标签，ul标签都是子元素</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> childrenElement = $(<span class=\"string\">&#x27;.container&#x27;</span>).<span class=\"title function_\">children</span>().<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;backgroundColor&#x27;</span>, <span class=\"string\">&#x27;yellow&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 获取兄弟元素</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> brotherElement = $(<span class=\"string\">&#x27;.course&#x27;</span>).<span class=\"title function_\">siblings</span>().<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;backgroundColor&#x27;</span>, <span class=\"string\">&#x27;blue&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;这是兄弟元素&#x27;</span>+brotherElement);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 获取后代元素 指的是li标签</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> afterElement = $(<span class=\"string\">&#x27;.campus&#x27;</span>).<span class=\"title function_\">find</span>($(<span class=\"string\">&#x27;.bj&#x27;</span>)).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;backgroundColor&#x27;</span>,<span class=\"string\">&#x27;red&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>图片展示：</p>\n<p><img src=\"/2024/07/06/jQuery%E5%AD%A6%E4%B9%A0/image-20240707145959018.png\" alt=\"image-20240707145959018\"></p>\n<ol>\n<li><p>parent方法是否需要传递参数？</p>\n<p>不需要，父元素只有一个</p>\n</li>\n<li><p>获取子元素的方法是什么？</p>\n<p>children方法</p>\n</li>\n<li><p>siblings方法一定要传入选择器吗？</p>\n<p>不一定，不传入获取所有兄弟元素，传入的话就是进行筛选啦</p>\n</li>\n<li><p>find方法是否可以获取到子元素?</p>\n<p>可以，子元素也是后代元素的一种</p>\n</li>\n</ol>\n<h2 id=\"12-操纵类名\"><a href=\"#12-操纵类名\" class=\"headerlink\" title=\"12.操纵类名\"></a>12.操纵类名</h2><p>使用jQuery提供的方法操纵元素的类名</p>\n<p>通过操纵类名达到切换样式的目的。</p>\n<p>适用场景：样式多且杂，这时候切换类名比一个个写入方便多</p>\n<p>基础语法：\t</p>\n<p>名字非常好记，方法都是通过class结尾的，结合不同的单词产生不同的效果</p>\n<ul>\n<li><code>addClass</code>就是添加类名</li>\n<li><code>removeClass</code>就是移除类名</li>\n<li><code>hasClass</code>是判断类名是否存在，返回的是<code>布尔值</code></li>\n<li><code>toggleClass</code>可以对类名进行切换，有就移除，没有就添加。</li>\n</ul>\n<p>参数就是需要操作的类名</p>\n<p>示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>操纵类名<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-class\">.test</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background-color</span>: green;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-class\">.active</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background-color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid skyblue;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 操纵的盒子 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 测试用按钮 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;add&quot;</span>&gt;</span>添加类名<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;remove&quot;</span>&gt;</span>移除类名<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;has&quot;</span>&gt;</span>判断类名<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;toggle&quot;</span>&gt;</span>切换类名<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 导入jQuery --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./jquery/jquery-3.5.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.  添加类名</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.add&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        $(<span class=\"string\">&#x27;.test&#x27;</span>).<span class=\"title function_\">addClass</span>(<span class=\"string\">&#x27;active&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2. 移除类名</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.remove&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        $(<span class=\"string\">&#x27;.test&#x27;</span>).<span class=\"title function_\">removeClass</span>(<span class=\"string\">&#x27;active&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3. 判断类名</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.has&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> res = $(<span class=\"string\">&#x27;.test&#x27;</span>).<span class=\"title function_\">hasClass</span>(<span class=\"string\">&#x27;active&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;res:&#x27;</span>, res)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 4. 切换类名</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.toggle&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        $(<span class=\"string\">&#x27;.test&#x27;</span>).<span class=\"title function_\">toggleClass</span>(<span class=\"string\">&#x27;active&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>方法是否需要传递参数?</p>\n<p>需要，这一节学习的4个方法都需要传递类名作为参数</p>\n</li>\n<li><p>hasClass方法的返回值是什么？</p>\n<p>布尔值，hasClass方法的作用是判断类名是否存在，true就是存在，false就是不存在</p>\n</li>\n<li><p>addClass是添加类名，removeClass是移除类名，切换类名的方法叫做?</p>\n<p>toggleClass，类名存在就移除，不存在就添加</p>\n</li>\n</ol>\n<h2 id=\"13-事件进阶\"><a href=\"#13-事件进阶\" class=\"headerlink\" title=\"13.事件进阶\"></a>13.事件进阶</h2><p>更为强大的事件绑定,还能解绑哦</p>\n<p>学习事件进阶需要解决两个问题：</p>\n<ol>\n<li>对于没有提供的方法的事件无法绑定，比如<code>input</code>。</li>\n<li>对于绑定的事件如何移除呢？</li>\n<li>有些更高级的需求也不好实现，比如：绑定一次性事件，就是只能触发一次的事件！</li>\n</ol>\n<p>首先是注册事件，我们可以直接使用on方法，来注册所有的事件，他是要传递两个参数，第1个是事件名，比如点击事件写click就好，第2个是回调函数</p>\n<p>​\t\t如果要删除事件呢，可以使用off这个方法，想要删除什么事件，就传入什么事件名!</p>\n<p>​\t\t如果不传入事件名，会删除所有哦，是不是特别暴力啊！</p>\n<p>​\t\t最后一个是注册一次性事件，用法和on类似，方法名换成了one</p>\n<p>基础语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 注册事件</span></span><br><span class=\"line\">.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;事件名&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 2. 移除指定事件</span></span><br><span class=\"line\">.<span class=\"title function_\">off</span>(<span class=\"string\">&#x27;事件名&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 3. 移除所有事件</span></span><br><span class=\"line\">.<span class=\"title function_\">off</span>()</span><br><span class=\"line\"><span class=\"comment\">// 4. 注册一次性事件</span></span><br><span class=\"line\">.<span class=\"title function_\">one</span>(<span class=\"string\">&#x27;事件名&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在回调函数中，this还指的是jQ对象</p>\n<p>示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>事件进阶<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">30px</span> <span class=\"number\">40px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">button</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 测试标签 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;onoff&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;one&quot;</span>&gt;</span>支付<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 导入jQuery --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./jquery/jquery-3.5.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1. 注册事件 on</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.onoff&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;focus&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;获取焦点&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.onoff&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;blur&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;失去焦点&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.onoff&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;input&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// console.log(&#x27;input事件触发&#x27;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// console.log(this)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> value = $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">val</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;value:&#x27;</span>, value)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">//下面这种写法会报错</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// $(&#x27;.onoff&#x27;).input(function () &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">//   console.log(&#x27;input事件触发&#x27;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2. 移除指定事件 off</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.onoff&#x27;</span>).<span class=\"title function_\">off</span>(<span class=\"string\">&#x27;focus&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3. 移除所有事件 off</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.onoff&#x27;</span>).<span class=\"title function_\">off</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 4. 注册一次性事件 one</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.one&#x27;</span>).<span class=\"title function_\">one</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;支付成功998元&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>使用on方法进行事件绑定时，第一个参数是什么?</p>\n<p>事件名</p>\n</li>\n<li><p>使用off方法时可以不传递参数吗？</p>\n<p>可以，删除所有事件，比较暴力</p>\n</li>\n<li><p>一次性事件通过什么方法绑定？</p>\n<p>one</p>\n</li>\n</ol>\n<h2 id=\"14-触发事件\"><a href=\"#14-触发事件\" class=\"headerlink\" title=\"14.触发事件\"></a>14.触发事件</h2><p>用代码的方式触发注册的事件</p>\n<p>学习在jQuery中如何通过代码的方式去触发绑定的事件。</p>\n<p>基础语法：</p>\n<ul>\n<li>直接调用对应的事件方法即可，不需要传入任何参数就是触发，比如点击事件，调用click方法即可</li>\n<li>但并不是所有事件都有对应的方法，比如input事件，这个时候就可以通过trigger的方式来触发，直接传入希望触发的事件名就好啦</li>\n<li>trigger方法可以触发任意的事件，包括自定义的事件，什么叫做自定义事件呢？顾名思义就是事件名是咱们自己想的，写什么都可以</li>\n<li>自定义事件必须通过on的方式来注册，把第一个参数换成自定义的事件名就好啦，同时他也只能通过代码的方式来触发</li>\n</ul>\n<p>自定义事件是一种更为高阶的用法，咱们只需要了解基本的用法即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 直接触发</span></span><br><span class=\"line\">.事件名()</span><br><span class=\"line\"><span class=\"comment\">// 2. trigger触发</span></span><br><span class=\"line\">.<span class=\"title function_\">trigger</span>(<span class=\"string\">&#x27;事件名&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 3. 触发自定义事件</span></span><br><span class=\"line\">.<span class=\"title function_\">trigger</span>(<span class=\"string\">&#x27;自定义事件&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 4. 注册自定义事件</span></span><br><span class=\"line\">.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;自定义事件&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>触发事件事件处理<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">30px</span> <span class=\"number\">40px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 测试用标签 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 导入jQuery --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./jquery/jquery-3.5.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1. 直接触发</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.btn&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;backgroundColor&#x27;</span>, <span class=\"string\">&#x27;skyblue&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">//下面这个代码模拟了一个点击</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// $(&#x27;.btn&#x27;).click()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.text&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;input&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;input触发啦！&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// // 2. trigger触发，也是相当于模拟了事件要执行的行为，比如点击，输入等等</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.text&#x27;</span>).<span class=\"title function_\">trigger</span>(<span class=\"string\">&#x27;input&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.btn&#x27;</span>).<span class=\"title function_\">trigger</span>(<span class=\"string\">&#x27;click&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3. 注册自定义事件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.text&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;itheima-input&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;自定义事件触发！&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 4. 触发自定义事件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.text&#x27;</span>).<span class=\"title function_\">trigger</span>(<span class=\"string\">&#x27;itheima-input&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​\t\ttrigger方法可以触发所有的事件，但是他的强大之处可不仅于此。对于自定义的事件也是可以触发。</p>\n<ol>\n<li><p>调用click方法是否可以触发点击事件？</p>\n<p>可以，只要有方法的事件，都可以用这样的方式来触发</p>\n</li>\n<li><p>trigger方法只能用来触发原生事件？</p>\n<p>不对，自定义事件也是可以触发的</p>\n</li>\n<li><p>自定义事件，可以通过鼠标点击来触发？</p>\n<p>不可以，自定义事件只能通过trigger来触发</p>\n</li>\n</ol>\n<h2 id=\"15-window事件绑定\"><a href=\"#15-window事件绑定\" class=\"headerlink\" title=\"15.window事件绑定\"></a>15.window事件绑定</h2><p>如何为window对象绑定事件呢?</p>\n<p>用原生的方式为他绑定事件是这样的：直接为window对象对应的事件赋值即可,比如滚动，比如点击</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 滚动</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onscroll</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//  点击</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>适用jQ来获取windows对象基础语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 滚动</span></span><br><span class=\"line\">$(<span class=\"variable language_\">window</span>).<span class=\"title function_\">scroll</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//  点击</span></span><br><span class=\"line\">$(<span class=\"variable language_\">window</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>$方法中传入什么可以为window绑定事件?</p>\n<p>window对象，不用加引号！！！</p>\n<h1 id=\"jQuery第二部分\"><a href=\"#jQuery第二部分\" class=\"headerlink\" title=\"jQuery第二部分\"></a>jQuery第二部分</h1><h2 id=\"1-元素位置\"><a href=\"#1-元素位置\" class=\"headerlink\" title=\"1.元素位置\"></a>1.元素位置</h2><p><code>jQuery</code>中如何获取元素位置呢?</p>\n<ul>\n<li><p><code>position</code>和<code>offset</code>都可以获取位置</p>\n<ul>\n<li>返回的是一个对象</li>\n</ul>\n</li>\n<li><p>两者获取位置的参照物不同:</p>\n<ul>\n<li><code>offset</code>始终参照的是<code>html</code></li>\n<li><code>position</code>参照的有定位属性的最近祖先元素</li>\n</ul>\n</li>\n<li><p>对于<code>margin</code>两者的处理也不相同</p>\n<ul>\n<li><code>offset</code>忽略</li>\n<li><code>position</code>会累加<code>margin</code></li>\n</ul>\n</li>\n<li><p>如果要设置位置的话只能通过<code>offset</code>方法、</p>\n</li>\n</ul>\n<p><strong>总结：</strong></p>\n<ol>\n<li><p><code>offset</code>方法和<code>position</code>方法哪个参考的是<code>html</code>?</p>\n<p><code>offset</code>方法,<code>position</code>方法参考的是最近并且有定位的祖先元素</p>\n</li>\n<li><p><code>offset</code>方法和<code>position</code>方法哪个可以用来设置位置?</p>\n<p><code>offset</code>方法可以设置位置,但是没有动画效果</p>\n</li>\n<li><p>如果元素有<code>margin</code>哪个方法会一起计算进去呢?</p>\n<p><code>offset</code>会把<code>margin</code>也计算进去,而<code>position</code>不会</p>\n</li>\n</ol>\n<h2 id=\"2-滚动距离\"><a href=\"#2-滚动距离\" class=\"headerlink\" title=\"2.滚动距离\"></a>2.滚动距离</h2><blockquote>\n<p><code>jQuery</code>中如何获取滚动距离呢?</p>\n</blockquote>\n<ul>\n<li>获取元素滚动距离</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//垂直方向移动距离</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">scrollTop</span>()</span><br><span class=\"line\"><span class=\"comment\">//水平方向移动距离</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">scrollLeft</span>()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取网页的滚动距离</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;html&#x27;</span>).<span class=\"title function_\">scrollTop</span>()</span><br><span class=\"line\">$(<span class=\"string\">&#x27;html&#x27;</span>).<span class=\"title function_\">scrollLeft</span>()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置滚动距离</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&#x27;html&#x27;).scrollTop(值)</span><br><span class=\"line\">$(&#x27;html&#x27;).scrollLeft(值)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>小结:</strong></p>\n<ol>\n<li><p>对于内容可以滚动的元素可以通过<code>scrollTop</code>或者<code>scrollLeft</code>获取滚动距离,如何获取网页的滚动距离呢?</p>\n<p>把<code>html</code>作为选择器即可</p>\n</li>\n</ol>\n<p>调用<code>scrollTop</code>和<code>scrollLeft</code>方法可以让元素滚到指定位置。</p>\n<h2 id=\"3-jQuery动画\"><a href=\"#3-jQuery动画\" class=\"headerlink\" title=\"3.jQuery动画\"></a>3.jQuery动画</h2><h3 id=\"显示-隐藏动画\"><a href=\"#显示-隐藏动画\" class=\"headerlink\" title=\"显示&amp;隐藏动画\"></a>显示&amp;隐藏动画</h3><p>如何使用<code>jQuery</code>的显示隐藏动画</p>\n<ol>\n<li><p>如何使用<code>show</code>方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//显示，参数可以传递持续时间，单位ms</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">show</span>()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如何使用<code>hide</code>方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//隐藏，参数可以传递持续时间，单位ms</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">hide</span>()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如何使用<code>toggle</code>方法(可以自动控制显示和隐藏)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//显示&amp;隐藏，参数可以传递持续时间，单位ms</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">toggle</span>()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法中的<code>this</code></p>\n</li>\n<li><p>动画的持续时间</p>\n<p>就是你要传递的参数，单位ms</p>\n</li>\n<li><p>动画效果</p>\n</li>\n<li><p>调优demo</p>\n</li>\n</ol>\n<h3 id=\"动画-淡入-淡出\"><a href=\"#动画-淡入-淡出\" class=\"headerlink\" title=\"动画 - 淡入&amp;淡出\"></a>动画 - 淡入&amp;淡出</h3><p>基础语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//淡入</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">fadeIn</span>()</span><br><span class=\"line\"><span class=\"comment\">//淡出</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">fadeOut</span>()</span><br><span class=\"line\"><span class=\"comment\">//淡入&amp;淡出，相当于在淡入淡出效果之间切换</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">fadeToggle</span>()</span><br></pre></td></tr></table></figure>\n\n<p>控制淡入淡出的时长，依旧可以传递时间参数，单位ms</p>\n<p>1.淡入淡出效果是通过修改元素的哪个样式实现?<br>opactity<br>2.元素的尺寸是否会在淡入淡出的动画过程中一起改变?<br>不会</p>\n<h3 id=\"动画-展开-收起\"><a href=\"#动画-展开-收起\" class=\"headerlink\" title=\"动画 - 展开&amp;收起\"></a>动画 - 展开&amp;收起</h3><ol>\n<li><p>如何使用<code>slideDown</code>方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//展开</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">slideDown</span>()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如何使用<code>slideUp</code>方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//收起</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">slideUp</span>()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如何使用<code>slideToggle</code>方法，就是在展开和收起直接切换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//展开&amp;收起</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">slideToggle</span>()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本质是修改了哪个样式</p>\n<p>改变垂直方向上的尺寸</p>\n</li>\n<li><p>方法中的<code>this</code></p>\n</li>\n<li><p>动画的持续时间</p>\n<p>传递参数作为持续时间，单位ms</p>\n</li>\n<li><p>动画效果</p>\n</li>\n<li><p><code>demo</code>中使用淡入淡出效果</p>\n</li>\n</ol>\n<p>1.slideDown和slideUp哪一个用来把元素显示出来?<br>slideDown展开<br>2.在垂直方向上调整的样式除了高度、margin、还有?<br>padding</p>\n<h3 id=\"动画-队列及停止\"><a href=\"#动画-队列及停止\" class=\"headerlink\" title=\"动画 - 队列及停止\"></a>动画 - 队列及停止</h3><p>通过jQuery为元素设置的多个动画会依次添加到动画队列中,并根据添加的顺序依次播放</p>\n<p>基础语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//停止当前动画，继续播放后续的动画效果</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">stop</span>()</span><br><span class=\"line\"><span class=\"comment\">//清空队列 在动画当前状态停止，且不再继续播放后续动画</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">stop</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"comment\">//清空队列 直接到当前动画的结束状态</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">stop</span>(<span class=\"literal\">true</span>,<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>动画</strong>方法和<strong>stop</strong>方法返回的是<strong>同一个jQuery对象</strong></p>\n<p>1.队列中动画的播放顺序和添加顺序是否有关系?<br>有<br>2.stop方法要清空队列需要传递什么参数?<br>true<br>3.传递1个true和传递2个true的区别是?<br>1个:动画停止在执行stop方法的瞬间<br>2个:直接到当前播放动画的结束状态</p>\n<h3 id=\"动画-自定义动画\"><a href=\"#动画-自定义动画\" class=\"headerlink\" title=\"动画-自定义动画\"></a>动画-自定义动画</h3><p>jQuery提供了animate方法来实现更为复杂的动画效果</p>\n<p>基本语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">animate</span>(动画属性，持续时间)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数值类样式支持动画,支持多个</li>\n<li>默认单位是px</li>\n<li>支持非样式的特殊属性<ul>\n<li>scrollLeft：水平方向滚动</li>\n<li>scrollTop：垂直方向滚动</li>\n</ul>\n</li>\n<li>持续时间单位是毫秒</li>\n</ul>\n<h2 id=\"4-事件参数\"><a href=\"#4-事件参数\" class=\"headerlink\" title=\"4.事件参数\"></a>4.事件参数</h2><p>如何使用事件参数呢?</p>\n<p>学习<code>jQuery</code>中的<code>事件对象</code>,有时候也称之为<code>事件参数</code>日常开发中使用的频率还行,他在触发事件时为开发者额外提供了一些信息,和功能:比如事件的触发对象,用来阻止冒泡,阻止默认行为什么的.</p>\n<p>用法和<code>webapi</code>阶段基本一致</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 语法</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).事件(<span class=\"keyword\">function</span>(<span class=\"params\">event</span>)&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 比如 点击事件</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span>(<span class=\"params\">event</span>)&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 比如 键盘抬起事件</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">keyup</span>(<span class=\"keyword\">function</span>(<span class=\"params\">event</span>)&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>事件对象<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background-color</span>: pink;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">input</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">button</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>事件对象<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>事件触发时额外提供给开发者的信息,可以用来干不少事情哦<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://www.baidu.com/&quot;</span>&gt;</span>跳转百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>点我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./jquery/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>1.最外层盒子绑定点击事件,查看事件触发源，也就是谁触发了事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;.box&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;event.target:&#x27;</span>,event.<span class=\"property\">target</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;box-click&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>2.阻止a标签的默认行为，比如a标签是跳转了，阻止跳转</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;a&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  event.<span class=\"title function_\">preventDefault</span>()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>3.判断键盘按键</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;input&#x27;</span>).<span class=\"title function_\">keyup</span>(<span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;keyCode:&#x27;</span>,event.<span class=\"property\">keyCode</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">keyCode</span> === <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;按下回车&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>4.阻止冒泡</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;button&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  event.<span class=\"title function_\">stopPropagation</span>()</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;button-click&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>小结一下</strong></p>\n<p>事件对象:</p>\n<ul>\n<li>也可以叫做事件参数用法和<code>webapi</code>阶段学习的基本一致</li>\n<li>在事件触发时额外传递给开发者中的信息和功能</li>\n<li>可以通过它获取触发源,实现阻止默认行为等功能</li>\n</ul>\n<h2 id=\"5-动态添加html\"><a href=\"#5-动态添加html\" class=\"headerlink\" title=\"5.动态添加html\"></a>5.动态添加html</h2><h3 id=\"节点-新增\"><a href=\"#节点-新增\" class=\"headerlink\" title=\"节点 - 新增\"></a>节点 - 新增</h3><p>在<code>jQuery</code>中如何新增(插入)节点</p>\n<p><strong>用法01</strong>-基于创建的jQuery对象进行添加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基于html创建jQuery对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> $a = $(<span class=\"string\">&#x27;&lt;a href=&quot;#&quot;&gt;超链接&lt;/a&gt;&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 添加jQuery对象</span></span><br><span class=\"line\"><span class=\"comment\">// 在父元素末尾添加</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">append</span>($a)</span><br><span class=\"line\"><span class=\"comment\">// 在父元素开头添加</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">prepend</span>($a)</span><br><span class=\"line\"><span class=\"comment\">// 在兄弟元素之前添加</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">before</span>($a)</span><br><span class=\"line\"><span class=\"comment\">// 在兄弟元素之后添加</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">after</span>($a)</span><br></pre></td></tr></table></figure>\n\n<p><strong>用法02</strong>-直接添加<code>html</code>结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接添加html结构</span></span><br><span class=\"line\"><span class=\"comment\">// 在父元素末尾添加</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;html结构&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 在父元素开头添加</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">prepend</span>(<span class=\"string\">&#x27;html结构&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 在兄弟元素之前添加</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">before</span>(<span class=\"string\">&#x27;html结构&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 在兄弟元素之后添加</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">after</span>(<span class=\"string\">&#x27;html结构&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>小结一下:</strong></p>\n<ol>\n<li><code>append</code>、<code>prepend</code> 以父元素为参考分别在结尾处和开头处添加新的元素节点</li>\n<li><code>after</code>、<code>before</code> 以当前元素为参考在之前或之后插入新的元素节点</li>\n<li><code>append</code>、<code>prepend</code>、<code>after</code>、<code>before</code> 均支持直接将 html 字符串做为节点插入</li>\n</ol>\n<h3 id=\"节点-删除\"><a href=\"#节点-删除\" class=\"headerlink\" title=\"节点 - 删除\"></a>节点 - 删除</h3><p>在<code>jQuery</code>中如何删除节点呢?</p>\n<p>不同于<code>webapi</code>中需要通过父元素才可以删除自己,<code>jQuery</code>中直接就可以把自己给删掉。</p>\n<p>基础语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除自己（删掉html结构）</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">remove</span>();</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong></p>\n<ol>\n<li><code>remove</code> 方法删除的是当前调用方法的元素节点</li>\n</ol>\n<h3 id=\"节点-克隆\"><a href=\"#节点-克隆\" class=\"headerlink\" title=\"节点 - 克隆\"></a>节点 - 克隆</h3><p><code>jQuery</code>中如何基于现有的节点进行克隆(复制)呢?</p>\n<p>jQuery 中封装了复制（克隆）元素节点的方法，其用法如下代码所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 通过复制获得新的节点 拷贝事件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  $(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">clone</span>(<span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">   <span class=\"comment\">// 通过复制获得新的节点 不拷贝事件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  $(<span class=\"string\">&#x27;选择器&#x27;</span>).<span class=\"title function_\">clone</span>(<span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设我们有一个需要复制的元素</span></span><br><span class=\"line\">2<span class=\"keyword\">var</span> originalElement = $(<span class=\"string\">&#x27;#someElement&#x27;</span>);</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span><span class=\"comment\">// 通过复制获得新的节点，并保留事件处理（根据需要选择true或false）</span></span><br><span class=\"line\">5<span class=\"keyword\">var</span> clonedElement = originalElement.<span class=\"title function_\">clone</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span><span class=\"comment\">// 然后你可以将这个复制的元素插入到DOM中的其他位置</span></span><br><span class=\"line\"><span class=\"number\">8</span><span class=\"comment\">// 例如，将其添加到某个元素的末尾</span></span><br><span class=\"line\"><span class=\"number\">9</span><span class=\"title function_\">$</span>(<span class=\"string\">&#x27;#targetElement&#x27;</span>).<span class=\"title function_\">append</span>(clonedElement);</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中：</p>\n<ol>\n<li><code>originalElement</code>是我们想要复制的元素，通过ID选择器<code>#someElement</code>选取。</li>\n<li><code>clonedElement</code>变量存储了复制得到的新节点。</li>\n<li>使用<code>.append(clonedElement)</code>将复制的节点添加到ID为<code>targetElement</code>的元素内部末尾。</li>\n</ol>\n<p>总结：</p>\n<ol>\n<li><code>clone</code> 方法复制得到的元素节点仍是 jQuery 对象</li>\n<li>待复制的节点中如果有事件监听，需要为 <code>clone</code> 方法传入参数 <code>true</code></li>\n</ol>\n<h2 id=\"6-事件委托\"><a href=\"#6-事件委托\" class=\"headerlink\" title=\"6.事件委托\"></a>6.事件委托</h2><p><code>jQuery</code>中如何使用事件委托呢?</p>\n<p>jQuery 中封装了事件委托的支持，其用法如下代码所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// on 方法内置支持事件委托</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;祖先元素&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;事件名&#x27;</span>, <span class=\"string\">&#x27;后代选择器&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>举个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myList&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 初始时可能有一些列表项，也可能没有 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"variable language_\">document</span>).<span class=\"title function_\">ready</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用事件委托，为 &#x27;#myList&#x27; 下现在及将来所有的 &#x27;li&#x27; 元素绑定点击事件</span></span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#myList&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"string\">&#x27;li&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你点击了: &#x27;</span> + $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">text</span>());</span><br><span class=\"line\">        <span class=\"comment\">// 这里的 &#x27;this&#x27; 指向实际触发事件的 li 元素</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 假设后面动态添加一些 li</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        $(<span class=\"string\">&#x27;#myList&#x27;</span>).<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;&lt;li&gt;新增列表项 3&lt;/li&gt;&#x27;</span>);</span><br><span class=\"line\">        $(<span class=\"string\">&#x27;#myList&#x27;</span>).<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;&lt;li&gt;新增列表项 4&lt;/li&gt;&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>); <span class=\"comment\">// 2秒后添加新项</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中：</p>\n<ul>\n<li><code>&#39;#myList&#39;</code> 是祖先元素，我们在此元素上设置监听器。</li>\n<li><code>&#39;li&#39;</code> 是后代选择器，指定了实际应该响应事件的目标元素。</li>\n<li>当用户点击任何现有的或将来动态添加到 <code>#myList</code> 中的 <code>li</code> 元素时，都会触发这个点击事件处理器。</li>\n<li>即使是在 <code>setTimeout</code> 函数中动态添加的 li，也会自动拥有点击事件处理功能，因为事件委托是基于当前的及未来的匹配元素来工作的。</li>\n</ul>\n<p>总结：</p>\n<ol>\n<li>事件委托需要为某个在 DOM 中已经存在的祖先元素添加事件监听</li>\n<li><code>delegate</code> 方法是 jQuery 中专门的事件委托的方法</li>\n<li><code>on</code> 方法中也内置支持事件委托，推荐使用 <code>on</code> 方法</li>\n</ol>\n<h1 id=\"jQuery第三部分\"><a href=\"#jQuery第三部分\" class=\"headerlink\" title=\"jQuery第三部分\"></a>jQuery第三部分</h1><h2 id=\"1-入口函数\"><a href=\"#1-入口函数\" class=\"headerlink\" title=\"1.入口函数\"></a>1.入口函数</h2><blockquote>\n<p>在jQ中的入口函数咋写呢，类似于window.onload但是不一样。</p>\n</blockquote>\n<ul>\n<li><p>jQ中的写法</p>\n</li>\n<li><p>对比window.onload</p>\n</li>\n</ul>\n<p>jQuery 中提供了更为简便的入口函数写法</p>\n<p>在我们原生js中：</p>\n<p><strong>window.onload</strong>的执行时机是页面资源加载完毕，包括dom元素解析完毕，外部的css，图片什么的也需要加载完毕，所以写在他内部的逻辑肯定可以获取到页面上的dom元素。</p>\n<p>在jQ中的写法是这样的，基础语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(windows).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;load&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>jQ还提供了一个ready方法，完整的写法略微有点复杂,调用$方法然后把document传进去接着调用ready方法并传入回调函数,但是这里介绍较为简单的写法，两种写法的功能是一样的。</p>\n<p>同样的功能还有一种更为简单的写法，直接在调用$方法的时候传入回调函数即可</p>\n<p>基础语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//完整写法</span></span><br><span class=\"line\">$(<span class=\"variable language_\">document</span>).<span class=\"title function_\">ready</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//简单写法</span></span><br><span class=\"line\">$(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>基于上面的这种写法，它能达到的功能是当dom载入完毕，即调用该函数</p>\n<p>下面举一个例子，我们在head标签中写入一个盒子，写在这里如果修改盒子的样式，那么他是不会改变的，<strong>因为代码执行的时候dom元素还没加载呢！</strong></p>\n<p>下面我们展示用window对象和jQ对象写法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 测试元素 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//window对象</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;.box&#x27;</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;backgroundColor&#x27;</span>, <span class=\"string\">&#x27;orange&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//jQ的window对象写法</span></span><br><span class=\"line\">  $(<span class=\"variable language_\">window</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;load&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;.box&#x27;</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;backgroundColor&#x27;</span>, <span class=\"string\">&#x27;skyblue&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//jQ提供的ready方法</span></span><br><span class=\"line\">  $(<span class=\"variable language_\">document</span>).<span class=\"title function_\">ready</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;.box&#x27;</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;backgroundColor&#x27;</span>, <span class=\"string\">&#x27;pink&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"comment\">//ready方法的简单写法</span></span><br><span class=\"line\">  $(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;.box&#x27;</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;backgroundColor&#x27;</span>, <span class=\"string\">&#x27;deepskyblue&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>window.onload和ready哪个先执行</p>\n<p>ready，因为ready只需要考虑dom元素加载完成，不需要考虑外部资源</p>\n</li>\n<li><p>window.onload和ready哪个可以获取图片尺寸</p>\n<p>window.onload </p>\n</li>\n<li><p>开发中用哪个？</p>\n<p>看情况讨论</p>\n<p>现在js都是在body底部载入，所以代码执行的时候dom元素都已经可以获取到了，这个时候用不用都是可以的。但是代码中如果要确保可以获取到图片的尺寸就需要用window.onload咯</p>\n</li>\n</ol>\n<h2 id=\"2-轮播图插件–slick\"><a href=\"#2-轮播图插件–slick\" class=\"headerlink\" title=\"2.轮播图插件–slick\"></a>2.轮播图插件–slick</h2><blockquote>\n<p>轮播图作为一个非常常见的功能，有很多现成的插件，咱们来学习一下slick</p>\n</blockquote>\n<ul>\n<li><p>轮播图插件</p>\n<ul>\n<li>常用的功能封装成插件，直接使用即可</li>\n</ul>\n</li>\n<li><p>插件的含义用vscode插件讲解</p>\n</li>\n<li><p>jQuery插件的含义</p>\n</li>\n<li><p>插件使用套路</p>\n</li>\n<li><p>调整</p>\n<ul>\n<li>配置调整<ul>\n<li>小圆点</li>\n<li>箭头</li>\n</ul>\n</li>\n<li>样式调整<ul>\n<li>审查元素找到样式</li>\n<li>直接覆盖</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>小结：</p>\n<ul>\n<li><p>slick是谁的插件？</p>\n<p>jQuery，需要依赖于jQuery才可以执行</p>\n</li>\n<li><p>是否需要把用法和配置背下来？</p>\n<p>不需要，随用随查，结合翻译英文也不可怕</p>\n</li>\n<li><p>插件的样式可以调整吗？</p>\n<p>可以，直接用自己的样式覆盖默认的样式即可</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>那么轮播图具体要怎么写呢？</p>\n<ol>\n<li>下包：首先把需要使用的插件下载到本地</li>\n<li>导包：jQuery的插件需要在jQ的后面导入，因为他依赖jQ，有的插件还需要用到css，根据需求导入就好！</li>\n<li>用包：根据文档提供的步骤使用它。</li>\n</ol>\n<p>导包：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">&lt;!-- 引入插件所需要的样式表 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./assets/slick/slick.css&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./assets/slick/slick-theme.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>建议使用插件的时候随查随用</p>\n<h2 id=\"3-懒加载插件-lazyload\"><a href=\"#3-懒加载插件-lazyload\" class=\"headerlink\" title=\"3.懒加载插件 - lazyload\"></a>3.懒加载插件 - lazyload</h2><p>这一节咱们来学习懒加载插件，名字叫做lazyload,作用是让图片的加载变的不那么迅速。从立刻加载变成看到了再去加载，这个功能在图片很多的网页用的较多，比如电商网站,像京东淘宝都有用呢。</p>\n<p>既然是插件，那就是下包，导包，用包即可</p>\n<p>这里示例导入包的代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 先导入jQueery --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./jquery/jquery-3.5.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 再导入lazyload插件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./assets/jquery.lazyload.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>用该插件的时候，有几个地方需要调整</p>\n<p>将<code>src</code>换成<code>data-original</code></p>\n<p><img src=\"/2024/07/06/jQuery%E5%AD%A6%E4%B9%A0/image-20240708142056492.png\" alt=\"image-20240708142056492\"></p>\n<p>然后通过选择器找到需要进行懒加载的图片，随后调用方法即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 找到希望懒加载的图片并调用lazyload方法</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;.lazyload&#x27;</span>).<span class=\"title function_\">lazyload</span>()</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>使用懒加载插件之后，看不到的图片会不会加载？</p>\n<p>不会，看到了才会加载</p>\n</li>\n<li><p>图片很多的网页用这个可以提升加载速度吗？</p>\n<p>可以，因为不会加载所有的图片，数据的传输量更小，在网速不变的情况下，加载的速度肯定会更快一些呢！</p>\n</li>\n</ol>\n<h2 id=\"4-fullpage插件\"><a href=\"#4-fullpage插件\" class=\"headerlink\" title=\"4.fullpage插件\"></a>4.fullpage插件</h2><p>fullpage，也是jQ的插件。他可以用来制作咱们平时在手机或者电脑上见过的那种全屏滚动的页面，这一类的页面主要的作用是营销或者推广。</p>\n<p>同样三步走，下包，导包，用包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 导入 fullpage 配套样式 --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./fullpage/jquery.fullpage.css&quot;</span> /&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 导入 jQuery --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./jquery/jquery-3.5.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;!-- 在 jQuery 之后导入 fullpage 插件 --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./fullpage/jquery.fullpage.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>接下来是他的结构,外层的容器用个有意义的标记就好，比如id或者class都可以，内部就是每一屏的容器啦，每一屏要显示的内容放到对应的盒子里面就好，需要注意的是：每屏都必须有secion这个类名，如果有需求可以额外的添加其他的类名，但是这个必须存在哦</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;fullpage&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;section&quot;</span>&gt;</span>第一屏<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;section&quot;</span>&gt;</span>第二屏<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;section&quot;</span>&gt;</span>第三屏<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>最后就是调用fullpage方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#fullpage&#x27;</span>).<span class=\"title function_\">fullpage</span>(&#123;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>fullpage插件在使用的时候一定要传入配置吗？</p>\n<p>不一定，不传入任何的配置也有默认的功能</p>\n</li>\n<li><p>fullpage插件的区域容器一定要添加什么类名？</p>\n<p>section，必须有这个类名，但是可以添加额外的类名</p>\n</li>\n</ol>\n<h2 id=\"5-表单-提交事件\"><a href=\"#5-表单-提交事件\" class=\"headerlink\" title=\"5.表单 - 提交事件\"></a>5.表单 - 提交事件</h2><p>示例表单：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;用户名&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;密码&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>绑定提交事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;form&#x27;</span>).<span class=\"title function_\">submit</span>(<span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;submit&#x27;</span>)</span><br><span class=\"line\">  event.<span class=\"title function_\">preventDefault</span>()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用场景：在输入完账号或者密码时进行账号密码的校验，已经提示错误等时候，需要弹出提示，这时就需要将表单提交行为的默认时间阻止了即可，然后再写需要的逻辑。</p>\n<h2 id=\"6-插件-日期选择器\"><a href=\"#6-插件-日期选择器\" class=\"headerlink\" title=\"6.插件 - 日期选择器\"></a>6.插件 - 日期选择器</h2><p>既然是插件，那就三步走，下包，导包，用包</p>\n<p>这里示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 导入日期选择器的样式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./datepicker/datepicker.css&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 导入jQuery --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./jquery/jquery-3.5.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 导入日期选择器插件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./datepicker/datepicker.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 导入语言包 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./datepicker/i18n/datepicker.zh-CN.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 准备html结构 --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;datapicker&quot;</span> /&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 调用插件方法</span></span><br><span class=\"line\">  $(<span class=\"string\">&#x27;.datapicker&#x27;</span>).<span class=\"title function_\">datepicker</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置日期显示中文</span></span><br><span class=\"line\">    <span class=\"attr\">language</span>: <span class=\"string\">&#x27;zh-CN&#x27;</span>,</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>设置选择完毕后自动关闭和自动设置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//传入配置项，这里传入了对象</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;.datapicker&#x27;</span>).<span class=\"title function_\">datepicker</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">language</span>: <span class=\"string\">&#x27;zh-CN&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">autoPick</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">autoHide</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>插件默认显示的语言是中文还是英文?</p>\n<p>英文</p>\n</li>\n<li><p>为了设置插件的语言为中文，需要导入什么?</p>\n<p>中文语言包</p>\n</li>\n</ol>\n<h2 id=\"7-插件-表单验证\"><a href=\"#7-插件-表单验证\" class=\"headerlink\" title=\"7.插件 - 表单验证\"></a>7.插件 - 表单验证</h2><p>如何使用表单验证插件</p>\n<p>业务场景：我们在注册的时候，如果用户名不填，或者密码强度不够，或者不勾选用户协议能不能注册呀？<strong>对啦，很明显是注册不了的</strong>，并且根据错误的不同会有与之对应的提示信息，这就是表单验证的功能。</p>\n<p>既然是插件，那就三步走，下包，导包，用包</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 导入jQuery --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./jquery/jquery-3.5.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 导入validate插件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./jquery-validate/jquery-validate.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-required</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-pattern</span>=<span class=\"string\">&quot;.&#123;6,&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li><strong>引入验证库</strong>：首先，确保您已经在项目中包含了所需的表单验证库或插件。这通常通过在HTML头部使用<code>&lt;script&gt;</code>标签或在项目依赖中导入来完成。</li>\n<li><strong>使用验证包</strong>：在您的JavaScript代码中，引入或创建一个实例来使用这个验证包。这是设置验证功能的基础。</li>\n<li><strong>选择表单元素</strong>：通过选择器（如jQuery的选择器、Vanilla JS的<code>document.querySelector</code>或类似的API）找到您想要进行验证的表单字段。</li>\n<li><strong>调用验证方法</strong>：选中表单元素后，调用验证库提供的<code>validate</code>方法。您可以传递多种配置选项，比如：<ul>\n<li><strong>校验时机</strong>：指定何时触发验证（如提交时、失焦时等）。</li>\n<li><strong>表单提交控制</strong>：决定是否在验证失败时阻止表单提交。</li>\n<li><strong>回调函数</strong>：分别设置<code>valid</code>和<code>invalid</code>回调，用于处理验证成功或失败的情况。</li>\n</ul>\n</li>\n<li><strong>显示错误信息</strong>：若需在页面上展示错误提示，可以通过设置表单元素的<code>description</code>属性或利用验证库提供的方法来实现。这部分内容会稍后详细说明。</li>\n<li><strong>定义验证规则</strong>：<ul>\n<li>直接在HTML的表单元素上使用自定义属性（如<code>data-required</code>、<code>data-pattern</code>）来指定验证规则。</li>\n<li><code>data-required</code>表示该字段为必填项。</li>\n<li><code>data-pattern</code>允许您通过正则表达式定义更复杂的格式要求。例如，<code>data-pattern=&quot;.&#123;6,&#125;&quot;</code>意味着该字段至少需要6个字符，且可包含任何字符。</li>\n</ul>\n</li>\n<li><strong>表单结构</strong>：确保所有的表单元素都被正确地放置在<code>&lt;form&gt;</code>标签内，这是验证插件能够正常解析和工作的前提条件。</li>\n</ol>\n<p>按照以上步骤操作，您就可以轻松地为网页表单添加数据验证逻辑了。记得，正则表达式的复杂度可能需要根据实际情况调整，不必一次性记住所有正则标记，可以逐步学习并应用</p>\n<p>接下来介绍属性<code>description</code></p>\n<ul>\n<li>data-describedby：设置的是信息显示的位置</li>\n<li>data description：配置的是到底显示什么错误信息，需要和description中的属性对应。</li>\n</ul>\n<p><img src=\"/2024/07/06/jQuery%E5%AD%A6%E4%B9%A0/image-20240708145003855.png\" alt=\"image-20240708145003855\"></p>\n<p>除了这里需要对应，还有data-description也要对应上，比如下面</p>\n<p><img src=\"/2024/07/06/jQuery%E5%AD%A6%E4%B9%A0/image-20240708145357539.png\" alt=\"image-20240708145357539\"></p>\n<p>如果密码内容不填，会显示required的信息，如果填了但是不符合条件会线序pattern的信息</p>\n<p>完整代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>10-表单验证<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">ul</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">list-style</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">li</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">span</span><span class=\"selector-class\">.error</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 测试用标签 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">          昵称:</span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">data-required</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">data-describedby</span>=<span class=\"string\">&quot;nickname-error&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">data-description</span>=<span class=\"string\">&quot;nickname&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">name</span>=<span class=\"string\">&quot;nickname&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;error&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;nickname-error&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">          密码:</span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">data-required</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">data-pattern</span>=<span class=\"string\">&quot;.&#123;6,&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">data-describedby</span>=<span class=\"string\">&quot;password-error&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">data-description</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;error&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;password-error&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">data-required</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">data-describedby</span>=<span class=\"string\">&quot;agree-error&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">data-description</span>=<span class=\"string\">&quot;agree&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">name</span>=<span class=\"string\">&quot;agree&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            /&gt;</span></span><br><span class=\"line\">            同意注册协议</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;error&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;agree-error&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 导入jQuery --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./jquery/jquery-3.5.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 导入 validate插件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./jquery-validate/jquery-validate.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;form&#x27;</span>).<span class=\"title function_\">validate</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">sendForm</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">description</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">password</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">required</span>: <span class=\"string\">&#x27;密码不能为空!&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">pattern</span>: <span class=\"string\">&#x27;密码的长度必须大于等于6!&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">nickname</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">required</span>: <span class=\"string\">&#x27;昵称不能为空!&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">agree</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">required</span>: <span class=\"string\">&#x27;必须同意用户协议!&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        valid () &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;验证成功&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        invalid () &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;验证失败&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-克隆\"><a href=\"#8-克隆\" class=\"headerlink\" title=\"8.克隆\"></a>8.克隆</h2><p>学习jQuery中的克隆方法，他可以直接把一个jQuery对象拷贝一份，用法非常简单，直接调用clone方法即可，不需要传递任何参数就可以拷贝，如果希望连事件一起拷贝可以传入参数true.</p>\n<p>返回的依旧是jQ对象</p>\n<p>基本语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果希望克隆时能够连带被克隆对象的事件。这里传入true参数，反正不需要克隆事件，则不传递参数即可</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;选择器(要克隆的对象)&#x27;</span>).<span class=\"title function_\">clone</span>();</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>克隆方法得到的是什么对象？</p>\n<p>jQuery对象</p>\n</li>\n<li><p>希望事件一起克隆需要传递什么参数?</p>\n<p>true</p>\n</li>\n</ol>\n<h2 id=\"9-获取dom对象\"><a href=\"#9-获取dom对象\" class=\"headerlink\" title=\"9.获取dom对象\"></a>9.获取dom对象</h2><p>jQ提供了很多便捷的方法，但是有些方法只有dom对象才有，如何将jQ对象转为dom对象呢？</p>\n<ul>\n<li><p>调用get方法传入索引。</p>\n</li>\n<li><p>二种是通过中括号的方式传入索引，索引是从0开始，获取到的都是dom对象，可以直接使用dom对象的那些方法</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// get方法获取</span></span><br><span class=\"line\">.<span class=\"title function_\">get</span>(索引)</span><br><span class=\"line\"><span class=\"comment\">// 中括号获取</span></span><br><span class=\"line\">[索引]</span><br></pre></td></tr></table></figure>\n\n<p>示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>12-获取dom对象<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">video</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 测试标签 播放器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;play&quot;</span>&gt;</span>播放<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pause&quot;</span>&gt;</span>暂停<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./video/video.mp4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 测试标签 form --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入用户名&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入密码&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;reset&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;重置&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 导入jQuery --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./jquery/jquery-3.5.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.get方法获取dom对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> $btn = $(<span class=\"string\">&#x27;button&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;$btn:&#x27;</span>, $btn)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> pauseBtn = $btn.<span class=\"title function_\">get</span>(<span class=\"number\">1</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;pauseBtn:&#x27;</span>, pauseBtn)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2. 中括号获取dom对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> playBtn = $btn[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;playBtn:&#x27;</span>, playBtn)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3. 播放视频</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.play&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          </span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">//方式1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">         $(<span class=\"string\">&#x27;video&#x27;</span>).<span class=\"title function_\">trigger</span>(<span class=\"string\">&#x27;play&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">          </span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">//方式1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> video = $(<span class=\"string\">&#x27;video&#x27;</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;video:&#x27;</span>, video)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        video.<span class=\"title function_\">play</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 4. 暂停视频</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.pause&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          </span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">//方式1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">         $(<span class=\"string\">&#x27;video&#x27;</span>).<span class=\"title function_\">trigger</span>(<span class=\"string\">&#x27;pause&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">          </span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">//方式2</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> video = $(<span class=\"string\">&#x27;video&#x27;</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;video:&#x27;</span>, video)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        video.<span class=\"title function_\">pause</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 5. 重置表单</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      $(<span class=\"string\">&#x27;.reset&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//方式1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">         $(<span class=\"string\">&#x27;form&#x27;</span>).<span class=\"title function_\">trigger</span>(<span class=\"string\">&#x27;reset&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">          </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">//方式2</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> form = $(<span class=\"string\">&#x27;form&#x27;</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;form:&#x27;</span>, form)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        form.<span class=\"title function_\">reset</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>可以使用 [] 还有一个什么方法来获取dom对象？</p>\n<p>get方法</p>\n</li>\n<li><p>索引从几开始?</p>\n<p>从0开始</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"10-表单-序列化-快速获取form表单元素的value值\"><a href=\"#10-表单-序列化-快速获取form表单元素的value值\" class=\"headerlink\" title=\"10.表单 - 序列化(快速获取form表单元素的value值)\"></a>10.表单 - 序列化(快速获取form表单元素的value值)</h2><p>方法的名字叫做<strong>serialize</strong>，首先获取到form标签，然后就可以调用啦，他是一个jQ的方法，为了能够正常获取数据需要为表单元素设置name属性，否则可是拿不到的哦。</p>\n<p>​\t\t获取到的是一个字符串，格式很有规律 name1&#x3D;value1&amp;name2&#x3D;value2</p>\n<p>基础语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  $(<span class=\"string\">&#x27;form&#x27;</span>).<span class=\"title function_\">submit</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"comment\">//基础用法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> data = $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">serialize</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;data:&#x27;</span>, data)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>serialize方法要能够获取到value值，表单元素要有什么属性?</p>\n<p>name属性</p>\n</li>\n<li><p>获取到的数据是什么格式?(对象，字符串)</p>\n<p>字符串，key&#x3D;value&amp;key2&#x3D;value的格式，目前掌握语法即可，在之后的课程中会用到这个方法呢</p>\n</li>\n</ol>\n<h2 id=\"11-工具方法\"><a href=\"#11-工具方法\" class=\"headerlink\" title=\"11.工具方法\"></a>11.工具方法</h2><p>$.each遍历数组，第一个参数传入数组，然后传入回调函数，数组有几项回调函数就会执行几次，每次遍历的时候会把数组的内容传递给回调函数，回调函数的第一个参数是数组的每一项，第二个参数是下标，我们就可以在回调函数里面获取并使用这些数据啦。</p>\n<p>​\t\t还可以通过$.map来基于现有数组生成新的数组，用法和each类似，但是在回调函数里面可以返回一个值，每次执行返回的结果最终会被放到一个新增数组中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历数组</span></span><br><span class=\"line\">$.<span class=\"title function_\">each</span>(数组, <span class=\"keyword\">function</span> (<span class=\"params\">item, index</span>) &#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 遍历并返回新数组</span></span><br><span class=\"line\">$.<span class=\"title function_\">map</span>(数组,<span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回新的值</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>了解即可。</p>\n","categories":[],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"http://example.com/tags/jQuery/"}]},{"title":"Vue.js","date":"2024-06-30T02:25:55.000Z","path":"2024/06/30/Vue-js/","content":"<h1 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法<a href=\"https://cn.vuejs.org/guide/essentials/template-syntax.html#template-syntax\"></a></h1><p>Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。</p>\n<p>在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。结合响应式系统，当应用状态变更时，Vue 能够智能地推导出需要重新渲染的组件的最少数量，并应用最少的 DOM 操作。</p>\n<p>如果你对虚拟 DOM 的概念比较熟悉，并且偏好直接使用 JavaScript，你也可以结合可选的 JSX 支持<a href=\"https://cn.vuejs.org/guide/extras/render-function.html\">直接手写渲染函数</a>而不采用模板。但请注意，这将不会享受到和模板同等级别的编译时优化。</p>\n<h2 id=\"文本插值\"><a href=\"#文本插值\" class=\"headerlink\" title=\"文本插值\"></a>文本插值<a href=\"https://cn.vuejs.org/guide/essentials/template-syntax.html#text-interpolation\"></a></h2><p>最基本的数据绑定形式是文本插值，它使用的是“Mustache”语法 (即双大括号)：</p>\n<p>template</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span&gt;Message: &#123;&#123; msg &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n\n<p>双大括号标签会被替换为<a href=\"https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#declaring-reactive-state\">相应组件实例中</a> <code>msg</code> 属性的值。同时每次 <code>msg</code> 属性更改时它也会同步更新。</p>\n<h2 id=\"原始-HTML\"><a href=\"#原始-HTML\" class=\"headerlink\" title=\"原始 HTML\"></a>原始 HTML<a href=\"https://cn.vuejs.org/guide/essentials/template-syntax.html#raw-html\"></a></h2><p>双大括号会将数据解释为纯文本，而不是 HTML。若想插入 HTML，你需要使用 <a href=\"https://cn.vuejs.org/api/built-in-directives.html#v-html\"><code>v-html</code> 指令</a>：</p>\n<p>Using text interpolation: </p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;Using text interpolation: &#123;&#123; rawHtml &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;Using v-html directive: &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//而使用vue中的&#123;&#123;&#125;&#125;不会渲染html，所以会显示纯文本</span><br><span class=\"line\">Using text interpolation: &lt;span style=&quot;color: red&quot;&gt;This should be red.&lt;/span&gt;</span><br><span class=\"line\">使用v-html会解析span标签，所以下面的会被渲染成红色</span><br><span class=\"line\">Using v-html directive: This should be red.</span><br></pre></td></tr></table></figure>\n\n<p>这里我们遇到了一个新的概念。这里看到的 <code>v-html</code> attribute 被称为一个<strong>指令</strong>。指令由 <code>v-</code> 作为前缀，表明它们是一些由 Vue 提供的特殊 attribute，你可能已经猜到了，它们将为渲染的 DOM 应用特殊的响应式行为。这里我们做的事情简单来说就是：在当前组件实例上，将此元素的 innerHTML 与 <code>rawHtml</code> 属性保持同步。</p>\n<p><code>span</code> 的内容将会被替换为 <code>rawHtml</code> 属性的值，插值为纯 HTML——数据绑定将会被忽略。注意，你不能使用 <code>v-html</code> 来拼接组合模板，因为 Vue 不是一个基于字符串的模板引擎。在使用 Vue 时，应当使用组件作为 UI 重用和组合的基本单元。</p>\n<h2 id=\"Attribute-绑定\"><a href=\"#Attribute-绑定\" class=\"headerlink\" title=\"Attribute 绑定\"></a>Attribute 绑定<a href=\"https://cn.vuejs.org/guide/essentials/template-syntax.html#attribute-bindings\"></a></h2><p>双大括号不能在 HTML attributes 中使用。想要响应式地绑定一个 attribute，应该使用 <a href=\"https://cn.vuejs.org/api/built-in-directives.html#v-bind\"><code>v-bind</code> 指令</a>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>v-bind</code> 指令指示 Vue 将元素的 <code>id</code> attribute 与组件的 <code>dynamicId</code> 属性保持一致。如果绑定的值是 <code>null</code> 或者 <code>undefined</code>，那么该 attribute 将会从渲染的元素上移除。</p>\n<h3 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写<a href=\"https://cn.vuejs.org/guide/essentials/template-syntax.html#shorthand\"></a></h3><p>因为 <code>v-bind</code> 非常常用，我们提供了特定的简写语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div :id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>开头为 <code>:</code> 的 attribute 可能和一般的 HTML attribute 看起来不太一样，但它的确是合法的 attribute 名称字符，并且所有支持 Vue 的浏览器都能正确解析它。此外，他们不会出现在最终渲染的 DOM 中。简写语法是可选的，但相信在你了解了它更多的用处后，你应该会更喜欢它。</p>\n<h3 id=\"同名简写-要求vue版本为3-4\"><a href=\"#同名简写-要求vue版本为3-4\" class=\"headerlink\" title=\"同名简写 (要求vue版本为3.4+)\"></a>同名简写 <a href=\"https://cn.vuejs.org/guide/essentials/template-syntax.html#same-name-shorthand\"></a>(要求vue版本为3.4+)</h3><p>如果 attribute 的名称与绑定的 JavaScript 值的名称相同，那么可以进一步简化语法，省略 attribute 值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 与 :id=&quot;id&quot; 相同 --&gt;</span><br><span class=\"line\">&lt;div :id&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 这也同样有效 --&gt;</span><br><span class=\"line\">&lt;div v-bind:id&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这与在 JavaScript 中声明对象时使用的属性简写语法类似。请注意，这是一个只在 <strong>Vue 3.4</strong> 及以上版本中可用的特性。</p>\n<h3 id=\"布尔型-Attribute\"><a href=\"#布尔型-Attribute\" class=\"headerlink\" title=\"布尔型 Attribute\"></a>布尔型 Attribute<a href=\"https://cn.vuejs.org/guide/essentials/template-syntax.html#boolean-attributes\"></a></h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes#%E5%B8%83%E5%B0%94%E5%80%BC%E5%B1%9E%E6%80%A7\">布尔型 attribute</a> 依据 true &#x2F; false 值来决定 attribute 是否应该存在于该元素上。<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled\"><code>disabled</code></a> 就是最常见的例子之一。</p>\n<p><code>v-bind</code> 在这种场景下的行为略有不同：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button :disabled=&quot;isButtonDisabled&quot;&gt;Button&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当 <code>isButtonDisabled</code> 为<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\">真值</a>或一个空字符串 (即 <code>&lt;button disabled=&quot;&quot;&gt;</code>) 时，元素会包含这个 <code>disabled</code> attribute。而当其为其他<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">假值</a>时 attribute 将被忽略。</p>\n<h3 id=\"动态绑定多个值\"><a href=\"#动态绑定多个值\" class=\"headerlink\" title=\"动态绑定多个值\"></a>动态绑定多个值<a href=\"https://cn.vuejs.org/guide/essentials/template-syntax.html#dynamically-binding-multiple-attributes\"></a></h3><p>如果你有像这样的一个包含多个 attribute 的 JavaScript 对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> objectOfAttrs = &#123;  <span class=\"attr\">id</span>: <span class=\"string\">&#x27;container&#x27;</span>,  <span class=\"attr\">class</span>: <span class=\"string\">&#x27;wrapper&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过不带参数的 <code>v-bind</code>，你可以将它们绑定到单个元素上：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind=&quot;objectOfAttrs&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-JavaScript-表达式\"><a href=\"#使用-JavaScript-表达式\" class=\"headerlink\" title=\"使用 JavaScript 表达式\"></a>使用 JavaScript 表达式<a href=\"https://cn.vuejs.org/guide/essentials/template-syntax.html#using-javascript-expressions\"></a></h2><p>至此，我们仅在模板中绑定了一些简单的属性名。但是 Vue 实际上在所有的数据绑定中都支持完整的 JavaScript 表达式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; number + 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div :id=&quot;`list-$&#123;id&#125;`&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这些表达式都会被作为 JavaScript ，以当前组件实例为作用域解析执行。</p>\n<p>在 Vue 模板内，JavaScript 表达式可以被使用在如下场景上：</p>\n<ul>\n<li>在文本插值中 (双大括号)</li>\n<li>在任何 Vue 指令 (以 <code>v-</code> 开头的特殊 attribute) attribute 的值中</li>\n</ul>\n<h3 id=\"仅支持表达式\"><a href=\"#仅支持表达式\" class=\"headerlink\" title=\"仅支持表达式\"></a>仅支持表达式<a href=\"https://cn.vuejs.org/guide/essentials/template-syntax.html#expressions-only\"></a></h3><p>每个绑定仅支持<strong>单一表达式</strong>，也就是一段能够被求值的 JavaScript 代码。一个简单的判断方法是是否可以合法地写在 <code>return</code> 后面。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 这是一个语句，而非表达式 --&gt;</span><br><span class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 条件控制也不支持，请使用三元表达式 --&gt;</span><br><span class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调用函数\"><a href=\"#调用函数\" class=\"headerlink\" title=\"调用函数\"></a>调用函数<a href=\"https://cn.vuejs.org/guide/essentials/template-syntax.html#calling-functions\"></a></h3><p>可以在绑定的表达式中使用一个组件暴露的方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;time :title=&quot;toTitleDate(date)&quot; :datetime=&quot;date&quot;&gt;</span><br><span class=\"line\">  &#123;&#123; formatDate(date) &#125;&#125;</span><br><span class=\"line\">&lt;/time&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"指令-Directives\"><a href=\"#指令-Directives\" class=\"headerlink\" title=\"指令 Directives\"></a>指令 Directives<a href=\"https://cn.vuejs.org/guide/essentials/template-syntax.html#directives\"></a></h2><p>指令是带有 <code>v-</code> 前缀的特殊 attribute。Vue 提供了许多<a href=\"https://cn.vuejs.org/api/built-in-directives.html\">内置指令</a>，包括上面我们所介绍的 <code>v-bind</code> 和 <code>v-html</code>。</p>\n<p>指令 attribute 的期望值为一个 JavaScript 表达式 (除了少数几个例外，即之后要讨论到的 <code>v-for</code>、<code>v-on</code> 和 <code>v-slot</code>)。一个指令的任务是在其表达式的值变化时响应式地更新 DOM。以 <a href=\"https://cn.vuejs.org/api/built-in-directives.html#v-if\"><code>v-if</code></a> 为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-if=&quot;seen&quot;&gt;Now you see me&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这里，<code>v-if</code> 指令会基于表达式 <code>seen</code> 的值的真假来移除&#x2F;插入该 <code>&lt;p&gt;</code> 元素。</p>\n<h3 id=\"参数-Arguments\"><a href=\"#参数-Arguments\" class=\"headerlink\" title=\"参数 Arguments\"></a>参数 Arguments<a href=\"https://cn.vuejs.org/guide/essentials/template-syntax.html#arguments\"></a></h3><p>某些指令会需要一个“参数”，在指令名后通过一个冒号隔开做标识。例如用 <code>v-bind</code> 指令来响应式地更新一个 HTML attribute：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-bind:href=&quot;url&quot;&gt; ... &lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 简写 --&gt;</span><br><span class=\"line\">&lt;a :href=&quot;url&quot;&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这里 <code>href</code> 就是一个参数，它告诉 <code>v-bind</code> 指令将表达式 <code>url</code> 的值绑定到元素的 <code>href</code> attribute 上。在简写中，参数前的一切 (例如 <code>v-bind:</code>) 都会被缩略为一个 <code>:</code> 字符。</p>\n<p>另一个例子是 <code>v-on</code> 指令，它将监听 DOM 事件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-on:click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 简写 --&gt;</span><br><span class=\"line\">&lt;a @click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这里的参数是要监听的事件名称：<code>click</code>。<code>v-on</code> 有一个相应的缩写，即 <code>@</code> 字符。我们之后也会讨论关于事件处理的更多细节。</p>\n<h3 id=\"动态参数\"><a href=\"#动态参数\" class=\"headerlink\" title=\"动态参数\"></a>动态参数<a href=\"https://cn.vuejs.org/guide/essentials/template-syntax.html#dynamic-arguments\"></a></h3><p>同样在指令参数上也可以使用一个 JavaScript 表达式，需要包含在一对方括号内：</p>\n<p>template</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--</span><br><span class=\"line\">注意，参数表达式有一些约束，</span><br><span class=\"line\">参见下面“动态参数值的限制”与“动态参数语法的限制”章节的解释</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;a v-bind:[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 简写 --&gt;</span><br><span class=\"line\">&lt;a :[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这里的 <code>attributeName</code> 会作为一个 JavaScript 表达式被动态执行，计算得到的值会被用作最终的参数。举例来说，如果你的组件实例有一个数据属性 <code>attributeName</code>，其值为 <code>&quot;href&quot;</code>，那么这个绑定就等价于 <code>v-bind:href</code>。</p>\n<p>相似地，你还可以将一个函数绑定到动态的事件名称上：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-on:[eventName]=&quot;doSomething&quot;&gt; ... &lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 简写 --&gt;</span><br><span class=\"line\">&lt;a @[eventName]=&quot;doSomething&quot;&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在此示例中，当 <code>eventName</code> 的值是 <code>&quot;focus&quot;</code> 时，<code>v-on:[eventName]</code> 就等价于 <code>v-on:focus</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-on:[eventName]=&quot;doSomething&quot;&gt; ... &lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 简写 --&gt;</span><br><span class=\"line\">&lt;a @[eventName]=&quot;doSomething&quot;&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在此示例中，当 <code>eventName</code> 的值是 <code>&quot;focus&quot;</code> 时，<code>v-on:[eventName]</code> 就等价于 <code>v-on:focus</code>。</p>\n<h4 id=\"动态参数值的限制\"><a href=\"#动态参数值的限制\" class=\"headerlink\" title=\"动态参数值的限制\"></a>动态参数值的限制<a href=\"https://cn.vuejs.org/guide/essentials/template-syntax.html#dynamic-argument-value-constraints\"></a></h4><p>动态参数中表达式的值应当是一个字符串，或者是 <code>null</code>。特殊值 <code>null</code> 意为显式移除该绑定。其他非字符串的值会触发警告。</p>\n<h4 id=\"动态参数语法的限制\"><a href=\"#动态参数语法的限制\" class=\"headerlink\" title=\"动态参数语法的限制\"></a>动态参数语法的限制<a href=\"https://cn.vuejs.org/guide/essentials/template-syntax.html#dynamic-argument-syntax-constraints\"></a></h4><p>动态参数表达式因为某些字符的缘故有一些语法限制，比如空格和引号，在 HTML attribute 名称中都是不合法的。例如下面的示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 这会触发一个编译器警告 --&gt;</span><br><span class=\"line\">&lt;a :[&#x27;foo&#x27; + bar]=&quot;value&quot;&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果你需要传入一个复杂的动态参数，我们推荐使用<a href=\"https://cn.vuejs.org/guide/essentials/computed.html\">计算属性</a>替换复杂的表达式，也是 Vue 最基础的概念之一，我们很快就会讲到。</p>\n<p>当使用 DOM 内嵌模板 (直接写在 HTML 文件里的模板) 时，我们需要避免在名称中使用大写字母，因为浏览器会强制将其转换为小写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a :[someAttr]=&quot;value&quot;&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子将会在 DOM 内嵌模板中被转换为 <code>:[someattr]</code>。如果你的组件拥有 “someAttr” 属性而非 “someattr”，这段代码将不会工作。单文件组件内的模板<strong>不</strong>受此限制。</p>\n<h3 id=\"修饰符-Modifiers\"><a href=\"#修饰符-Modifiers\" class=\"headerlink\" title=\"修饰符 Modifiers\"></a>修饰符 Modifiers<a href=\"https://cn.vuejs.org/guide/essentials/template-syntax.html#modifiers\"></a></h3><p>修饰符是以点开头的特殊后缀，表明指令需要以一些特殊的方式被绑定。例如 <code>.prevent</code> 修饰符会告知 <code>v-on</code> 指令对触发的事件调用 <code>event.preventDefault()</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form @submit.prevent=&quot;onSubmit&quot;&gt;...&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n\n<p>之后在讲到 <a href=\"https://cn.vuejs.org/guide/essentials/event-handling.html#event-modifiers\"><code>v-on</code></a> 和 <a href=\"https://cn.vuejs.org/guide/essentials/forms.html#modifiers\"><code>v-model</code></a> 的功能时，你将会看到其他修饰符的例子。</p>\n<p>最后，在这里你可以直观地看到完整的指令语法：</p>\n<p><img src=\"/2024/06/30/Vue-js/directive.DtZKvoAo.png\" alt=\"指令语法图\"></p>\n<h1 id=\"响应式基础\"><a href=\"#响应式基础\" class=\"headerlink\" title=\"响应式基础\"></a>响应式基础</h1><h2 id=\"声明响应式状态\"><a href=\"#声明响应式状态\" class=\"headerlink\" title=\"声明响应式状态\"></a>声明响应式状态<a href=\"https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#declaring-reactive-state\"></a></h2><p>选用选项式 API 时，会用 <code>data</code> 选项来声明组件的响应式状态。此选项的值应为返回一个对象的函数。Vue 将在创建新组件实例的时候调用此函数，并将函数返回的对象用响应式系统进行包装。此对象的所有顶层属性都会被代理到组件实例 (即方法和生命周期钩子中的 <code>this</code>) 上。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      count: 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  // `mounted` is a lifecycle hook which we will explain later</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    // `this` refers to the component instance.</span><br><span class=\"line\">    console.log(this.count) // =&gt; 1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  Count is: &#123;&#123; &#x27;这是容器中count的值：&#x27;+count &#125;&#125;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这些实例上的属性仅在实例首次创建时被添加，因此你需要确保它们都出现在 <code>data</code> 函数返回的对象上。若所需的值还未准备好，在必要时也可以使用 <code>null</code>、<code>undefined</code> 或者其他一些值占位。</p>\n<p>虽然也可以不在 <code>data</code> 上定义，直接向组件实例添加新属性，但这个属性将无法触发响应式更新。</p>\n<p>Vue 在组件实例上暴露的内置 API 使用 <code>$</code> 作为前缀。它同时也为内部属性保留 <code>_</code> 前缀。因此，你应该避免在顶层 <code>data</code> 上使用任何以这些字符作前缀的属性。</p>\n<h3 id=\"响应式代理-vs-原始值\"><a href=\"#响应式代理-vs-原始值\" class=\"headerlink\" title=\"响应式代理 vs. 原始值\"></a>响应式代理 vs. 原始值<a href=\"https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#reactive-proxy-vs-original\"></a></h3><p>在 Vue 3 中，数据是基于 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">JavaScript Proxy (代理)</a> 实现响应式的。使用过 Vue 2 的用户可能需要注意下面这样的边界情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">someObject</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newObject = &#123;&#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">someObject</span> = newObject</span><br><span class=\"line\">\t<span class=\"comment\">//如果写成this.newObject === this.someObject //那么这个结果就是true</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newObject === <span class=\"variable language_\">this</span>.<span class=\"property\">someObject</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当你在赋值后再访问 <code>this.someObject</code>，此值已经是原来的 <code>newObject</code> 的一个响应式代理。<strong>与 Vue 2 不同的是，这里原始的 <code>newObject</code> 不会变为响应式：请确保始终通过 <code>this</code> 来访问响应式状态。</strong></p>\n<h2 id=\"声明方法\"><a href=\"#声明方法\" class=\"headerlink\" title=\"声明方法\"></a>声明方法<a href=\"https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#declaring-methods\"></a></h2><p>要为组件添加方法，我们需要用到 <code>methods</code> 选项。它应该是一个包含所有方法的对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">increment</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">count</span>++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在其他方法或是生命周期中也可以调用方法</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">increment</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Vue 自动为 <code>methods</code> 中的方法绑定了永远指向组件实例的 <code>this</code>。这确保了方法在作为事件监听器或回调函数时始终保持正确的 <code>this</code>。你不应该在定义 <code>methods</code> 时使用箭头函数，因为箭头函数没有自己的 <code>this</code> 上下文。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">increment</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 反例：无法访问此处的 `this`!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>和组件实例上的其他属性一样，方法也可以在模板上被访问。在模板中它们常常被用作事件监听器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button @click=&quot;increment&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的例子中，<code>increment</code> 方法会在 <code>&lt;button&gt;</code> 被点击时调用。</p>\n<h3 id=\"深层响应性\"><a href=\"#深层响应性\" class=\"headerlink\" title=\"深层响应性\"></a>深层响应性<a href=\"https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#deep-reactivity\"></a></h3><p>在 Vue 中，默认情况下，状态是深度响应的。这意味着当改变嵌套对象或数组时，这些变化也会被检测到：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">obj</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">nested</span>: &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">        <span class=\"attr\">arr</span>: [<span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">mutateDeeply</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 以下都会按照期望工作</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">obj</span>.<span class=\"property\">nested</span>.<span class=\"property\">count</span>++</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">obj</span>.<span class=\"property\">arr</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;baz&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DOM-更新时机\"><a href=\"#DOM-更新时机\" class=\"headerlink\" title=\"DOM 更新时机\"></a>DOM 更新时机<a href=\"https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#dom-update-timing\"></a></h3><p>当你修改了响应式状态时，DOM 会被自动更新。但是需要注意的是，DOM 更新不是同步的。Vue 会在“next tick”更新周期中缓冲所有状态的修改，以确保不管你进行了多少次状态修改，每个组件都只会被更新一次。</p>\n<p>要等待 DOM 更新完成后再执行额外的代码，可以使用 <a href=\"https://cn.vuejs.org/api/general.html#nexttick\">nextTick()</a> 全局 API：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; nextTick &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">increment</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">count</span>++</span><br><span class=\"line\">      <span class=\"keyword\">await</span> <span class=\"title function_\">nextTick</span>()</span><br><span class=\"line\">      <span class=\"comment\">// 现在 DOM 已经更新了</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"有状态方法\"><a href=\"#有状态方法\" class=\"headerlink\" title=\"有状态方法\"></a>有状态方法<a href=\"https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#stateful-methods\"></a></h3><p>在某些情况下，我们可能需要动态地创建一个方法函数，比如创建一个预置防抖的事件处理器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; debounce &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;lodash-es&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 Lodash 的防抖函数</span></span><br><span class=\"line\">    <span class=\"attr\">click</span>: <span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ... 对点击的响应 ...</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不过这种方法对于被重用的组件来说是有问题的，因为这个预置防抖的函数是<strong>有状态的</strong>：它在运行时维护着一个内部状态。如果多个组件实例都共享这同一个预置防抖的函数，那么它们之间将会互相影响。</p>\n<p>要保持每个组件实例的防抖函数都彼此独立，我们可以改为在 <code>created</code> 生命周期钩子中创建这个预置防抖的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">created</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每个实例都有了自己的预置防抖的处理函数</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">debouncedClick</span> = _.<span class=\"title function_\">debounce</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">click</span>, <span class=\"number\">500</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">unmounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 最好是在组件卸载时</span></span><br><span class=\"line\">    <span class=\"comment\">// 清除掉防抖计时器</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">debouncedClick</span>.<span class=\"title function_\">cancel</span>()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">click</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ... 对点击的响应 ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性<a href=\"https://cn.vuejs.org/guide/essentials/computed.html#computed-properties\"></a></h1><h2 id=\"基础示例\"><a href=\"#基础示例\" class=\"headerlink\" title=\"基础示例\"></a>基础示例<a href=\"https://cn.vuejs.org/guide/essentials/computed.html#basic-example\"></a></h2><p>模板中的表达式虽然方便，但也只能用来做简单的操作。如果在模板中写太多逻辑，会让模板变得臃肿，难以维护。比如说，我们有这样一个包含嵌套数组的对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">author</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">books</span>: [</span><br><span class=\"line\">          <span class=\"string\">&#x27;Vue 2 - Advanced Guide&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;Vue 3 - Basic Guide&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;Vue 4 - The Mystery&#x27;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们想根据 <code>author</code> 是否已有一些书籍来展示不同的信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;Has published books:&lt;/p&gt;</span><br><span class=\"line\">&lt;span&gt;&#123;&#123; author.books.length &gt; 0 ? &#x27;Yes&#x27; : &#x27;No&#x27; &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这里的模板看起来有些复杂。我们必须认真看好一会儿才能明白它的计算依赖于 <code>author.books</code>。更重要的是，如果在模板中需要不止一次这样的计算，我们可不想将这样的代码在模板里重复好多遍。</p>\n<p>因此我们推荐使用<strong>计算属性</strong>来描述依赖响应式状态的复杂逻辑。这是重构后的示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">author</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">books</span>: [</span><br><span class=\"line\">          <span class=\"string\">&#x27;Vue 2 - Advanced Guide&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;Vue 3 - Basic Guide&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;Vue 4 - The Mystery&#x27;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一个计算属性的 getter</span></span><br><span class=\"line\">    <span class=\"title function_\">publishedBooksMessage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// `this` 指向当前组件实例</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">author</span>.<span class=\"property\">books</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span> ? <span class=\"string\">&#x27;Yes&#x27;</span> : <span class=\"string\">&#x27;No&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;Has published books:&lt;/p&gt;</span><br><span class=\"line\">&lt;!--我们的计算属性publishedBooksMessage()返回了臃肿的表达式，而我们在使用时直接使用计算属性的名称即可--&gt;</span><br><span class=\"line\">&lt;span&gt;&#123;&#123; publishedBooksMessage &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n\n<p>我们在这里定义了一个计算属性 <code>publishedBooksMessage</code>。</p>\n<p>更改此应用的 <code>data</code> 中 <code>books</code> 数组的值后，可以看到 <code>publishedBooksMessage</code> 也会随之改变。</p>\n<p>在模板中使用计算属性的方式和一般的属性并无二致。Vue 会检测到 <code>this.publishedBooksMessage</code> 依赖于 <code>this.author.books</code>，所以当 <code>this.author.books</code> 改变时，任何依赖于 <code>this.publishedBooksMessage</code> 的绑定都将同时更新。</p>\n<h2 id=\"计算属性缓存-vs-方法\"><a href=\"#计算属性缓存-vs-方法\" class=\"headerlink\" title=\"计算属性缓存 vs 方法\"></a>计算属性缓存 vs 方法<a href=\"https://cn.vuejs.org/guide/essentials/computed.html#computed-caching-vs-methods\"></a></h2><p>你可能注意到我们在表达式中像这样调用一个函数也会获得和计算属性相同的结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&#123;&#123; calculateBooksMessage() &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组件中</span></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">calculateBooksMessage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">author</span>.<span class=\"property\">books</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span> ? <span class=\"string\">&#x27;Yes&#x27;</span> : <span class=\"string\">&#x27;No&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若我们将同样的函数定义为一个方法而不是计算属性，两种方式在结果上确实是完全相同的，然而，不同之处在于<strong>计算属性值会基于其响应式依赖被缓存</strong>。一个计算属性仅会在其响应式依赖更新时才重新计算。这意味着只要 <code>author.books</code> 不改变，无论多少次访问 <code>publishedBooksMessage</code> 都会立即返回先前的计算结果，而不用重复执行 getter 函数。</p>\n<p>这也解释了为什么下面的计算属性永远不会更新，因为 <code>Date.now()</code> 并不是一个响应式依赖：</p>\n<p>js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">now</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相比之下，方法调用<strong>总是</strong>会在重渲染发生时再次执行函数。</p>\n<p>为什么需要缓存呢？想象一下我们有一个非常耗性能的计算属性 <code>list</code>，需要循环一个巨大的数组并做许多计算逻辑，并且可能也有其他计算属性依赖于 <code>list</code>。没有缓存的话，我们会重复执行非常多次 <code>list</code> 的 getter，然而这实际上没有必要！如果你确定不需要缓存，那么也可以使用方法调用。</p>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践<a href=\"https://cn.vuejs.org/guide/essentials/computed.html#best-practices\"></a></h2><h3 id=\"Getter-不应有副作用\"><a href=\"#Getter-不应有副作用\" class=\"headerlink\" title=\"Getter 不应有副作用\"></a>Getter 不应有副作用<a href=\"https://cn.vuejs.org/guide/essentials/computed.html#getters-should-be-side-effect-free\"></a></h3><p>计算属性的 getter 应只做计算而没有任何其他的副作用，这一点非常重要，请务必牢记。举例来说，<strong>不要改变其他状态、在 getter 中做异步请求或者更改 DOM</strong>！一个计算属性的声明中描述的是如何根据其他值派生一个值。因此 getter 的职责应该仅为计算和返回该值。在之后的指引中我们会讨论如何使用<a href=\"https://cn.vuejs.org/guide/essentials/watchers.html\">侦听器</a>根据其他响应式状态的变更来创建副作用。</p>\n<h3 id=\"避免直接修改计算属性值\"><a href=\"#避免直接修改计算属性值\" class=\"headerlink\" title=\"避免直接修改计算属性值\"></a>避免直接修改计算属性值<a href=\"https://cn.vuejs.org/guide/essentials/computed.html#avoid-mutating-computed-value\"></a></h3><p>从计算属性返回的值是派生状态。可以把它看作是一个“临时快照”，每当源状态发生变化时，就会创建一个新的快照。更改快照是没有意义的，因此计算属性的返回值应该被视为只读的，并且永远不应该被更改——应该更新它所依赖的源状态以触发新的计算。</p>\n<h1 id=\"Class-与-Style-绑定\"><a href=\"#Class-与-Style-绑定\" class=\"headerlink\" title=\"Class 与 Style 绑定\"></a>Class 与 Style 绑定<a href=\"https://cn.vuejs.org/guide/essentials/class-and-style.html#class-and-style-bindings\"></a></h1><p>数据绑定的一个常见需求场景是操纵元素的 CSS class 列表和内联样式。因为 <code>class</code> 和 <code>style</code> 都是 attribute，我们可以和其他 attribute 一样使用 <code>v-bind</code> 将它们和动态的字符串绑定。但是，在处理比较复杂的绑定时，通过拼接生成字符串是麻烦且易出错的。因此，Vue 专门为 <code>class</code> 和 <code>style</code> 的 <code>v-bind</code> 用法提供了特殊的功能增强。除了字符串外，表达式的值也可以是对象或数组。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">    isActive: true,</span><br><span class=\"line\">    hasError: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;!-- 当容器中的isActive属性为true时，那么渲染时,就会是这样 &lt;div class=&quot;active&quot;&gt;data&lt;/div&gt; --&gt;</span><br><span class=\"line\">&lt;div :class=&quot;&#123; active: isActive &#125;&quot;&gt;data&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 当容器中的isActive属性为true,hasError属性为true时，那么渲染时,就会是这样 &lt;div class=&quot;static active text-danger&quot;&gt;data&lt;/div&gt; --&gt;</span><br><span class=\"line\">&lt;div</span><br><span class=\"line\">  class=&quot;static&quot;</span><br><span class=\"line\">  :class=&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span><br><span class=\"line\">&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当 <code>isActive</code> 或者 <code>hasError</code> 改变时，class 列表会随之更新。举例来说，如果 <code>hasError</code> 变为 <code>true</code>，class 列表也会变成 <code>&quot;static active text-danger&quot;</code>。</p>\n<p>绑定的对象并不一定需要写成内联字面量的形式，也可以直接绑定一个对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">classObject</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">active</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;text-danger&#x27;</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div :class=&quot;classObject&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这将渲染：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;active&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>我们也可以绑定一个返回对象的<a href=\"https://cn.vuejs.org/guide/essentials/computed.html\">计算属性</a>。这是一个常见且很有用的技巧：</p>\n<p>js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">isActive</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">error</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">classObject</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">active</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">isActive</span> &amp;&amp; !<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;text-danger&#x27;</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">error</span>.<span class=\"property\">type</span> === <span class=\"string\">&#x27;fatal&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div :class=&quot;classObject&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绑定数组\"><a href=\"#绑定数组\" class=\"headerlink\" title=\"绑定数组\"></a>绑定数组<a href=\"https://cn.vuejs.org/guide/essentials/class-and-style.html#binding-to-arrays\"></a></h3><p>我们可以给 <code>:class</code> 绑定一个数组来渲染多个 CSS class：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">activeClass</span>: <span class=\"string\">&#x27;active&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">errorClass</span>: <span class=\"string\">&#x27;text-danger&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div :class=&quot;[activeClass, errorClass]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>渲染的结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;active text-danger&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果你也想在数组中有条件地渲染某个 class，你可以使用三元表达式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div :class=&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>errorClass</code> 会一直存在，但 <code>activeClass</code> 只会在 <code>isActive</code> 为真时才存在。</p>\n<p>然而，这可能在有多个依赖条件的 class 时会有些冗长。因此也可以在数组中嵌套对象：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div :class=&quot;[&#123; activeClass: isActive &#125;, errorClass]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在组件上使用\"><a href=\"#在组件上使用\" class=\"headerlink\" title=\"在组件上使用\"></a>在组件上使用</h3><p>对于只有一个根元素的组件，当你使用了 <code>class</code> attribute 时，这些 class 会被添加到根元素上并与该元素上已有的 class 合并。</p>\n<p>举例来说，如果你声明了一个组件名叫 <code>MyComponent</code>，模板如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 子组件模板 --&gt;</span><br><span class=\"line\">&lt;p class=&quot;foo bar&quot;&gt;Hi!&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":[],"tags":[{"name":"vue.js","slug":"vue-js","permalink":"http://example.com/tags/vue-js/"}]},{"title":"大前端进阶集合","date":"2024-06-22T04:42:21.000Z","path":"2024/06/22/大前端进阶集合/","content":"","categories":[],"tags":[]},{"title":"SpringMVC学习","date":"2024-06-17T10:33:15.000Z","path":"2024/06/17/SpringMVC学习/","content":"<p>SSM：MyBaits+spring+SpringMVC 这是MVC的三层框架。</p>\n<h1 id=\"什么是MVC？\"><a href=\"#什么是MVC？\" class=\"headerlink\" title=\"什么是MVC？\"></a>什么是MVC？</h1><ul>\n<li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li>\n<li>是将业务逻辑、数据、显示分离的方法来组织代码。</li>\n<li>MVC主要作用是降低了视图与业务逻辑间的双向偶合。</li>\n<li>MVC不是一种设计模式，MVC是一种架构模式。当然不同的MVC存在差异。</li>\n</ul>\n<p>**Model(模型):**数据模型，提供要展示的数，因此包含数据和行为，可以认为是领域模型或JavaBean组件(包含数据和行为)，不过现在一般都分离开来:Value Object(数据Dao)和 服务层(行为Service)。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务<br>**View(视图):**负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。<br>**Controler(控制器):**接收用户请求，委托给模型进行处理(状态改变)，处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。最典型的MVC就是JSP +servlet+javabean的模式:</p>\n<p><img src=\"/2024/06/17/SpringMVC%E5%AD%A6%E4%B9%A0/image-20240617184601405.png\" alt=\"image-20240617184601405\"></p>\n<p><img src=\"/2024/06/17/SpringMVC%E5%AD%A6%E4%B9%A0/image-20240617185243898.png\" alt=\"image-20240617185243898\"></p>\n<h1 id=\"回顾Servlet\"><a href=\"#回顾Servlet\" class=\"headerlink\" title=\"回顾Servlet\"></a>回顾Servlet</h1>","categories":[],"tags":[]},{"title":"CI/CD技术","date":"2024-06-10T08:54:36.000Z","path":"2024/06/10/CI-CD技术/","content":"","categories":[],"tags":[]},{"title":"K8S技术","date":"2024-06-10T08:54:27.000Z","path":"2024/06/10/K8S技术/","content":"","categories":[],"tags":[]},{"title":"Nginx网关","date":"2024-06-10T08:54:18.000Z","path":"2024/06/10/Nginx网关/","content":"<h1 id=\"1-Nginx安装目录-对于源码安装\"><a href=\"#1-Nginx安装目录-对于源码安装\" class=\"headerlink\" title=\"1. Nginx安装目录(对于源码安装):\"></a>1. Nginx安装目录(对于源码安装):</h1><ul>\n<li>当使用源代码编译安装 Nginx 时，整个 Nginx 的安装树可能位于此目录下。这包括可执行文件、配置文件、文档和模块文件等。</li>\n<li>内部可能包含以下子目录：<ul>\n<li><strong>client_body_temp</strong>: 用于存储上传的大文件的临时目录。</li>\n<li><strong>conf</strong>: 包含所有的配置文件，如 <code>nginx.conf</code>，以及其他的配置片段或模块配置。</li>\n<li><strong>html</strong>: 这是 Nginx 的默认网站根目录，通常包含默认的 HTML 页面。</li>\n<li><strong>logs</strong>: 类似于 <code>/var/log/nginx</code>，用于存储日志文件。</li>\n<li><strong>mime.types</strong>: 包含 MIME 类型的定义，用于识别和处理不同的文件类型。</li>\n<li><strong>modules</strong>: 可能包含 Nginx 的模块文件，用于扩展 Nginx 的功能。</li>\n<li><strong>sbin</strong>: 包含 Nginx 的二进制可执行文件。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2-Nginx多线程请求模型和基本请求流程\"><a href=\"#2-Nginx多线程请求模型和基本请求流程\" class=\"headerlink\" title=\"2. Nginx多线程请求模型和基本请求流程\"></a>2. Nginx多线程请求模型和基本请求流程</h1><p><img src=\"/2024/06/10/Nginx%E7%BD%91%E5%85%B3/image-20240610171535163.png\" alt=\"image-20240610171535163\"></p>\n<p>Nginx 的设计并不基于传统的多线程模型来处理请求，而是采用了异步非阻塞的事件驱动模型。Nginx 使用了多进程（多worker进程）模型来提高并发性能和稳定性，每个worker进程内处理请求时则利用了高效的事件处理机制。</p>\n<h3 id=\"2-1-Nginx-的多进程模型\"><a href=\"#2-1-Nginx-的多进程模型\" class=\"headerlink\" title=\"2.1 Nginx 的多进程模型\"></a>2.1 Nginx 的多进程模型</h3><p>Nginx 的工作模型包括一个master进程和多个worker进程。master进程主要负责读取和验证配置文件，生成worker进程，并监听和响应来自worker进程和外部的信号，如重启、停止等操作。worker进程则负责处理所有来自客户端的网络请求。</p>\n<h3 id=\"2-2-Nginx-的事件驱动模型\"><a href=\"#2-2-Nginx-的事件驱动模型\" class=\"headerlink\" title=\"2.2 Nginx 的事件驱动模型\"></a>2.2 Nginx 的事件驱动模型</h3><p>每个worker进程都有自己的事件循环，可以同时处理多个连接。Nginx 使用了高效的事件处理模块，比如<code>epoll</code>（Linux）、<code>kqueue</code>（BSD系统）等，这些模块允许Nginx在一个进程内处理成千上万的并发连接，而无需为每一个连接创建一个新的线程。</p>\n<h3 id=\"2-3-Nginx-的基本请求处理流程\"><a href=\"#2-3-Nginx-的基本请求处理流程\" class=\"headerlink\" title=\"2.3 Nginx 的基本请求处理流程\"></a>2.3 Nginx 的基本请求处理流程</h3><p>当一个HTTP请求到达Nginx时，它遵循以下基本流程：</p>\n<ol>\n<li><p><strong>接受连接</strong>：Nginx监听在配置的端口上，当请求到达时，master进程通过套接字接受连接，然后将连接分配给一个空闲的worker进程。</p>\n</li>\n<li><p><strong>读取请求</strong>：worker进程读取客户端的HTTP请求，包括请求行、请求头和可能的请求体。</p>\n</li>\n<li><p><strong>解析请求</strong>：解析请求的URL、HTTP方法、协议版本等信息。</p>\n</li>\n<li><p><strong>处理请求</strong>：根据配置文件中的规则和指令，Nginx决定如何处理请求，这可能包括：</p>\n<ul>\n<li>路由到正确的站点或服务器块。</li>\n<li>提供静态文件服务。</li>\n<li>执行重定向。</li>\n<li>执行反向代理，将请求转发到后端服务器。</li>\n<li>执行负载均衡，选择后端服务器池中的一个服务器。</li>\n<li>执行缓存策略，检查是否有缓存的数据可以提供。</li>\n</ul>\n</li>\n<li><p><strong>生成响应</strong>：一旦请求被处理，Nginx会生成响应，这可能包括从文件系统读取数据、从后端服务器获取数据或从缓存中获取数据。</p>\n</li>\n<li><p><strong>发送响应</strong>：将响应发送回客户端，包括HTTP状态行、响应头和响应体。</p>\n</li>\n<li><p><strong>记录日志</strong>：Nginx会记录请求和响应的信息到日志文件，通常包括访问日志和错误日志。</p>\n</li>\n<li><p><strong>关闭连接</strong>：根据HTTP协议版本和配置，Nginx可能会保持连接打开一段时间（持久连接）或立即关闭连接。</p>\n</li>\n</ol>\n<p>这种模型允许Nginx高效地处理大量的并发连接，同时也保持了较低的内存消耗和CPU占用率。由于每个worker进程独立处理请求，即使一个请求处理失败，也不会影响其他worker进程的正常工作。</p>\n<h1 id=\"3-Nginx配置文件nginx-conf详解\"><a href=\"#3-Nginx配置文件nginx-conf详解\" class=\"headerlink\" title=\"3. Nginx配置文件nginx.conf详解\"></a>3. Nginx配置文件nginx.conf详解</h1><p>Nginx的配置文件<code>nginx.conf</code>是其核心配置所在，用于定义Nginx的行为和服务设置。以下是您提到的一些关键配置项的详细解释：</p>\n<h3 id=\"3-1-worker-connections属性\"><a href=\"#3-1-worker-connections属性\" class=\"headerlink\" title=\"3.1 worker_connections属性\"></a>3.1 worker_connections属性</h3><p><code>worker_connections</code>是<code>events</code>块中的一个配置项，用来指定每个worker进程能够同时打开的最大连接数。这是Nginx并发能力的关键设置。例如：</p>\n<p>Nginx</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1events &#123;</span><br><span class=\"line\">2    worker_connections  1024;</span><br><span class=\"line\">3&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，这个值通常是系统限制的最大文件描述符数量。增加这个值可以提高Nginx处理并发连接的能力，但也要考虑到系统的实际硬件资源，如内存。</p>\n<h3 id=\"3-2-http属性\"><a href=\"#3-2-http属性\" class=\"headerlink\" title=\"3.2 http属性\"></a>3.2 http属性</h3><p><code>http</code>块包含了全局的HTTP设置和虚拟服务器定义。在这个块中，你可以定义各种与HTTP相关的设置，比如MIME类型、日志格式、gzip压缩、缓存、SSL证书等。例如：</p>\n<p>Nginx</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1http &#123;</span><br><span class=\"line\">2    include       mime.types;</span><br><span class=\"line\">3    default_type  application/octet-stream;</span><br><span class=\"line\">4</span><br><span class=\"line\">5    sendfile        on;</span><br><span class=\"line\">6    tcp_nopush     on;</span><br><span class=\"line\">7    tcp_nodelay    on;</span><br><span class=\"line\">8</span><br><span class=\"line\">9    keepalive_timeout  65;</span><br><span class=\"line\">10&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-sendfile属性\"><a href=\"#3-3-sendfile属性\" class=\"headerlink\" title=\"3.3 sendfile属性\"></a>3.3 sendfile属性</h3><p><code>sendfile</code>是一个与文件传输相关的指令，控制Nginx是否使用高效的操作系统级别的文件传输方式。默认情况下，它是开启的(<code>on</code>)。使用<code>sendfile</code>可以避免用户空间和内核空间之间的数据复制，从而提高文件传输效率。例如：</p>\n<p>Nginx</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 sendfile on;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4keepalive-timeout属性\"><a href=\"#3-4keepalive-timeout属性\" class=\"headerlink\" title=\"3.4keepalive_timeout属性\"></a>3.4keepalive_timeout属性</h3><p><code>keepalive_timeout</code>用于设置HTTP持久连接（keep-alive）的超时时间。这是客户端和服务器之间保持连接打开的时间长度，直到超时或被关闭。例如：</p>\n<p>Nginx</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 keepalive_timeout 65;</span><br></pre></td></tr></table></figure>\n\n<p>这个设置对于减少网络延迟和提高性能非常重要，因为它允许客户端和服务器在多个请求间重用同一个TCP连接，而不需要每次请求都重新建立和关闭连接。</p>\n<h3 id=\"3-5-server属性\"><a href=\"#3-5-server属性\" class=\"headerlink\" title=\"3.5 server属性\"></a>3.5 server属性</h3><p><code>server</code>块用于定义一个虚拟服务器，可以绑定到特定的IP地址和端口，或者监听所有的可用接口。每个<code>server</code>块都可以有自己独立的设置，包括监听的端口、主机名、请求处理逻辑等。例如：</p>\n<p>Nginx</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1<span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t//监听端口号</span><br><span class=\"line\">2    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    //主机名称</span><br><span class=\"line\">3    <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\">4</span><br><span class=\"line\">5    <span class=\"comment\"># 配置请求路由、错误页面、日志等</span></span><br><span class=\"line\">6&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个<code>server</code>块都可以包含多个location块，用于更细粒度的请求路由和处理。通过不同的<code>server</code>块，Nginx可以同时为多个不同的域名或服务提供服务。</p>\n<p>正确配置这些选项对于优化Nginx的性能、安全性和功能性至关重要。</p>\n<h4 id=\"3-5-1-Server-Block\"><a href=\"#3-5-1-Server-Block\" class=\"headerlink\" title=\"3.5.1 Server Block\"></a>3.5.1 Server Block</h4><p><code>server</code> 是 Nginx 中用于定义一个虚拟服务器的配置块，可以理解为一个独立的“网站”配置。每个 <code>server</code> 块可以绑定到一个或多个 IP 地址和端口，也可以监听特定的域名。<code>server</code> 块内的设置定义了该虚拟服务器的行为，包括但不限于：</p>\n<ul>\n<li><strong>listen</strong>: 指定要监听的端口和地址，例如 <code>listen 80;</code> 表示监听 80 端口。</li>\n<li><strong>server_name</strong>: 设置虚拟服务器的域名，例如 <code>server_name example.com;</code>。</li>\n</ul>\n<h4 id=\"3-5-2-Location-Block\"><a href=\"#3-5-2-Location-Block\" class=\"headerlink\" title=\"3.5.2 Location Block\"></a>3.5.2 Location Block</h4><p><code>location</code> 块是 <code>server</code> 块内的子配置块，用于更精细地控制请求的处理方式。它基于 URL 的路径模式来匹配请求，并应用相应的配置。例如：</p>\n<ul>\n<li><strong>精确匹配</strong>: <code>location = /index.html &#123; ... &#125;</code></li>\n<li><strong>前缀匹配</strong>: <code>location /images/ &#123; ... &#125;</code></li>\n<li><strong>正则表达式匹配</strong>: <code>location ~* \\.(jpg|jpeg|gif|png)$ &#123; ... &#125;</code></li>\n</ul>\n<p><code>location</code> 块内的配置可以包括静态文件服务、反向代理设置、重写规则、错误页定制、访问控制等。</p>\n<h4 id=\"3-5-3-Error-page-Directive\"><a href=\"#3-5-3-Error-page-Directive\" class=\"headerlink\" title=\"3.5.3 Error_page Directive\"></a>3.5.3 Error_page Directive</h4><p><code>error_page</code> 指令用于定义特定错误代码的自定义错误页面。它可以将一组错误代码映射到一个特定的 URI，当发生这些错误时，Nginx 将重定向到该 URI。例如：</p>\n<p>Nginx</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1error_page 404 /404.html;</span><br></pre></td></tr></table></figure>\n\n<p>这表示当 Nginx 遇到 404 错误时，会显示 <code>/404.html</code> 文件作为错误页面。<code>error_page</code> 可以在 <code>http</code>、<code>server</code> 或 <code>location</code> 块中定义。</p>\n<h3 id=\"4-Nginx-反向代理和负载均衡\"><a href=\"#4-Nginx-反向代理和负载均衡\" class=\"headerlink\" title=\"4. Nginx 反向代理和负载均衡\"></a>4. Nginx 反向代理和负载均衡</h3><h4 id=\"4-1-Nginx-反向代理\"><a href=\"#4-1-Nginx-反向代理\" class=\"headerlink\" title=\"4.1 Nginx 反向代理\"></a>4.1 Nginx 反向代理</h4><p>Nginx作为反向代理服务器时，其主要工作原理是位于网络服务器群前端，接受来自客户端（如浏览器）的请求，但客户端并不直接知道实际提供服务的服务器位置。Nginx根据预设的规则将请求转发至后端服务器之一，并将该服务器的响应再转发回客户端。这一过程对客户端是透明的，即客户端只知道Nginx的地址，而不知道实际提供服务的服务器地址。</p>\n<p><strong>优点</strong>：</p>\n<ul>\n<li><strong>安全</strong>：隐藏后端服务器的真实IP，增强安全防护。</li>\n<li><strong>性能优化</strong>：可以通过缓存、压缩等技术减少后端服务器的负担。</li>\n<li><strong>负载均衡</strong>：通过分配请求到不同的后端服务器，实现资源的有效利用，提高系统整体性能。</li>\n</ul>\n<h4 id=\"4-2-负载均衡\"><a href=\"#4-2-负载均衡\" class=\"headerlink\" title=\"4.2 负载均衡\"></a>4.2 负载均衡</h4><p>负载均衡是指将大量并发访问或数据流量合理地分配到多台服务器上，以达到最优资源利用，最大化处理能力，最小化响应时间，同时避免任何单一服务器过载。Nginx作为一个优秀的负载均衡器，它提供了多种算法来决定如何将请求分发到后端服务器，包括但不限于轮询（Round Robin）、最少连接数（Least Connections）、IP哈希（IP Hash）等。</p>\n<p><strong>轮询</strong>：按照顺序将请求分发给后端服务器。 <strong>最少连接数</strong>：将新请求分发给当前连接数最少的服务器。 <strong>IP哈希</strong>：根据客户端的IP地址进行哈希运算，将同一客户端的请求尽量分发到同一服务器上，以保持会话的一致性。</p>\n<h4 id=\"4-3-正向代理\"><a href=\"#4-3-正向代理\" class=\"headerlink\" title=\"4.3 正向代理\"></a>4.3 正向代理</h4><p>正向代理与反向代理的工作方式相反。正向代理位于客户端一侧，它的主要作用是代表客户端去获取互联网上的资源，而不是像反向代理那样代表服务器接收请求。当客户端配置了正向代理后，所有对外的请求都会先经过这个代理，由代理服务器代替客户端去访问目标服务器，获取资源后再返回给客户端。</p>\n<p><strong>用途</strong>：</p>\n<ul>\n<li><strong>匿名访问</strong>：通过代理服务器隐藏客户端的真实IP，保护隐私。</li>\n<li><strong>内容过滤</strong>：企业或学校网络中常见的场景，用于过滤不适宜的网站或内容。</li>\n<li><strong>缓存加速</strong>：对于重复的请求，代理服务器可以缓存资源，提高访问速度。</li>\n</ul>\n<p>正向代理和反向代理虽然在工作方向上有本质的区别，但在实际应用中，它们都可以起到优化网络性能、提高安全性和控制网络流量的作用。Nginx本身既可以配置为反向代理，也可以配置为正向代理，不过在实践中更多被用作反向代理和负载均衡器。</p>\n","categories":[],"tags":[{"name":"nginx学习","slug":"nginx学习","permalink":"http://example.com/tags/nginx%E5%AD%A6%E4%B9%A0/"}]},{"title":"RabbitMQ消息队列笔记","date":"2024-06-10T08:54:08.000Z","path":"2024/06/10/RabbitMQ消息队列笔记/","content":"","categories":[],"tags":[]},{"title":"Redis缓存技术","date":"2024-06-10T08:53:56.000Z","path":"2024/06/10/Redis缓存技术/","content":"","categories":[],"tags":[]},{"title":"SpringBoot缓存以及结合Redis","date":"2024-06-08T03:22:44.000Z","path":"2024/06/08/SpringBoot缓存以及结合Redis/","content":"","categories":[],"tags":[]},{"title":"Docker学习笔记","date":"2024-06-07T09:53:52.000Z","path":"2024/06/07/Docker学习笔记/","content":"<h1 id=\"Docker-学习笔记\"><a href=\"#Docker-学习笔记\" class=\"headerlink\" title=\"Docker 学习笔记\"></a>Docker 学习笔记</h1><h2 id=\"1-Docker-简介\"><a href=\"#1-Docker-简介\" class=\"headerlink\" title=\"1. Docker 简介\"></a>1. Docker 简介</h2><p>Docker 是一个开源的应用容器引擎，基于 Go 语言并遵循 Apache2.0 协议开源。它允许开发者将应用程序及其依赖项封装到一个轻量级、可移植的容器中，以便在任何安装了 Docker 的 Linux 或 Windows 机器上运行。</p>\n<h2 id=\"2-Docker-架构\"><a href=\"#2-Docker-架构\" class=\"headerlink\" title=\"2. Docker 架构\"></a>2. Docker 架构</h2><p>Docker 架构主要由三部分组成：</p>\n<ul>\n<li><strong>Docker Client</strong>: 用户与 Docker Daemon 通信的接口，可以发送命令给 Docker Daemon。</li>\n<li><strong>Docker Daemon</strong>: 运行在主机上的后台进程，负责接收 Docker Client 发来的请求，处理并管理 Docker 对象，如镜像、容器等。</li>\n<li><strong>Docker Registry</strong>: 用于存储和分发 Docker 镜像的仓库，分为公有仓库（如 Docker Hub）和私有仓库。</li>\n</ul>\n<h2 id=\"3-Docker-命令\"><a href=\"#3-Docker-命令\" class=\"headerlink\" title=\"3. Docker 命令\"></a>3. Docker 命令</h2><h3 id=\"3-1-拉取镜像\"><a href=\"#3-1-拉取镜像\" class=\"headerlink\" title=\"3.1 拉取镜像\"></a>3.1 拉取镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull [OPTIONS] NAME[:TAG|@DIGEST]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-运行容器\"><a href=\"#3-2-运行容器\" class=\"headerlink\" title=\"3.2 运行容器\"></a>3.2 运行容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-列出容器\"><a href=\"#3-3-列出容器\" class=\"headerlink\" title=\"3.3 列出容器\"></a>3.3 列出容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps [OPTIONS]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-停止容器\"><a href=\"#3-4-停止容器\" class=\"headerlink\" title=\"3.4 停止容器\"></a>3.4 停止容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-删除容器\"><a href=\"#3-5-删除容器\" class=\"headerlink\" title=\"3.5 删除容器\"></a>3.5 删除容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">rm</span> [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-6-删除镜像\"><a href=\"#3-6-删除镜像\" class=\"headerlink\" title=\"3.6 删除镜像\"></a>3.6 删除镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Dockerfile\"><a href=\"#4-Dockerfile\" class=\"headerlink\" title=\"4. Dockerfile\"></a>4. Dockerfile</h2><p>Dockerfile 是一个包含了一系列指令的文本文件，用于构建 Docker 镜像。例如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:latest</span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> <span class=\"keyword\">user</span>@example.com</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; apt-get install -y nginx</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;nginx&quot;</span>, <span class=\"string\">&quot;-g&quot;</span>, <span class=\"string\">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-1-常见指令\"><a href=\"#4-1-常见指令\" class=\"headerlink\" title=\"4.1 常见指令\"></a>4.1 常见指令</h3><ul>\n<li><code>FROM</code>: 指定基础镜像。</li>\n<li><code>RUN</code>: 执行命令，可以是 shell 命令或脚本。</li>\n<li><code>COPY</code>: 复制文件或目录至镜像中。</li>\n<li><code>ADD</code>: 类似于 COPY，但可以支持自动解压 tar 文件。</li>\n<li><code>EXPOSE</code>: 暴露端口。</li>\n<li><code>CMD</code>: 容器启动时默认执行的命令。</li>\n<li><code>ENTRYPOINT</code>: 类似于 CMD，但可以设置默认的可执行文件及参数。</li>\n</ul>\n<h2 id=\"5-Docker-Compose\"><a href=\"#5-Docker-Compose\" class=\"headerlink\" title=\"5. Docker Compose\"></a>5. Docker Compose</h2><p>Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。它使用 YAML 文件来配置应用程序的服务，然后使用一个命令来创建和启动所有服务。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">web:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;80:80&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">db:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">postgres:latest</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-1-Compose-命令\"><a href=\"#5-1-Compose-命令\" class=\"headerlink\" title=\"5.1 Compose 命令\"></a>5.1 Compose 命令</h3><ul>\n<li><code>docker-compose up</code>: 启动服务。</li>\n<li><code>docker-compose down</code>: 停止并删除服务。</li>\n<li><code>docker-compose restart</code>: 重启服务。</li>\n<li><code>docker-compose logs</code>: 查看服务日志。</li>\n</ul>\n<h2 id=\"6-Docker-Swarm\"><a href=\"#6-Docker-Swarm\" class=\"headerlink\" title=\"6. Docker Swarm\"></a>6. Docker Swarm</h2><p>Docker Swarm 是 Docker 的原生集群管理工具，允许用户将多个 Docker 主机组织成一个集群，并以集群为单位进行操作。</p>\n<h3 id=\"6-1-Swarm-命令\"><a href=\"#6-1-Swarm-命令\" class=\"headerlink\" title=\"6.1 Swarm 命令\"></a>6.1 Swarm 命令</h3><ul>\n<li><code>docker swarm init</code>: 初始化 Swarm 集群。</li>\n<li><code>docker swarm join</code>: 加入 Swarm 集群。</li>\n<li><code>docker service create</code>: 创建服务。</li>\n<li><code>docker service scale</code>: 调整服务的副本数量。</li>\n</ul>\n<h3 id=\"6-2-初始化Swarm\"><a href=\"#6-2-初始化Swarm\" class=\"headerlink\" title=\"6.2 初始化Swarm\"></a>6.2 初始化Swarm</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在manager节点上初始化Swarm</span></span><br><span class=\"line\">docker swarm init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取worker节点加入Swarm的命令</span></span><br><span class=\"line\">docker swarm join-token worker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在worker节点上执行上面的命令，加入Swarm</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-3-网络模式\"><a href=\"#6-3-网络模式\" class=\"headerlink\" title=\"6.3 网络模式\"></a>6.3 网络模式</h3><ul>\n<li><code>overlay</code>: Swarm 模式下的默认网络，用于跨主机通信。</li>\n<li><code>ingress</code>: 用于负载均衡的网络模式。</li>\n</ul>\n<h2 id=\"7-Docker-Volumes\"><a href=\"#7-Docker-Volumes\" class=\"headerlink\" title=\"7. Docker Volumes\"></a>7. Docker Volumes</h2><p>Docker Volumes 是用于在 Docker 容器之间共享数据的一种方式，它们独立于容器存在，即使容器被删除，数据也不会丢失。</p>\n<h3 id=\"7-1-常用命令\"><a href=\"#7-1-常用命令\" class=\"headerlink\" title=\"7.1 常用命令\"></a>7.1 常用命令</h3><ul>\n<li><code>docker volume create</code>: 创建卷。</li>\n<li><code>docker volume ls</code>: 列出所有卷。</li>\n<li><code>docker volume inspect</code>: 显示卷的详细信息。</li>\n<li><code>docker volume rm</code>: 删除卷。</li>\n</ul>\n<h3 id=\"7-2-创建-Docker-Volume\"><a href=\"#7-2-创建-Docker-Volume\" class=\"headerlink\" title=\"7.2 创建 Docker Volume\"></a>7.2 创建 Docker Volume</h3><p>首先，你可以通过运行 <code>docker volume create</code> 命令来创建一个新的 Docker Volume。假设我们将其命名为 <code>mydata</code>:</p>\n<p>Bash</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1$ docker volume create mydata</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-3-运行容器并挂载-Volume\"><a href=\"#7-3-运行容器并挂载-Volume\" class=\"headerlink\" title=\"7.3 运行容器并挂载 Volume\"></a>7.3 运行容器并挂载 Volume</h3><p>接下来，你可以运行一个新的容器，并将这个 Volume 挂载到容器内的某个目录。例如，我们可以运行一个带有 Nginx 的容器，并将 <code>mydata</code> Volume 挂载到 <code>/var/www/html</code> 目录下：</p>\n<p>Bash</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1$ docker run -d --name mynginx -v mydata:/var/www/html nginx</span><br></pre></td></tr></table></figure>\n\n<p>这里 <code>-v mydata:/var/www/html</code> 参数指定了将名为 <code>mydata</code> 的 Volume 挂载到容器内 <code>/var/www/html</code> 目录上。</p>\n<h3 id=\"7-4-访问和修改-Volume-中的数据\"><a href=\"#7-4-访问和修改-Volume-中的数据\" class=\"headerlink\" title=\"7.4 访问和修改 Volume 中的数据\"></a>7.4 访问和修改 Volume 中的数据</h3><p>现在，你可以在宿主机上通过 <code>docker exec</code> 命令访问容器，并修改或查看 Volume 中的数据。例如，你可以向 <code>/var/www/html</code> 目录添加一个文件：</p>\n<p>Bash</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1$ docker exec -it mynginx bash</span><br><span class=\"line\">2# echo &#x27;Hello World!&#x27; &gt; /var/www/html/index.html</span><br></pre></td></tr></table></figure>\n\n<p>然后从容器内部退出。</p>\n<h3 id=\"7-5-查看-Volume\"><a href=\"#7-5-查看-Volume\" class=\"headerlink\" title=\"7.5 查看 Volume\"></a>7.5 查看 Volume</h3><p>你可以通过运行 <code>docker volume ls</code> 或者 <code>docker volume inspect &lt;volume_name&gt;</code> 来查看已存在的 Volumes 列表或特定 Volume 的详细信息。</p>\n<p>Bash</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1$ docker volume ls</span><br><span class=\"line\">2DRIVER              VOLUME NAME</span><br><span class=\"line\">3local               mydata</span><br></pre></td></tr></table></figure>\n\n<p>Bash</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1$ docker volume inspect mydata</span><br><span class=\"line\">2[</span><br><span class=\"line\">3    &#123;</span><br><span class=\"line\">4        &quot;CreatedAt&quot;: &quot;2023-03-16T14:05:09Z&quot;,</span><br><span class=\"line\">5        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class=\"line\">6        &quot;Labels&quot;: &#123;&#125;,</span><br><span class=\"line\">7        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/mydata/_data&quot;,</span><br><span class=\"line\">8        &quot;Name&quot;: &quot;mydata&quot;,</span><br><span class=\"line\">9        &quot;Options&quot;: &#123;&#125;,</span><br><span class=\"line\">10        &quot;Scope&quot;: &quot;local&quot;</span><br><span class=\"line\">11    &#125;</span><br><span class=\"line\">12]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-6-清理-Volume\"><a href=\"#7-6-清理-Volume\" class=\"headerlink\" title=\"7.6 清理 Volume\"></a>7.6 清理 Volume</h3><p>当你不再需要某个 Volume 时，可以使用 <code>docker volume rm</code> 命令来删除它。但请注意，在删除之前，确保该 Volume 不再被任何容器使用：</p>\n<p>Bash</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1$ docker volume rm mydata</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-7-删除容器但保留-Volume\"><a href=\"#7-7-删除容器但保留-Volume\" class=\"headerlink\" title=\"7.7 删除容器但保留 Volume\"></a>7.7 删除容器但保留 Volume</h3><p>即使你删除了容器，Volume 也会保持不变。如果要删除容器 <code>mynginx</code> 而保留其挂载的 Volume，只需运行：</p>\n<p>Bash</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1$ docker rm mynginx</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-Docker-Network\"><a href=\"#8-Docker-Network\" class=\"headerlink\" title=\"8. Docker Network\"></a>8. Docker Network</h2><p>Docker Network 提供了容器之间的网络通信能力，可以创建自定义网络，实现容器间的隔离和通信。</p>\n<h3 id=\"8-1-常用命令\"><a href=\"#8-1-常用命令\" class=\"headerlink\" title=\"8.1 常用命令\"></a>8.1 常用命令</h3><ul>\n<li><code>docker network create</code>: 创建网络。</li>\n<li><code>docker network ls</code>: 列出所有网络。</li>\n<li><code>docker network connect</code>: 连接容器到网络。</li>\n<li><code>docker network disconnect</code>: 断开容器与网络的连接。</li>\n</ul>\n<h3 id=\"8-2-创建和使用Network\"><a href=\"#8-2-创建和使用Network\" class=\"headerlink\" title=\"8.2 创建和使用Network\"></a>8.2 创建和使用Network</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个名为mynetwork的network</span></span><br><span class=\"line\">docker network create mynetwork</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行两个容器，并挂载到mynetwork</span></span><br><span class=\"line\">docker run -d --name container1 --network mynetwork alpine <span class=\"built_in\">tail</span> -f /dev/null</span><br><span class=\"line\">docker run -d --name container2 --network mynetwork alpine <span class=\"built_in\">tail</span> -f /dev/null</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-Docker-Security\"><a href=\"#9-Docker-Security\" class=\"headerlink\" title=\"9. Docker Security\"></a>9. Docker Security</h2><p>Docker 提供了多种安全机制，包括但不限于：</p>\n<ul>\n<li><strong>内容信任</strong>：确保拉取的镜像是可信的。</li>\n<li><strong>资源限制</strong>：限制容器的资源使用，如 CPU、内存等。</li>\n<li><strong>安全扫描</strong>：检测镜像中的漏洞。</li>\n<li><strong>运行时策略</strong>：控制容器的运行环境，如 SELinux、AppArmor 等。</li>\n</ul>\n<h2 id=\"10-Docker-Stack\"><a href=\"#10-Docker-Stack\" class=\"headerlink\" title=\"10. Docker Stack\"></a>10. Docker Stack</h2><p>Docker Stack 是Docker的一种部署和管理多服务应用的方式，可以使用Docker Compose文件在Swarm模式下部署和管理多个服务。</p>\n<h3 id=\"10-1-部署Stack\"><a href=\"#10-1-部署Stack\" class=\"headerlink\" title=\"10.1 部署Stack\"></a>10.1 部署Stack</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">1version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">2services:</span></span><br><span class=\"line\"><span class=\"attr\">3  web:</span></span><br><span class=\"line\"><span class=\"attr\">4    image:</span> <span class=\"string\">nginx:latest</span></span><br><span class=\"line\"><span class=\"attr\">5    ports:</span></span><br><span class=\"line\"><span class=\"attr\">6      - target:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">7        published:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">8        protocol:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\"><span class=\"attr\">9  db:</span></span><br><span class=\"line\"><span class=\"attr\">10    image:</span> <span class=\"string\">postgres:latest</span></span><br><span class=\"line\"><span class=\"attr\">11    environment:</span></span><br><span class=\"line\"><span class=\"attr\">12      POSTGRES_PASSWORD:</span> <span class=\"string\">mysecretpassword</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1<span class=\"comment\"># 将上面的Compose文件保存为docker-compose.yml</span></span><br><span class=\"line\">2</span><br><span class=\"line\">3<span class=\"comment\"># 在Swarm模式下部署Stack</span></span><br><span class=\"line\">4docker stack deploy -c docker-compose.yml mystack</span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":[{"name":"Docker学习","slug":"Docker学习","permalink":"http://example.com/tags/Docker%E5%AD%A6%E4%B9%A0/"}]},{"title":"JavaWeb开发学习","date":"2024-05-02T09:41:21.000Z","path":"2024/05/02/JavaWeb开发学习/","content":"<h2 id=\"HTML笔记\"><a href=\"#HTML笔记\" class=\"headerlink\" title=\"HTML笔记\"></a>HTML笔记</h2><ul>\n<li>HTML大致格式：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">HTML</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>标题<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        内容</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>1.超链接<br>标签:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>这是a标签<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>属性:<br>    <strong>href</strong>:指定资源访问的url<br>    <strong>target:指定在何处打开资源链接</strong><br>    <strong>self:默认值，在当前页面打开</strong><br>    <strong>blank:在空白页面打开</strong></p>\n</li>\n<li><p>视频标签:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><strong>src:规定视频的ur1</strong></li>\n<li><strong>controls:显示播放控件</strong></li>\n<li><strong>width:播放器的宽度</strong></li>\n<li><strong>height:播放器的高度</strong></li>\n</ul>\n</li>\n<li><p>音频标签:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">src</span>&quot;<span class=\"attr\">xxxxx</span>&quot; <span class=\"attr\">controls</span> = <span class=\"string\">&quot;controls&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><strong>src:规定音频的url</strong></li>\n<li><strong>controls:显示播放控件</strong></li>\n</ul>\n</li>\n<li><p>段落标签:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是段落标签<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>文本加粗标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span> / <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>盒子(div)</p>\n<ul>\n<li>盒子:页面中所有的元素(标签)，<br>都可以看做是一个 盒子，由盒子将页面中的元素包含在一个矩形区域内，通过盒子的视角更方便的进行页面布局</li>\n<li>盒子模型组成:<strong>内容区域(content)</strong><br><strong>边框区域(border)、外边距区域(margin)</strong><br><strong>、内边距区域(padding)</strong></li>\n</ul>\n</li>\n<li><p>span标签:<strong>一行可以显示多个，宽度和高度默认由内容撑开，不可以设置宽高(width、height)。</strong></p>\n</li>\n<li><p>表格：</p>\n<ul>\n<li><p>标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>，属性border：规定表格边框的宽度，width：规定表格的宽度，cellspacing：规定单元之间的空间</p>\n</li>\n<li><pre><code class=\"html\">&lt;tr&gt;：表格的行，可以包裹多个&lt;td&gt;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* ```html</span><br><span class=\"line\">  &lt;td&gt;：表格的单元格(普通)，可以包裹内容，如果是表头单元格可以用标签&lt;th&gt;</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>表单标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>应用场景：数据的采集功能，如注册、登录等数据采集</p>\n</li>\n<li><p>表单项：</p>\n<ul>\n<li><p>input标签，定义表单项，通过type属性控制输入的形式</p>\n</li>\n<li><p>select：定义下拉列表， option定义列表选项</p>\n</li>\n<li><p>textarea：定义文本区域</p>\n</li>\n</ul>\n</li>\n<li><p>表单属性</p>\n<ul>\n<li>action：规定当提交表单时向何处发送表单数据，URL</li>\n<li>method：规定用于发送表单数据的方式。GET、POST</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>​\t\t</p>\n<p><strong>form表单属性:</strong></p>\n<p><strong>label标签有聚焦的作用</strong></p>\n<p><strong>action：表单提交的ur1，往何处提交数据，如果不指定，默认提交到当前页面</strong><br><strong>method：表单的提交方式</strong><br><strong>get：在ur1后面拼接表单数据，比如:?username&#x3D;Tom&amp;age&#x3D;12，url长度有限制 。默认值</strong><br><strong>post：在消息体(请求体)中传递的，参数大小无限制的</strong></p>\n<p>表单标签——表单项</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240503143408361-1714718055325-1-1714718064241-3.png\" alt=\"image-20240503143408361\"></p>\n<h2 id=\"JavaScript笔记\"><a href=\"#JavaScript笔记\" class=\"headerlink\" title=\"JavaScript笔记\"></a>JavaScript笔记</h2><h3 id=\"1）JS引入方式\"><a href=\"#1）JS引入方式\" class=\"headerlink\" title=\"1）JS引入方式\"></a>1）JS引入方式</h3><p><strong>JS的引入方式有两种：</strong></p>\n<ul>\n<li><p>内部脚本：将JS代码定义在HTML页面中</p>\n<ul>\n<li>JavaScript代码必须位于script标签内</li>\n<li>在HTML文档中，可以再任意地方 ，放置任意数量的script</li>\n<li>一般会把脚本置于body元素的底部，可以改善显示速度</li>\n</ul>\n</li>\n<li><p>外部脚本：将JS代码定义在外部JS文件中，然后引入到HTML页面中</p>\n<ul>\n<li><p>外部JS文件中，只包含JS代码，不包含script标签</p>\n</li>\n<li><p>script标签不能够自闭合，也就是不可以写成</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240503145115827.png\" alt=\"image-20240503145115827\"></p>\n<h3 id=\"2）JS基础语法\"><a href=\"#2）JS基础语法\" class=\"headerlink\" title=\"2）JS基础语法\"></a>2）JS基础语法</h3><h4 id=\"1、书写语法\"><a href=\"#1、书写语法\" class=\"headerlink\" title=\"1、书写语法\"></a>1、书写语法</h4><ul>\n<li><p>区分大小写：与java一样，变量名、函数名以及其他一切东西都是区分大小写的</p>\n</li>\n<li><p>每行结尾的分号可有可无</p>\n</li>\n<li><p>注释：</p>\n<ul>\n<li>单行注释：&#x2F;&#x2F;注释内容</li>\n<li>多行注释：&#x2F;<em>注释内容</em> *&#x2F;</li>\n</ul>\n</li>\n<li><p>大括号代表代码块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(count == <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(count);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"输出语句\"><a href=\"#输出语句\" class=\"headerlink\" title=\"输出语句\"></a>输出语句</h5><pre><code>* 使用**window.alert()**写入警告框\n* 使用**document.write()**写入HTML输出\n* 使用**console.log()**写入浏览器控制台\n</code></pre>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240503151224544.png\" alt=\"image-20240503151224544\"></p>\n<h4 id=\"2、变量\"><a href=\"#2、变量\" class=\"headerlink\" title=\"2、变量\"></a>2、变量</h4><ul>\n<li><p><strong>JavaScript</strong> 中用 <strong>var</strong>关键字(<strong>variable</strong> 的缩写)来声明变量。</p>\n<p><strong>var</strong>的特点：</p>\n<ul>\n<li>作用域比较大，全局变量。</li>\n<li>可以重复定义同一个变量。相当于一个覆盖</li>\n</ul>\n</li>\n<li><p><strong>JavaScript</strong> 是一门弱类型语言，变量<strong>可以存放不同类型的值</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;张三&quot;</span>;<span class=\"comment\">//定义a的值是字符串张三</span></span><br><span class=\"line\">a = <span class=\"number\">20</span><span class=\"comment\">//把值20赋值给a</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(a)<span class=\"comment\">//输出20</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>变量名需要遵循如下规则:</p>\n<ul>\n<li>组成字符可以是任何字母、数字、下划线(_)或美元符号($)</li>\n<li>数字不能开头</li>\n<li>建议使用驼峰命名(如<strong>userName</strong>)</li>\n</ul>\n</li>\n<li><p><strong>let</strong> 关键字来定义变量。它的用法类似于 var，但是所声明的变量，只在let 关键字所在的代码块内有效，且不允许重复声明。</p>\n</li>\n<li><p><strong>const</strong> 关键字，用来声明一个只读的常量。一旦声明，常量的值就不能改变。</p>\n</li>\n</ul>\n<h4 id=\"3、数据类型\"><a href=\"#3、数据类型\" class=\"headerlink\" title=\"3、数据类型\"></a>3、数据类型</h4><ul>\n<li>JS中分为：<strong>原始类型</strong>和<strong>引用类型</strong>。</li>\n</ul>\n<h5 id=\"原始类型\"><a href=\"#原始类型\" class=\"headerlink\" title=\"原始类型\"></a>原始类型</h5><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240503153618200.png\" alt=\"image-20240503153618200\"></p>\n<h5 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h5><ul>\n<li><p>算术运算符:+，-，*，&#x2F;，%，++，–</p>\n</li>\n<li><p>赋值运算符:&#x3D;，+&#x3D;，-&#x3D;，，&#x2F;&#x3D;,%&#x3D;</p>\n</li>\n<li><p>比较运算符:&gt;，&lt;，&gt;&#x3D;，&lt;&#x3D;，!&#x3D;，&#x3D;&#x3D;，**&#x3D;&#x3D;&#x3D;**</p>\n<p>&#x3D;&#x3D;与&#x3D;&#x3D;&#x3D;</p>\n<ul>\n<li>&#x3D;&#x3D;会进行类型转换，&#x3D;&#x3D;&#x3D;不会进行类型转换。</li>\n</ul>\n</li>\n<li><p>逻辑运算符:&amp;&amp;，||，!</p>\n</li>\n<li><p>三元运算符:条件表达式?true_value:false value</p>\n</li>\n</ul>\n<p>类型转换：</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240622132055925.png\" alt=\"image-20240622132055925\"></p>\n<ul>\n<li><p>字符串类型转为数字：</p>\n<ul>\n<li><p>paseInt方法：<strong>这个方法能够将字符串转为数字，原理是从字符串左边开始读取，读取到不是数字的地方(如12A45他会读取到A这个为止而停下来)停下来，取该位置前面的输出。</strong></p>\n<pre><code>alert(parseInt(&quot;12&quot;));//转为12\nalert(parseInt(&quot;12A45&quot;));//转为12\nalert(parseInt(&quot;A45&quot;));//转为NaN(not a number)\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>其他类型转为boolean：</p>\n<ul>\n<li>Number类型：0和NaN转为false，其他均转为true。</li>\n<li>String类型：空字符串转为false，其他 均转为true。</li>\n<li>Null类型和undefined类型：均转为false。</li>\n</ul>\n</li>\n<li><p>隐式转换</p>\n<ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240622131333679.png\" alt=\"image-20240622131333679\"></li>\n</ul>\n</li>\n<li><p>检测数据类型</p>\n<ul>\n<li>typeof + 检测的名字</li>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240622130940174.png\" alt=\"image-20240622130940174\"></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h5><ul>\n<li><p>if…else if ….else….</p>\n</li>\n<li><p>switch</p>\n</li>\n<li><p>for</p>\n</li>\n<li><p>while</p>\n</li>\n<li><p>do…while</p>\n<p>值得注意的是，<strong>在JS中这些流程控制语句和我们的java是完全一致的。</strong></p>\n</li>\n<li><p>break和continue</p>\n<ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240622145759783.png\" alt=\"image-20240622145759783\"></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h5><h3 id=\"3）JS函数\"><a href=\"#3）JS函数\" class=\"headerlink\" title=\"3）JS函数\"></a>3）JS函数</h3><h4 id=\"1、函数的定义\"><a href=\"#1、函数的定义\" class=\"headerlink\" title=\"1、函数的定义\"></a>1、函数的定义</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">functionName</span>(<span class=\"params\">参数<span class=\"number\">1</span>，参数<span class=\"number\">2.</span>..</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">//要执行的代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//另一种方式调用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> functionName = <span class=\"keyword\">function</span>(<span class=\"params\">参数<span class=\"number\">1</span>，参数<span class=\"number\">2.</span>..</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//要执行的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意<ul>\n<li>形式参数不需要类型。因为JS是弱类型语言。</li>\n<li>返回值类型也不需要定义，可以再函数内部直接使用return返回即可。</li>\n</ul>\n</li>\n<li>调用：函数名称(实际参数列表)</li>\n</ul>\n<h4 id=\"2、匿名函数\"><a href=\"#2、匿名函数\" class=\"headerlink\" title=\"2、匿名函数\"></a>2、匿名函数</h4><ul>\n<li><p>函数分为</p>\n<ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240622154237927.png\" alt=\"image-20240622154237927\"></li>\n</ul>\n</li>\n<li><p>函数表达式</p>\n<ul>\n<li><pre><code class=\"HTML\">&lt;script&gt;\n    // 1.函数表达式\nlet fn = function (x,y)&#123;\n    console.log( x + y );\n&#125;\nfn(1,2);\n\n// 函数表达式 和具名函数(有名函数) 有什么不同呢？\n\n// 1.具名函数的调用可以写到任何位置\n// 2.匿名函数的函数表达式形式写法必须先声明在使用，否则会报错未声明\n&lt;/script&gt;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* 立即执行函数</span><br><span class=\"line\"></span><br><span class=\"line\">  * ```js</span><br><span class=\"line\">    // 1、立即执行函数</span><br><span class=\"line\">    </span><br><span class=\"line\">    (function(x,y)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">      console.log(x+y);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;)(1,2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 2、第二种 写法</span><br><span class=\"line\">    </span><br><span class=\"line\">    (function(x,y)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">      console.log(x+y);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;(1,3));</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 上面结构中，第二个小括号是实参，function()中的小括号传递的是形参&#123;&#125;中写入要执行的逻辑</span><br></pre></td></tr></table></figure>\n\n* 注意：多个立即执行函数要在函数末尾用分号隔开。\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4）JS对象\"><a href=\"#4）JS对象\" class=\"headerlink\" title=\"4）JS对象\"></a>4）JS对象</h3><p>定义：let 对象名 &#x3D; { }</p>\n<h5 id=\"Array-数组对象\"><a href=\"#Array-数组对象\" class=\"headerlink\" title=\"Array(数组对象)\"></a>Array(数组对象)</h5><ul>\n<li><p>定义：let 变量名 &#x3D; new Array(元素列表)；或者let 变量名&#x3D; [元素列表];</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//定义数组</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> arr1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//或者var arr1 = [1,2,3,4,5]</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//访问元素</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr1[<span class=\"number\">0</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr1[<span class=\"number\">1</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">   <span class=\"comment\">//特点：长度可变，类型可变</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">   <span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">   arr[<span class=\"number\">10</span>] = <span class=\"number\">50</span>; </span></span><br><span class=\"line\"><span class=\"language-javascript\">   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[<span class=\"number\">10</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">   arr[<span class=\"number\">9</span>] = <span class=\"string\">&quot;zhangsan&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">   arr[<span class=\"number\">8</span>] = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//数组的遍历,遍历所有的元素</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> element = arr[i];</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;=========================&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//数组的遍历(foreach):遍历数组中有值的元素</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//ES6 箭头函数：(形参列表...) =&gt;&#123;函数体的内容&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//push方法：添加元素到数组末尾</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    arr.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;添加测试1&quot;</span>,<span class=\"string\">&quot;添加测试2&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//删除元素splice方法:(从某个索引位置开始删除,删除元素的个数)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    arr.<span class=\"title function_\">splice</span>(<span class=\"number\">11</span>,<span class=\"number\">2</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"String对象\"><a href=\"#String对象\" class=\"headerlink\" title=\"String对象\"></a>String对象</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//String对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//方式一：</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> stringTest = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;zhangsan&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//方式二：</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> stringTest1 =<span class=\"string\">&quot;lisi&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>String对象的<strong>属性</strong>和<strong>方法</strong></p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240503165308862.png\" alt=\"image-20240503165308862\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//String对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//方式一：</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// var stringTest = new String(&quot;zhangsan&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//方式二：</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> stringTest1 =<span class=\"string\">&quot;  Hello World  &quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//获取字符串长度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringTest1.<span class=\"property\">length</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//chAt方法,返回指定位置的字符</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringTest1.<span class=\"title function_\">charAt</span>(<span class=\"number\">2</span>));<span class=\"comment\">//H</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//indexOf方法，查询对应字符的索引</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringTest1.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;H&quot;</span>)); <span class=\"comment\">//2</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//trim方法(去除空格)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> newString = stringTest1.<span class=\"title function_\">trim</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//substring方法，截取字符串，(前闭后开)输入两个值，开始索引和结束索引</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//这里演示截取去除空格后的字符串，将Hello截取出来</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>,<span class=\"number\">5</span>));<span class=\"comment\">//Hello</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"json对象\"><a href=\"#json对象\" class=\"headerlink\" title=\"json对象\"></a>json对象</h5><ul>\n<li><p>概念: <strong>JavaScript Object Notation，JavaScript</strong>，对象标记法</p>\n</li>\n<li><p>JSON 是通过JavaScript 对象标记法书写的文本。</p>\n</li>\n<li><p>由于其语法简单，层次结构鲜明，现多用于作为<strong>数据载体</strong>，在网络中进行数据传输。</p>\n</li>\n</ul>\n<p>数据格式：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;name&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;xiaoli&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">25</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;sex&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;男性&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"> <span class=\"attr\">&quot;key1&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;value1&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240503172509557.png\" alt=\"image-20240503172509557\"></p>\n<p>定义json案例</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"comment\">//定义json</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> jsonStr = <span class=\"string\">&#x27;&#123;&quot;name&quot; = &quot;小李&quot;,&quot;age&quot; = 25, &quot;address&quot; = &quot;北京&quot; &#125;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//JSON字符串转为JS对象——JSON.parse()方法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> jsonStrObject = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(jsonStr);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(jsonStrObject);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//JS对象转为JS字符串——JSON.stringify()方法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span>  jsObject = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(jsonStrObject);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(jsObject);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"BOM对象\"><a href=\"#BOM对象\" class=\"headerlink\" title=\"BOM对象\"></a>BOM对象</h5><ul>\n<li>概念:<strong>Browser Object Model</strong> 浏览器对象模型，允许lavaScript与浏览器对话，lavaScript 将浏览器的各个组成部分封装为<strong>对象</strong>。</li>\n</ul>\n<h6 id=\"Window对象\"><a href=\"#Window对象\" class=\"headerlink\" title=\"Window对象\"></a>Window对象</h6><ul>\n<li>介绍:浏览器窗口对象。</li>\n<li>获取:直接使用window，其中 window.可以省略<strong>window.alert()和alert()效果一样</strong></li>\n<li>属性<ul>\n<li>history:对 History 对象的只读引用。请参阅 History 对象</li>\n<li>location:用于窗口或框架的 Location 对象。请参阅Location 对象。</li>\n<li>navigator:对 Navigator 对象的只读引用。请参阅Navigator 对象</li>\n</ul>\n</li>\n<li>方法<ul>\n<li><strong>alert()</strong>:显示带有一段消息和一个确认按钮的警告框。</li>\n<li><strong>confirm()</strong>:显示带有一段消息以及确认按钮和取消按钮的对话。</li>\n<li>**setlnterval():**按照指定的周期(以毫秒计)来调用函数或计算表达式。</li>\n<li><strong>setTimeout()</strong>:在指定的毫秒数后调用函数或计算表达式。</li>\n</ul>\n</li>\n</ul>\n<p>示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//获取</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Hello BOM&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Hello BoM window&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 方法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// confirm-对话框--确认:true ，取消:false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> flag = <span class=\"title function_\">confirm</span>(<span class=\"string\">&quot;您确认删除该记录吗?&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(flag);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 定时器-setInterval -- 周期性的执行某一个函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        i++;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;定时器执行了&quot;</span>+i+<span class=\"string\">&quot;次&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,<span class=\"number\">2000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//定时器延迟指定时间执行一次:-setTimeout </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Js&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,<span class=\"number\">3000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Location对象\"><a href=\"#Location对象\" class=\"headerlink\" title=\"Location对象\"></a>Location对象</h6><ul>\n<li><p>介绍：地址栏对象。</p>\n</li>\n<li><p>获取：使用window.location获取，其中window.可以省略不写</p>\n</li>\n<li><p>属性：</p>\n<ul>\n<li><p>href：设置或返回完整的URL，如果设置URL那么他会自动跳转所设置的URL。</p>\n<p>代码示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//获取当前完整的URL</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(location.<span class=\"property\">href</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//设置URL自动跳转</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    location.<span class=\"property\">href</span>=<span class=\"string\">&quot;http://www.itcast.cn&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"DOM对象\"><a href=\"#DOM对象\" class=\"headerlink\" title=\"DOM对象\"></a>DOM对象</h5><ul>\n<li><p>概念:<strong>Document Object Model</strong>，文档对象模型。</p>\n</li>\n<li><p>将标记语言的各个组成部分封装为对应的对象：</p>\n<ul>\n<li>Document：整个文档对象</li>\n<li>Element：元素对象</li>\n<li>Attribute：属性对象</li>\n<li>Text：文本对象</li>\n<li>Comment：注释对象</li>\n</ul>\n</li>\n<li><p>JavaScript 通过DOM，就能够对HTML进行如下操作：</p>\n<ul>\n<li>改变 HTML元素的内容</li>\n<li>改变 HTML元素的样式(CSS)</li>\n<li>对 HTML DOM 事件作出反应</li>\n<li>添加和删除 HTML元素</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240503180943024.png\" alt=\"image-20240503180943024\"></p>\n<h3 id=\"5）JS事件监听\"><a href=\"#5）JS事件监听\" class=\"headerlink\" title=\"5）JS事件监听\"></a>5）JS事件监听</h3><p>事件:HTML事件是发生在HTML元素上的“事情”。比如:</p>\n<ul>\n<li><p>按钮被点击</p>\n</li>\n<li><p>鼠标移动到元素上</p>\n</li>\n<li><p>按下键盘按键</p>\n</li>\n<li><p>事件监听:JavaScript可以在事件被侦测到时 执行代码。</p>\n</li>\n</ul>\n<h4 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h4><ul>\n<li><p>方式一：通过HTML标签中的时间属性进行绑定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;on()&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;按钮1&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\tfunction on()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\talert(&#x27;我被点击了!);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方式二：通过DOM元素属性绑定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">id</span> =<span class=\"string\">&quot;btn1&quot;</span> <span class=\"attr\">value</span> = <span class=\"string\">&quot;按钮2&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;btn1&quot;</span>).<span class=\"property\">onclick</span> = \t\t\t<span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    \t<span class=\"title function_\">alert</span>(<span class=\"string\">&quot;我被点击了！&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"常见事件\"><a href=\"#常见事件\" class=\"headerlink\" title=\"常见事件\"></a>常见事件</h4><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240503184235985.png\" alt=\"image-20240503184235985\"></p>\n<h3 id=\"6）变量\"><a href=\"#6）变量\" class=\"headerlink\" title=\"6）变量\"></a>6）变量</h3><p>语法：let 变量名</p>\n<h4 id=\"6-1、变量的赋值\"><a href=\"#6-1、变量的赋值\" class=\"headerlink\" title=\"6.1、变量的赋值\"></a>6.1、变量的赋值</h4><p>语法：变量 &#x3D; 要赋的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> age</span><br><span class=\"line\"></span><br><span class=\"line\">age = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">18</span>；</span><br><span class=\"line\"><span class=\"comment\">//弹出输入框prompt(&quot;请输入姓名&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"title function_\">prompt</span>(<span class=\"string\">&quot;请输入姓名&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-2、var和let的区别\"><a href=\"#6-2、var和let的区别\" class=\"headerlink\" title=\"6.2、var和let的区别\"></a>6.2、var和let的区别</h4><p>在较旧的JavaScript，使用关键字 var 来声明变量 ，而不是 let。<br>var现在开发中一般不再使用它，只是我们可能再老版程序中看到它。<br>let 为了解决 var 的一些问题。</p>\n<p>var 声明:<br><strong>可以先使用 在声明(不合理)</strong><br><strong>var 声明过的变量可以重复声明(不合理)</strong><br><strong>比如变量提升、全局变量、没有块级作用域等等</strong></p>\n<h3 id=\"7）WebAPIS\"><a href=\"#7）WebAPIS\" class=\"headerlink\" title=\"7）WebAPIS\"></a>7）WebAPIS</h3><ul>\n<li><p>变量声明</p>\n<ul>\n<li><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240622165854723.png\" alt=\"image-20240622165854723\"></p>\n</li>\n<li><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240622170552011.png\" alt=\"image-20240622170552011\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"7-1、webAPI基本认识\"><a href=\"#7-1、webAPI基本认识\" class=\"headerlink\" title=\"7.1、webAPI基本认识\"></a>7.1、webAPI基本认识</h5><h6 id=\"7-1-1、作用和分类\"><a href=\"#7-1-1、作用和分类\" class=\"headerlink\" title=\"7.1.1、作用和分类\"></a>7.1.1、作用和分类</h6><ul>\n<li><p>作用: 就是使用 JS 去操作 html和浏览器</p>\n</li>\n<li><p>分类:DOM(文档对象模型)、BOM(浏览器对象模型)</p>\n</li>\n<li><p>什么是webAPI？</p>\n<p>API 指的是应用程序编程接口（<em>A</em>pplication <em>P</em>rogramming <em>I</em>nterface）。</p>\n<p>Web API 是 Web 的应用程序编程接口。</p>\n<p>浏览器API 可以扩展 Web 浏览器的功能。</p>\n<p>服务器 API 可以扩展 Web 服务器的功能</p>\n</li>\n</ul>\n<h6 id=\"7-1-2、什么是DOM\"><a href=\"#7-1-2、什么是DOM\" class=\"headerlink\" title=\"7.1.2、什么是DOM\"></a>7.1.2、什么是DOM</h6><ul>\n<li>DOM(Document Object Model–文档对象模型)是用来呈现以及与任意 HTML 或 XML文档交互的API</li>\n<li>白话文:DOM是浏览器提供的一套专门用来 操作网页内容 的功能</li>\n</ul>\n<h6 id=\"7-1-3、DOM树\"><a href=\"#7-1-3、DOM树\" class=\"headerlink\" title=\"7.1.3、DOM树\"></a>7.1.3、DOM树</h6><ul>\n<li>DOM树是什么？<ul>\n<li>将 HTML 文档以树状结构直观的表现出来，我们称之为文档树或 DOM 树</li>\n<li>描述网页内容关系的名词</li>\n<li>作用:文档树直观的体现了标签与标签之间的关系</li>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240622171331061.png\" alt=\"image-20240622171331061\"></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"7-1-4、DOM对象\"><a href=\"#7-1-4、DOM对象\" class=\"headerlink\" title=\"7.1.4、DOM对象\"></a>7.1.4、<code>DOM</code>对象</h6><ul>\n<li>DOM对象:浏览器根据html标签生成的JS对象<ul>\n<li>所有的标签属性都可以在这个对象上面找到</li>\n<li>修改这个对象的属性会自动映射到标签身上</li>\n</ul>\n</li>\n<li>DOM核心思想<ul>\n<li>把网页内容当做对象来处理</li>\n</ul>\n</li>\n<li><code>doument</code>对象<ul>\n<li>是 DOM 里提供的一个对象</li>\n<li>所以它提供的属性和方法都是<em><strong>用来访问和操作网页内容的</strong></em><br>例:document.write()</li>\n<li>网页所有内容都在document里面</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"7-2、获取DOM对象\"><a href=\"#7-2、获取DOM对象\" class=\"headerlink\" title=\"7.2、获取DOM对象\"></a>7.2、获取DOM对象</h5><h6 id=\"7-2-1、根据CSS选择器来获取DOM元素\"><a href=\"#7-2-1、根据CSS选择器来获取DOM元素\" class=\"headerlink\" title=\"7.2.1、根据CSS选择器来获取DOM元素\"></a>7.2.1、根据CSS选择器来获取DOM元素</h6><ul>\n<li><p>选择匹配的<strong>第一个元素</strong></p>\n</li>\n<li><p>语法</p>\n<ul>\n<li><pre><code class=\"javascript\">document.querySelector(&#39;css选择器&#39;)\n\n// 获取匹配的第一个元素(通过标签元素和类名来进行选择)\n  const firstObj = document.querySelector(&#39;div&#39;)\n  const firstObj2 = document.querySelector(&quot;.test&quot;)\n  console.log(firstObj);\n  console.log(firstObj2);\n\nconst nav = document.querySelector(&quot;#nav&quot;)\nconsole.log(nav);\n\nconst li = document.querySelector(&quot;ul li:first-child&quot;)\nconsole.log(li);\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  * 参数：包含一个或多个有效的CSS选择器字符串</span><br><span class=\"line\"></span><br><span class=\"line\">  * 返回值：CSS选择器匹配的**第一个元素**，一个HTMLElement对象</span><br><span class=\"line\"></span><br><span class=\"line\">* 选择多个元素</span><br><span class=\"line\"></span><br><span class=\"line\">* 语法：</span><br><span class=\"line\"></span><br><span class=\"line\">  ```javascript</span><br><span class=\"line\">  const lis = document.querySelectorAll(&quot;ul li&quot;)</span><br><span class=\"line\">  console.log(lis);</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p>返回值：返回一个数组</p>\n<ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240622173913182.png\" alt=\"image-20240622173913182\"></li>\n<li>得到的是一个伪数组有长度有索引号的数组，但是没有 pop()push()等数组方法，想要得到里面的每一个对象，则需要遍历(for)的方式获得。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"7-2-2、其他获取DOM元素的方法\"><a href=\"#7-2-2、其他获取DOM元素的方法\" class=\"headerlink\" title=\"7.2.2、其他获取DOM元素的方法\"></a>7.2.2、其他获取DOM元素的方法</h6><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240622174536995.png\" alt=\"image-20240622174536995\"></p>\n<h5 id=\"7-3、操作元素内容\"><a href=\"#7-3、操作元素内容\" class=\"headerlink\" title=\"7.3、操作元素内容\"></a>7.3、操作元素内容</h5><h6 id=\"7-3-1、对象-innerText属性\"><a href=\"#7-3-1、对象-innerText属性\" class=\"headerlink\" title=\"7.3.1、对象.innerText属性\"></a>7.3.1、对象.innerText属性</h6><h6 id=\"7-3-2、对象-innerHtml属性\"><a href=\"#7-3-2、对象-innerHtml属性\" class=\"headerlink\" title=\"7.3.2、对象.innerHtml属性\"></a>7.3.2、对象.innerHtml属性</h6><p>获取元素内容最简单的方法是使用 <code>innerHTML</code> 属性。<code>innerHTML</code> 属性可用于获取或替换 HTML 元素的内容。<code>innerHTML</code> 属性可用于获取或改变任何 HTML 元素，包括 <code>&lt;html&gt;</code> 和 <code>&lt;body&gt;</code>。</p>\n<p>下面的例子改变了 id&#x3D;”demo” 的 </p><p> 元素的内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;Hello World!&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>  在上面的例子中，<strong>getElementById</strong> 是方法，而 <strong>innerHTML</strong> 是属性。</p>\n<h6 id=\"7-3-3、getElementById-方法\"><a href=\"#7-3-3、getElementById-方法\" class=\"headerlink\" title=\"7.3.3、getElementById 方法\"></a>7.3.3、getElementById 方法</h6><p>访问 HTML 元素最常用的方法是使用元素的 id。</p>\n<p>在上面的例子中，<code>getElementById</code> 方法使用 id&#x3D;”demo” 来查找元素。</p>\n<h5 id=\"7-4、JavaScript-验证-API\"><a href=\"#7-4、JavaScript-验证-API\" class=\"headerlink\" title=\"7.4、JavaScript 验证 API\"></a>7.4、JavaScript 验证 API</h5><h6 id=\"约束验证-DOM-方法\"><a href=\"#约束验证-DOM-方法\" class=\"headerlink\" title=\"约束验证 DOM 方法\"></a>约束验证 DOM 方法</h6><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">checkValidity()</td>\n<td align=\"left\">如果 input 元素包含有效数据，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">setCustomValidity()</td>\n<td align=\"left\">设置 input 元素的 validationMessage 属性。</td>\n</tr>\n</tbody></table>\n<p>checkValidity() 方法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;id1&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">min</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">max</span>=<span class=\"string\">&quot;300&quot;</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;myFunction()&quot;</span>&gt;</span>OK<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> inpObj = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;id1&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">if</span> (!inpObj.<span class=\"title function_\">checkValidity</span>()) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = inpObj.<span class=\"property\">validationMessage</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125; </span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"约束验证-DOM-属性\"><a href=\"#约束验证-DOM-属性\" class=\"headerlink\" title=\"约束验证 DOM 属性\"></a>约束验证 DOM 属性</h6><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">validity</td>\n<td align=\"left\">包含与输入元素有效性相关的布尔属性。</td>\n</tr>\n<tr>\n<td align=\"left\">validationMessage</td>\n<td align=\"left\">包含当有效性为 false 时浏览器将显示的消息。</td>\n</tr>\n<tr>\n<td align=\"left\">willValidate</td>\n<td align=\"left\">指示是否将验证 input 元素。</td>\n</tr>\n</tbody></table>\n<h6 id=\"有效性属性\"><a href=\"#有效性属性\" class=\"headerlink\" title=\"有效性属性\"></a>有效性属性</h6><p>input 元素的有效性属性包含许多与数据有效性相关的属性：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">customError</td>\n<td align=\"left\">如果设置了自定义有效性消息，则设置为 true。</td>\n</tr>\n<tr>\n<td align=\"left\">patternMismatch</td>\n<td align=\"left\">如果元素的值与其 pattern 属性不匹配，则设置为 true。</td>\n</tr>\n<tr>\n<td align=\"left\">rangeOverflow</td>\n<td align=\"left\">如果元素的值大于其 max 属性，则设置为 true。</td>\n</tr>\n<tr>\n<td align=\"left\">rangeUnderflow</td>\n<td align=\"left\">如果元素的值小于其 min 属性，则设置为 true。</td>\n</tr>\n<tr>\n<td align=\"left\">stepMismatch</td>\n<td align=\"left\">如果元素的值对其 step 属性无效，则设置为 true。</td>\n</tr>\n<tr>\n<td align=\"left\">tooLong</td>\n<td align=\"left\">如果元素的值超过其 maxLength 属性，则设置为 true。</td>\n</tr>\n<tr>\n<td align=\"left\">typeMismatch</td>\n<td align=\"left\">如果元素的值对其 type 属性无效，则设置为 true。</td>\n</tr>\n<tr>\n<td align=\"left\">valueMissing</td>\n<td align=\"left\">如果元素（具有 required 属性）没有值，则设置为 true。</td>\n</tr>\n<tr>\n<td align=\"left\">valid</td>\n<td align=\"left\">如果元素的值有效，则设置为 true。</td>\n</tr>\n</tbody></table>\n<p>rangeOverflow 属性</p>\n<p>如果输入字段中的数字大于 100（input 元素的 <code>max</code> 属性），则显示一条消息：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>JavaScript 验证<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>请输入一个数字，然后单击“确定”：<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;id1&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">max</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;myFunction()&quot;</span>&gt;</span>确定<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>如果数字大于 100（输入的 max 属性），则会显示错误消息。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> text;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;id1&quot;</span>).<span class=\"property\">validity</span>.<span class=\"property\">rangeOverflow</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    text = <span class=\"string\">&quot;Value too large&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    text = <span class=\"string\">&quot;输入没问题&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125; </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = text;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>rangeUnderflow 属性</p>\n<p>如果输入字段中的数字小于 100（input 元素的 <code>min</code> 属性），则显示一条消息：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>JavaScript 验证<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>请输入一个数字，然后单击“确定”：<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;id1&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">min</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;myFunction()&quot;</span>&gt;</span>确定<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>如果数字小于 100（输入的 min 属性），则会显示错误消息。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> text;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;id1&quot;</span>).<span class=\"property\">validity</span>.<span class=\"property\">rangeUnderflow</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    text = <span class=\"string\">&quot;Value too small&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    text = <span class=\"string\">&quot;输入没问题&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125; </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = text;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"7-5、Web-History-API\"><a href=\"#7-5、Web-History-API\" class=\"headerlink\" title=\"7.5、Web History API\"></a>7.5、Web History API</h5><p>Web History API 提供了访问 windows.history 对象的简单方法。</p>\n<p>window.history 对象包含用户访问过的 URL（网站）。</p>\n<p>所有浏览器都支持 Web History API：</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240625130902822.png\" alt=\"image-20240625130902822\"></p>\n<h6 id=\"History-back-方法\"><a href=\"#History-back-方法\" class=\"headerlink\" title=\"History back() 方法\"></a>History back() 方法</h6><p>back() 方法加载 windows.history 列表中的前一个 URL。</p>\n<p>这与单击浏览器中的“后退箭头”相同。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;myFunction()&quot;</span>&gt;</span>后退<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">window</span>.<span class=\"property\">history</span>.<span class=\"title function_\">back</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"History-go-方法\"><a href=\"#History-go-方法\" class=\"headerlink\" title=\"History go() 方法\"></a>History go() 方法</h6><p>go() 方法从历史列表中加载一个特定的 URL：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;myFunction()&quot;</span>&gt;</span>后退两页<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">window</span>.<span class=\"property\">history</span>.<span class=\"title function_\">go</span>(-<span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"History-对象属性\"><a href=\"#History-对象属性\" class=\"headerlink\" title=\"History 对象属性\"></a>History 对象属性</h6><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/prop_his_length.asp\">length</a></td>\n<td align=\"left\">返回历史列表中的 URL 数量。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>History对象<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;getBack()&quot;</span>&gt;</span>获取浏览器历史列表长度<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">getBack</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> length = <span class=\"variable language_\">window</span>.<span class=\"property\">history</span>.<span class=\"property\">length</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#demo&quot;</span>).<span class=\"property\">innerHTML</span> = <span class=\"string\">`浏览器列表长度是：<span class=\"subst\">$&#123;length&#125;</span>`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"History-对象方法\"><a href=\"#History-对象方法\" class=\"headerlink\" title=\"History 对象方法\"></a>History 对象方法</h6><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/met_his_back.asp\">back()</a></td>\n<td align=\"left\">加载历史列表中的上一个 URL。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/met_his_forward.asp\">forward()</a></td>\n<td align=\"left\">加载历史列表中的下一个 URL。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/met_his_go.asp\">go()</a></td>\n<td align=\"left\">从历史列表中加载特定的 URL。</td>\n</tr>\n</tbody></table>\n<h5 id=\"7-6、Web-Storage-API\"><a href=\"#7-6、Web-Storage-API\" class=\"headerlink\" title=\"7.6、Web Storage API\"></a>7.6、Web Storage API</h5><p>Web Storage API 是一种用于在浏览器中存储和检索数据的简单语法。他非常容易使用：</p>\n<p>实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Bill Gates&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"localStorage-对象\"><a href=\"#localStorage-对象\" class=\"headerlink\" title=\"localStorage 对象\"></a>localStorage 对象</h6><p>localStorage 对象提供对特定网站的本地存储的访问。它允许您存储、读取、添加、修改和删除该域的数据项。存储的数据没有到期日期，并且在浏览器关闭时不会被删除。</p>\n<p>这些数据将在几天、几周和几年内均可用。</p>\n<p>setItem() 方法</p>\n<p>localStorage.setItem() 方法将数据项存储在 storage 中。</p>\n<p>它接受一个名称和一个值作为参数：</p>\n<p>实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Bill Gates&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"sessionStorage-对象\"><a href=\"#sessionStorage-对象\" class=\"headerlink\" title=\"sessionStorage 对象\"></a>sessionStorage 对象</h6><p>sessionStorage 对象与 localStorage 对象相同。</p>\n<p>不同之处在于 sessionStorage 对象存储会话的数据。</p>\n<p><strong>当浏览器关闭时，数据会被删除。</strong></p>\n<p>实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>setItem() 方法</p>\n<p>sessionStorage.setItem() 方法将数据项存储在存储（storage）中。</p>\n<p>它接受一个名称和一个值作为参数：</p>\n<p>实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Bill Gates&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>getItem() 方法</p>\n<p>sessionStorage.getItem() 方法从存储（storage）中检索数据项。</p>\n<p>它接受一个名称作为参数：</p>\n<p>实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Storage-对象属性和方法\"><a href=\"#Storage-对象属性和方法\" class=\"headerlink\" title=\"Storage 对象属性和方法\"></a>Storage 对象属性和方法</h6><table>\n<thead>\n<tr>\n<th align=\"left\">属性&#x2F;方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/met_storage_key.asp\">key(n)</a></td>\n<td align=\"left\">返回存储中第 n 个键的名称。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/prop_storage_length.asp\">length</a></td>\n<td align=\"left\">返回存储在 Storage 对象中的数据项数。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/met_storage_getitem.asp\">getItem(keyname)</a></td>\n<td align=\"left\">返回指定的键名的值。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/met_storage_setitem.asp\">setItem(keyname, value)</a></td>\n<td align=\"left\">将键添加到存储中，或者如果键已经存在，则更新该键的值。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/met_storage_removeitem.asp\">removeItem(keyname)</a></td>\n<td align=\"left\">从存储中删除该键。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/met_storage_clear.asp\">clear()</a></td>\n<td align=\"left\">清空所有键。</td>\n</tr>\n</tbody></table>\n<h6 id=\"Web-Storage-API-相关页面\"><a href=\"#Web-Storage-API-相关页面\" class=\"headerlink\" title=\"Web Storage API 相关页面\"></a>Web Storage API 相关页面</h6><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/prop_win_localstorage.asp\">window.localStorage</a></td>\n<td align=\"left\">允许在 Web 浏览器中保存键&#x2F;值对。存储没有到期日期的数据。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/prop_win_sessionstorage.asp\">window.sessionStorage</a></td>\n<td align=\"left\">允许在 Web 浏览器中保存键&#x2F;值对。存储一个会话的数据。</td>\n</tr>\n</tbody></table>\n<h5 id=\"7-7、Web-Worker-API\"><a href=\"#7-7、Web-Worker-API\" class=\"headerlink\" title=\"7.7、Web Worker API\"></a>7.7、Web Worker API</h5><p><strong>Web Worker 是在后台运行的 JavaScript，不会影响页面的性能。</strong></p>\n<p>什么是 Web Worker？</p>\n<p>在 HTML 页面中执行脚本时，页面在脚本完成之前是无响应的。</p>\n<p>Web Worker 是在后台运行的 JavaScript，独立于其他脚本，不会影响页面的性能。你可以继续做任何你想做的事情：点击、选取内容等，同时 web worker 在后台运行。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>JavaScript Web Workers API<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Count numbers: <span class=\"tag\">&lt;<span class=\"name\">output</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;result&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">output</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;startWorker()&quot;</span>&gt;</span>开始 Worker<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;stopWorker()&quot;</span>&gt;</span>停止 Worker<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">let</span> w;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">startWorker</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">if</span>(<span class=\"title function_\">typeof</span>(w) == <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    w = <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(<span class=\"string\">&quot;demo_workers.js&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  w.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;result&quot;</span>).<span class=\"property\">innerHTML</span> = event.<span class=\"property\">data</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">stopWorker</span>(<span class=\"params\"></span>) &#123; </span></span><br><span class=\"line\"><span class=\"language-javascript\">  w.<span class=\"title function_\">terminate</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  w = <span class=\"literal\">undefined</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"创建-Web-Worker-文件\"><a href=\"#创建-Web-Worker-文件\" class=\"headerlink\" title=\"创建 Web Worker 文件\"></a>创建 Web Worker 文件</h6><p>现在，让我们在外部 JavaScript 中创建我们的 Web Worker。</p>\n<p>在这里，我们创建了一个重要的脚本。该脚本存储在 “demo_workers.js” 文件中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">timedCount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  i ++;</span><br><span class=\"line\">  <span class=\"title function_\">postMessage</span>(i);</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"string\">&quot;timedCount()&quot;</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">timedCount</span>();</span><br></pre></td></tr></table></figure>\n\n<p>上面代码的重要部分是 <code>postMessage()</code> 方法 - 用于将消息发送回 HTML 页面。</p>\n<p><strong>注释：</strong>通常 web worker 不用于这种简单的脚本，而是用于 CPU 密集型任务。</p>\n<h6 id=\"创建-Web-Worker-对象\"><a href=\"#创建-Web-Worker-对象\" class=\"headerlink\" title=\"创建 Web Worker 对象\"></a>创建 Web Worker 对象</h6><p>现在我们有了 web worker 文件，我们需要从 HTML 页面调用它。</p>\n<p>以下代码行检查 worker 是否已存在，如果不存在，它会创建一个新的 web worker 对象并运行 “demo_workers.js” 中的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_\">typeof</span>(w) == <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//引入你的workers.js的路径，若是放在同级目录下，直接使用文件名称即可。</span></span><br><span class=\"line\">  w = <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(<span class=\"string\">&quot;demo_workers.js&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们可以发送和接收来自 web worker 的消息。</p>\n<p>向 web worker 添加一个 “onmessage” 事件侦听器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;result&quot;</span>).<span class=\"property\">innerHTML</span> = event.<span class=\"property\">data</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>当 Web Worker 发布消息时，将执行事件侦听器中的代码。来自 Web Worker 的数据存储在 event.data 中。</p>\n<h6 id=\"终止-Web-Worker\"><a href=\"#终止-Web-Worker\" class=\"headerlink\" title=\"终止 Web Worker\"></a>终止 Web Worker</h6><p>当 web worker 对象被创建时，它会继续监听消息（即使在外部脚本完成之后）直到它被终止。</p>\n<p>如需终止 web worker，并释放浏览器&#x2F;计算机资源，请使用 <code>terminate()</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w.<span class=\"title function_\">terminate</span>();</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"重用-Web-Worker\"><a href=\"#重用-Web-Worker\" class=\"headerlink\" title=\"重用 Web Worker\"></a>重用 Web Worker</h6><p>如果将 worker 变量设置为 undefined，则在它终止后，您可以重用以下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w = <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Web-Worker-和-DOM\"><a href=\"#Web-Worker-和-DOM\" class=\"headerlink\" title=\"Web Worker 和 DOM\"></a>Web Worker 和 DOM</h6><p>由于 Web Worker 位于外部文件中，因此他们无法访问以下 JavaScript 对象：</p>\n<ul>\n<li>window 对象</li>\n<li>document 对象</li>\n<li>parent 对象</li>\n</ul>\n<h5 id=\"7-8、JavaScript-Fetch-API\"><a href=\"#7-8、JavaScript-Fetch-API\" class=\"headerlink\" title=\"7.8、JavaScript Fetch API\"></a>7.8、JavaScript Fetch API</h5><p><strong>Fetch API 接口允许 Web 浏览器向 Web 服务器发出 HTTP 请求。</strong></p>\n<p>*<strong>不再需要 XMLHttpRequest。</strong></p>\n<h6 id=\"Fetch-API-实例\"><a href=\"#Fetch-API-实例\" class=\"headerlink\" title=\"Fetch API 实例\"></a>Fetch API 实例</h6><p>下面的例子获取文件并显示内</p>\n<p>由于 Fetch 基于 async 和 await，因此上面的例子这么写可能更容易理解：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span>获取文件以更改此文本。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">getText</span>(<span class=\"string\">&quot;/demo/js/fetch_info.txt&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getText</span>(<span class=\"params\">file</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> myObject = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(file);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> myText = <span class=\"keyword\">await</span> myObject.<span class=\"title function_\">text</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = myText;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240625163254429.png\" alt=\"image-20240625163254429\"></p>\n<h5 id=\"7-9、Web-Geolocation-API\"><a href=\"#7-9、Web-Geolocation-API\" class=\"headerlink\" title=\"7.9、Web Geolocation API\"></a>7.9、Web Geolocation API</h5><p>HTML Geolocation API 用于获取用户的地理位置。</p>\n<p>由于这可能会损害隐私，除非用户批准，否则位置不可用。</p>\n<p><strong>注释：</strong>地理定位对于带有 GPS 的设备（如智能手机）最为准确。</p>\n<p>所有浏览器都支持 Geolocation API：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Chrome</th>\n<th align=\"center\">IE</th>\n<th align=\"center\">Firefox</th>\n<th align=\"center\">Safari</th>\n<th align=\"center\">Opera</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n</tr>\n</tbody></table>\n<p><strong>注释：</strong>从 Chrome 50 开始，Geolocation API 将仅适用于安全上下文，例如 HTTPS。如果您的站点托管在非安全源（例如 HTTP）上，则获取用户位置的请求将不再起作用。</p>\n<h6 id=\"使用-Geolocation-API\"><a href=\"#使用-Geolocation-API\" class=\"headerlink\" title=\"使用 Geolocation API\"></a>使用 Geolocation API</h6><p><code>getCurrentPosition()</code> 方法用于返回用户的位置。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>JavaScript Geolocation API<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>请单击按钮以获取您的坐标。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;getLocation()&quot;</span>&gt;</span>试一试<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> x = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLocation</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">if</span> (navigator.<span class=\"property\">geolocation</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    navigator.<span class=\"property\">geolocation</span>.<span class=\"title function_\">getCurrentPosition</span>(showPosition);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125; <span class=\"keyword\">else</span> &#123; </span></span><br><span class=\"line\"><span class=\"language-javascript\">    x.<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;Geolocation is not supported by this browser.&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">showPosition</span>(<span class=\"params\">position</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  x.<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;Latitude: &quot;</span> + position.<span class=\"property\">coords</span>.<span class=\"property\">latitude</span> + </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"string\">&quot;&lt;br&gt;Longitude: &quot;</span> + position.<span class=\"property\">coords</span>.<span class=\"property\">longitude</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>例子解释：</p>\n<ol>\n<li>检查是否支持 Geolocation</li>\n<li>如果支持，请运行 getCurrentPosition() 方法。如果没有，则向用户显示一条消息</li>\n<li>如果 getCurrentPosition() 方法成功，则返回一个 coordinates 对象给参数 (showPosition) 中规定的函数</li>\n<li>showPosition() 函数输出纬度和经度</li>\n</ol>\n<p>上面的例子是一个非常基本的地理定位脚本，没有错误处理。</p>\n<h6 id=\"处理错误和拒绝\"><a href=\"#处理错误和拒绝\" class=\"headerlink\" title=\"处理错误和拒绝\"></a>处理错误和拒绝</h6><p><code>getCurrentPosition()</code> 方法的第二个参数用于处理错误。如果无法获取用户的位置，它规定要运行的函数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>JavaScript Geolocation API<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>单击按钮以获取您的坐标。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;getLocation()&quot;</span>&gt;</span>试一试<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> x = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLocation</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">if</span> (navigator.<span class=\"property\">geolocation</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    navigator.<span class=\"property\">geolocation</span>.<span class=\"title function_\">getCurrentPosition</span>(showPosition, showError);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125; <span class=\"keyword\">else</span> &#123; </span></span><br><span class=\"line\"><span class=\"language-javascript\">    x.<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;Geolocation is not supported by this browser.&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">showPosition</span>(<span class=\"params\">position</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  x.<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;Latitude: &quot;</span> + position.<span class=\"property\">coords</span>.<span class=\"property\">latitude</span> + </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"string\">&quot;&lt;br&gt;Longitude: &quot;</span> + position.<span class=\"property\">coords</span>.<span class=\"property\">longitude</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">showError</span>(<span class=\"params\">error</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">switch</span>(error.<span class=\"property\">code</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">case</span> error.<span class=\"property\">PERMISSION_DENIED</span>:</span></span><br><span class=\"line\"><span class=\"language-javascript\">      x.<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;User denied the request for Geolocation.&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">break</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">case</span> error.<span class=\"property\">POSITION_UNAVAILABLE</span>:</span></span><br><span class=\"line\"><span class=\"language-javascript\">      x.<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;Location information is unavailable.&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">break</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">case</span> error.<span class=\"property\">TIMEOUT</span>:</span></span><br><span class=\"line\"><span class=\"language-javascript\">      x.<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;The request to get user location timed out.&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">break</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">case</span> error.<span class=\"property\">UNKNOWN_ERROR</span>:</span></span><br><span class=\"line\"><span class=\"language-javascript\">      x.<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;An unknown error occurred.&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">break</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"getCurrentPosition-方法-返回数据\"><a href=\"#getCurrentPosition-方法-返回数据\" class=\"headerlink\" title=\"getCurrentPosition() 方法 - 返回数据\"></a>getCurrentPosition() 方法 - 返回数据</h6><p><code>getCurrentPosition()</code> 方法在成功时返回一个对象。会始终返回纬度、经度和精度属性。如果可用，则返回其他属性：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">返回</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">coords.latitude</td>\n<td align=\"left\">以十进制数表示的纬度（始终返回）。</td>\n</tr>\n<tr>\n<td align=\"left\">coords.longitude</td>\n<td align=\"left\">以十进制数表示的经度（始终返回）。</td>\n</tr>\n<tr>\n<td align=\"left\">coords.accuracy</td>\n<td align=\"left\">位置精度（始终返回）。</td>\n</tr>\n<tr>\n<td align=\"left\">coords.altitude</td>\n<td align=\"left\">平均海平面以上的高度（以米计）（如果可用则返回）。</td>\n</tr>\n<tr>\n<td align=\"left\">coords.altitudeAccuracy</td>\n<td align=\"left\">位置的高度精度（如果可用则返回）。</td>\n</tr>\n<tr>\n<td align=\"left\">coords.heading</td>\n<td align=\"left\">从北顺时针方向的航向（如果可用则返回）。</td>\n</tr>\n<tr>\n<td align=\"left\">coords.speed</td>\n<td align=\"left\">以米&#x2F;秒计的速度（如果可用则返回）。</td>\n</tr>\n<tr>\n<td align=\"left\">timestamp</td>\n<td align=\"left\">响应的日期&#x2F;时间（如果可用则返回）。</td>\n</tr>\n</tbody></table>\n<h2 id=\"JS-ASYNC\"><a href=\"#JS-ASYNC\" class=\"headerlink\" title=\"JS ASYNC\"></a>JS ASYNC</h2><h3 id=\"JavaScript-回调\"><a href=\"#JavaScript-回调\" class=\"headerlink\" title=\"JavaScript 回调\"></a>JavaScript 回调</h3><p>“I will call back later!”</p>\n<p>回调 (callback) 是作为参数传递给另一个函数的函数</p>\n<p>这种技术允许函数调用另一个函数</p>\n<p>回调函数可以在另一个函数完成后运行</p>\n<h4 id=\"函数序列\"><a href=\"#函数序列\" class=\"headerlink\" title=\"函数序列\"></a>函数序列</h4><p>JavaScript 函数按照它们被调用的顺序执行。而不是以它们被定义的顺序。</p>\n<p>此例最终将显示 “Goodbye”：</p>\n<h5 id=\"实例1\"><a href=\"#实例1\" class=\"headerlink\" title=\"实例1\"></a>实例1</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFirst</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">myDisplayer</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mySecond</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">myDisplayer</span>(<span class=\"string\">&quot;Goodbye&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">myFirst</span>();</span><br><span class=\"line\"><span class=\"title function_\">mySecond</span>();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"实例2\"><a href=\"#实例2\" class=\"headerlink\" title=\"实例2\"></a>实例2</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFirst</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">myDisplayer</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mySecond</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">myDisplayer</span>(<span class=\"string\">&quot;Goodbye&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">mySecond</span>();</span><br><span class=\"line\"><span class=\"title function_\">myFirst</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"顺序控制\"><a href=\"#顺序控制\" class=\"headerlink\" title=\"顺序控制\"></a>顺序控制</h4><p>有时您希望更好地控制何时执行函数。</p>\n<p>假设您要进行计算，然后显示结果。</p>\n<p>您可以调用计算器函数 (<code>myCalculator</code>)，保存结果，然后调用另一个函数 (<code>myDisplayer</code>) 来显示结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myDisplayer</span>(<span class=\"params\">some</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = some;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myCalculator</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = num1 + num2;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"title function_\">myCalculator</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"title function_\">myDisplayer</span>(result);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JavaScript-回调-1\"><a href=\"#JavaScript-回调-1\" class=\"headerlink\" title=\"JavaScript 回调\"></a>JavaScript 回调</h4><p>回调是作为参数传递给另一个函数的函数。</p>\n<p>使用回调，您可以通过回调调用计算器函数（<code>myCalculator</code>），并在计算完成后让计算器函数运行回调：</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myDisplayer</span>(<span class=\"params\">some</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = some;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myCalculator</span>(<span class=\"params\">num1, num2, myCallback</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = num1 + num2;</span><br><span class=\"line\">  <span class=\"title function_\">myCallback</span>(sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">myCalculator</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>, myDisplayer);</span><br></pre></td></tr></table></figure>\n\n<p>在上面的例子中， <code>myDisplayer</code> 是函数的名称。</p>\n<p>它作为参数传递给 <code>myCalculator()</code>。</p>\n<p>当您将函数作为参数传递时，请记住不要使用括号。</p>\n<p>正确：myCalculator(5, 5, myDisplayer);</p>\n<p>错误：myCalculator(5, 5, myDisplayer());</p>\n<h3 id=\"异步的-JavaScript\"><a href=\"#异步的-JavaScript\" class=\"headerlink\" title=\"异步的 JavaScript\"></a>异步的 JavaScript</h3><p>在上面的例子中，<code>myDisplayer</code> 是函数的名称。</p>\n<p>它作为参数传递给 <code>myCalculator()</code>。</p>\n<p>在现实世界中，回调最常与异步函数一起使用。</p>\n<p>一个典型的例子是 JavaScript <code>setTimeout()</code>。</p>\n<h4 id=\"等待超时\"><a href=\"#等待超时\" class=\"headerlink\" title=\"等待超时\"></a>等待超时</h4><p>在使用 JavaScript 函数 <code>setTimeout()</code> 时，可以指定超时时执行的回调函数：</p>\n<h5 id=\"实例1-1\"><a href=\"#实例1-1\" class=\"headerlink\" title=\"实例1\"></a>实例1</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(myFunction, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;I love You !!&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的示例中，<code>myFunction</code> 被用作回调。</p>\n<p>函数（函数名）作为参数传递给 <code>setTimeout()</code>。</p>\n<p>3000 是超时前的毫秒数，所以 3 秒后会调用 <code>myFunction()</code>。</p>\n<p>当您将函数作为参数传递时，请记住不要使用括号。</p>\n<p>正确：setTimeout(myFunction, 3000);</p>\n<p>错误：setTimeout(myFunction(), 3000);</p>\n<p>若不将函数的名称作为参数传递给另一个函数，您始终可以传递整个函数：</p>\n<h5 id=\"实例2-1\"><a href=\"#实例2-1\" class=\"headerlink\" title=\"实例2\"></a>实例2</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; <span class=\"title function_\">myFunction</span>(<span class=\"string\">&quot;I love You !!!&quot;</span>); &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"等待间隔\"><a href=\"#等待间隔\" class=\"headerlink\" title=\"等待间隔\"></a>等待间隔</h3><p>在使用 JavaScript 函数 <code>setInterval()</code> 时，可以指定每个间隔执行的回调函数：</p>\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setInterval</span>(myFunction, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> d = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span>=</span><br><span class=\"line\">  d.<span class=\"title function_\">getHours</span>() + <span class=\"string\">&quot;:&quot;</span> +</span><br><span class=\"line\">  d.<span class=\"title function_\">getMinutes</span>() + <span class=\"string\">&quot;:&quot;</span> +</span><br><span class=\"line\">  d.<span class=\"title function_\">getSeconds</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的例子中，<code>myFunction</code> 用作回调。</p>\n<p>函数（函数名）作为参数传递给 <code>setInterval()</code>。</p>\n<p>1000 是间隔之间的毫秒数，因此 <code>myFunction()</code> 将每秒调用一次。</p>\n<h3 id=\"等待文件\"><a href=\"#等待文件\" class=\"headerlink\" title=\"等待文件\"></a>等待文件</h3><p>如果您创建函数来加载外部资源（如脚本或文件），则在内容完全加载之前无法使用这些内容。</p>\n<p>这是使用回调的最佳时机。</p>\n<p>此例加载一个 HTML 文件 (<code>mycar.html</code>)，并在文件完全加载后在网页中显示该 HTML 文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myDisplayer</span>(<span class=\"params\">some</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = some;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getFile</span>(<span class=\"params\">myCallback</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> req = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">  req.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&quot;mycar.html&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//req.onload指的是在加载完成时要执行的动作</span></span><br><span class=\"line\">  req.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">myCallback</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">myCallback</span>(<span class=\"string\">&quot;Error: &quot;</span> + req.<span class=\"property\">status</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  req.<span class=\"title function_\">send</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getFile</span>(myDisplayer);</span><br></pre></td></tr></table></figure>\n\n<p>在上面的示例中，<code>myDisplayer</code> 用作回调。</p>\n<p>函数（函数名）作为参数传递给 <code>getFile()</code>。</p>\n<p>以下是 <code>mycar.html</code> 的副本：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img_car.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Nice car&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:100%&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A car is a wheeled, self-powered motor vehicle used for transportation.</span><br><span class=\"line\">Most definitions of the term specify that cars are designed to run primarily on roads, to have seating for one to eight people, to typically have four wheels.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>(Wikipedia)<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JavaScript-Promise\"><a href=\"#JavaScript-Promise\" class=\"headerlink\" title=\"JavaScript Promise\"></a>JavaScript Promise</h3><p>“I Promise a Result!”</p>\n<p>“Producing code（生产代码）” 是需要一些时间的代码</p>\n<p>“Consuming code（消费代码）” 是必须等待结果的代码</p>\n<p>Promise 是一个 JavaScript 对象，它链接生成代码和消费代码</p>\n<h4 id=\"JavaScript-Promise-对象\"><a href=\"#JavaScript-Promise-对象\" class=\"headerlink\" title=\"JavaScript Promise 对象\"></a>JavaScript Promise 对象</h4><p>JavaScript Promise 对象包含生产代码和对消费代码的调用：</p>\n<h5 id=\"Promise-语法\"><a href=\"#Promise-语法\" class=\"headerlink\" title=\"Promise 语法\"></a>Promise 语法</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">myResolve, myReject</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// &quot;Producing Code&quot;（可能需要一些时间）</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">myResolve</span>(); <span class=\"comment\">// 成功时</span></span><br><span class=\"line\">  <span class=\"title function_\">myReject</span>();  <span class=\"comment\">// 出错时</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &quot;Consuming Code&quot; （必须等待一个兑现的承诺）</span></span><br><span class=\"line\">myPromise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"keyword\">function</span>(<span class=\"params\">value</span>) &#123; <span class=\"comment\">/* 成功时的代码 */</span> &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">function</span>(<span class=\"params\">error</span>) &#123; <span class=\"comment\">/* 出错时的代码 */</span> &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>当执行代码获得结果时，它应该调用两个回调之一：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">结果</th>\n<th align=\"left\">调用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">成功</td>\n<td align=\"left\">myResolve(result value)</td>\n</tr>\n<tr>\n<td align=\"left\">出错</td>\n<td align=\"left\">myReject(error object)</td>\n</tr>\n</tbody></table>\n<h5 id=\"Promise-对象属性\"><a href=\"#Promise-对象属性\" class=\"headerlink\" title=\"Promise 对象属性\"></a>Promise 对象属性</h5><p>Promise 对象支持两个属性：<em>state</em>(状态) 和 <em>result</em>。</p>\n<p>当 Promise 对象 “pending”（工作）时，结果是 undefined。</p>\n<p>当 Promise 对象 “fulfilled” 时，结果是一个值。</p>\n<p>当一个 Promise 对象是 “rejected” 时，结果是一个错误对象。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">myPromise.state</th>\n<th align=\"left\">myPromise.result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">“pending”</td>\n<td align=\"left\">undefined</td>\n</tr>\n<tr>\n<td align=\"left\">“fulfilled”</td>\n<td align=\"left\">结果值</td>\n</tr>\n<tr>\n<td align=\"left\">“rejected”</td>\n<td align=\"left\">error 对象</td>\n</tr>\n</tbody></table>\n<p>您无法访问 Promise 属性 state 和 result。</p>\n<p>您必须使用 Promise 方法来处理 Promise。</p>\n<h5 id=\"如何使用-Promise\"><a href=\"#如何使用-Promise\" class=\"headerlink\" title=\"如何使用 Promise\"></a>如何使用 Promise</h5><p>以下是使用 Promise 的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myPromise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"keyword\">function</span>(<span class=\"params\">value</span>) &#123; <span class=\"comment\">/* 代码成功时 */</span> &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">function</span>(<span class=\"params\">error</span>) &#123; <span class=\"comment\">/* 代码出错时 */</span> &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>Promise.then() 有两个参数，一个是成功时的回调，另一个是失败时的回调。</p>\n<p>两者都是可选的，因此您可以为成功或失败添加回调。</p>\n<h6 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myDisplayer</span>(<span class=\"params\">some</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = some;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">myResolve, myReject</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成代码（这可能需要一些时间）</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">myResolve</span>(<span class=\"string\">&quot;OK&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">myReject</span>(<span class=\"string\">&quot;Error&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">myPromise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"keyword\">function</span>(<span class=\"params\">value</span>) &#123;<span class=\"title function_\">myDisplayer</span>(value);&#125;,</span><br><span class=\"line\">  <span class=\"keyword\">function</span>(<span class=\"params\">error</span>) &#123;<span class=\"title function_\">myDisplayer</span>(error);&#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"JavaScript-Promise-实例\"><a href=\"#JavaScript-Promise-实例\" class=\"headerlink\" title=\"JavaScript Promise 实例\"></a>JavaScript Promise 实例</h5><p>为了演示 Promise 的使用，我们将使用上一章中的回调实例：</p>\n<h6 id=\"等待超时-1\"><a href=\"#等待超时-1\" class=\"headerlink\" title=\"等待超时\"></a>等待超时</h6><ul>\n<li><p>使用回调的例子 </p>\n<ul>\n<li><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;JavaScript SetTimeout()&lt;/h1&gt;\n\n&lt;p&gt;等待 3 秒（3000 毫秒）让此页面发生变化。&lt;/p&gt;\n\n&lt;h1 id=&quot;demo&quot;&gt;&lt;/h1&gt;\n\n&lt;script&gt;\n    //渲染页面3秒后将会调用myFunction函数\nsetTimeout(function() &#123; myFunction(&quot;I love You !!!&quot;); &#125;, 3000);\n//该函数负责将I love You !!!输出到id为demo的&lt;H1&gt;标签中\nfunction myFunction(value) &#123;\n  document.getElementById(&quot;demo&quot;).innerHTML = value;\n&#125;\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* 使用Promise的例子</span><br><span class=\"line\"></span><br><span class=\"line\">  * ```html</span><br><span class=\"line\">    &lt;!DOCTYPE html&gt;</span><br><span class=\"line\">    &lt;html&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;h1&gt;JavaScript Promise&lt;/h1&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;p&gt;等待 3 秒（3000 毫秒）让此页面发生变化。&lt;/p&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;h1 id=&quot;demo&quot;&gt;&lt;/h1&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        //在这里使用了我们的Promise</span><br><span class=\"line\">    const myPromise = new Promise(function(myResolve, myReject) &#123;</span><br><span class=\"line\">      setTimeout(function()&#123; myResolve(&quot;I love You !!&quot;); &#125;, 3000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    myPromise.then(function(value) &#123;</span><br><span class=\"line\">      document.getElementById(&quot;demo&quot;).innerHTML = value;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">    &lt;/html&gt;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"等待文件-1\"><a href=\"#等待文件-1\" class=\"headerlink\" title=\"等待文件\"></a>等待文件</h6><ul>\n<li><p>使用回调的例子</p>\n<ul>\n<li><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;JavaScript 回调&lt;/h1&gt;\n\n&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;\n\n&lt;script&gt;\nfunction myDisplayer(some) &#123;\n  document.getElementById(&quot;demo&quot;).innerHTML = some;\n&#125;\n\nfunction getFile(myCallback) &#123;\n  let req = new XMLHttpRequest();\n  req.open(&#39;GET&#39;, &quot;/demo/js/mycar.html&quot;);\n  req.onload = function() &#123;\n    if (req.status == 200) &#123;\n      myCallback(this.responseText);\n    &#125; else &#123;\n      myCallback(&quot;Error: &quot; + req.status);\n    &#125;\n  &#125;\n  req.send();\n&#125;\n\ngetFile(myDisplayer); \n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* 使用Promise的例子 </span><br><span class=\"line\"></span><br><span class=\"line\">  * ```html</span><br><span class=\"line\">    &lt;!DOCTYPE html&gt;</span><br><span class=\"line\">    &lt;html&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;h1&gt;JavaScript Promise&lt;/h1&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">    function myDisplayer(some) &#123;</span><br><span class=\"line\">      document.getElementById(&quot;demo&quot;).innerHTML = some;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //在这里使用了promise</span><br><span class=\"line\">    let myPromise = new Promise(function(myResolve, myReject) &#123;</span><br><span class=\"line\">      let req = new XMLHttpRequest();</span><br><span class=\"line\">      req.open(&#x27;GET&#x27;, &quot;/demo/js/mycar.html&quot;);</span><br><span class=\"line\">      req.onload = function() &#123;</span><br><span class=\"line\">        if (req.status == 200) &#123;</span><br><span class=\"line\">          myResolve(req.response);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          myReject(&quot;File not Found&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      req.send();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    myPromise.then(</span><br><span class=\"line\">      function(value) &#123;myDisplayer(value);&#125;,</span><br><span class=\"line\">      function(error) &#123;myDisplayer(error);&#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">    &lt;/html&gt;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"浏览器支持\"><a href=\"#浏览器支持\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h6><p>ECMAScript 2015，也称为 ES6，引入了 JavaScript Promise 对象。</p>\n<p>下表注明了首个完全支持 Promise 对象的浏览器版本：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Chrome</th>\n<th align=\"center\">IE</th>\n<th align=\"center\">Firefox</th>\n<th align=\"center\">Safari</th>\n<th align=\"center\">Opera</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Chrome 33</td>\n<td align=\"center\">Edge 12</td>\n<td align=\"center\">Firefox 29</td>\n<td align=\"center\">Safari 7.1</td>\n<td align=\"center\">Opera 20</td>\n</tr>\n<tr>\n<td align=\"center\">2014 年 2 月</td>\n<td align=\"center\">2015 年 7 月</td>\n<td align=\"center\">2014 年 4 月</td>\n<td align=\"center\">2014 年 9 月</td>\n<td align=\"center\">2014 年 3 月</td>\n</tr>\n</tbody></table>\n<h3 id=\"JavaScript-Async\"><a href=\"#JavaScript-Async\" class=\"headerlink\" title=\"JavaScript Async\"></a>JavaScript Async</h3><p>“async and await make promises easier to write”</p>\n<p><em>async</em> 使函数返回 Promise</p>\n<p><em>await</em> 使函数等待 Promise</p>\n<h4 id=\"Async-语法\"><a href=\"#Async-语法\" class=\"headerlink\" title=\"Async 语法\"></a>Async 语法</h4><p>函数前的关键字 <code>async</code> 使函数返回 promise：</p>\n<h5 id=\"实例1-2\"><a href=\"#实例1-2\" class=\"headerlink\" title=\"实例1\"></a>实例1</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>等同于：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以下是使用 Promise 的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">myFunction</span>().<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"keyword\">function</span>(<span class=\"params\">value</span>) &#123; <span class=\"comment\">/* 成功时的代码 */</span> &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">function</span>(<span class=\"params\">error</span>) &#123; <span class=\"comment\">/* 出错时的代码 */</span> &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"实例2-2\"><a href=\"#实例2-2\" class=\"headerlink\" title=\"实例2\"></a>实例2</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>JavaScript async / await<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">myDisplayer</span>(<span class=\"params\">some</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = some;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">//async 使函数返回promise</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\"></span>) &#123;<span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello&quot;</span>;&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">//在这里调用promise返回时的动作</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">myFunction</span>().<span class=\"title function_\">then</span>(</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">function</span>(<span class=\"params\">value</span>) &#123;<span class=\"title function_\">myDisplayer</span>(value);&#125;, <span class=\"comment\">//成功的回调</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">function</span>(<span class=\"params\">error</span>) &#123;<span class=\"title function_\">myDisplayer</span>(error);&#125; <span class=\"comment\">//失败的回调</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">);</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Await-语法\"><a href=\"#Await-语法\" class=\"headerlink\" title=\"Await 语法\"></a>Await 语法</h3><p>函数前的关键字 <code>await</code> 使函数等待 promise：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> value = <span class=\"keyword\">await</span> promise;</span><br></pre></td></tr></table></figure>\n\n<p><code>await</code> 关键字只能在 <code>async</code> 函数中使用。</p>\n<h4 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h4><h5 id=\"实例1-3\"><a href=\"#实例1-3\" class=\"headerlink\" title=\"实例1\"></a>实例1</h5><p>让我们慢慢来学习如何使用它。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>JavaScript async / await<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//使函数myDisplay返回Promise对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">myDisplay</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> myPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">myResolve, myReject</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">myResolve</span>(<span class=\"string\">&quot;I love You !!&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//等待Promise对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = <span class=\"keyword\">await</span> myPromise;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">myDisplay</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"等待超时-2\"><a href=\"#等待超时-2\" class=\"headerlink\" title=\"等待超时\"></a>等待超时</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>JavaScript async / await<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>请等待 3 秒（3000 毫秒）让此页面发生变化。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- async function myDisplay()：定义了一个名为myDisplay的异步函数。关键字async表明该函数内部包含异步操作，并且该函数会返回一个Promise对象。</span></span><br><span class=\"line\"><span class=\"comment\">在这个异步函数内部，首先创建了一个新的Promise对象myPromise。这个Promise对象接受一个函数作为参数，该函数有两个参数：myResolve和myReject，它们是用于解决（resolve）或拒绝（reject）Promise的回调函数。</span></span><br><span class=\"line\"><span class=\"comment\">在Promise构造函数中，使用了setTimeout模拟了一个异步操作，即在3秒（3000毫秒）后执行myResolve(&quot;I love You !!&quot;)。这意味着在3秒后，Promise会被标记为已解决（fulfilled），并传递字符串&quot;I love You !!&quot;作为结果。</span></span><br><span class=\"line\"><span class=\"comment\">接下来，document.getElementById(&quot;demo&quot;).innerHTML = await myPromise; 这一行代码是关键。这里使用了await关键字来等待myPromise的结果。await只能在async函数内部使用，它会使代码暂停执行，直到等待的Promise完成（resolve或reject）。在这个例子中，它会等待3秒，直到myPromise被解决，然后将解决的值（即&quot;I love You !!&quot;）赋给&lt;h1 id=&quot;demo&quot;&gt;元素的innerHTML，从而改变页面内容。--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">myDisplay</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> myPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">myResolve, myReject</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; <span class=\"title function_\">myResolve</span>(<span class=\"string\">&quot;I love You !!&quot;</span>); &#125;, <span class=\"number\">3000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = <span class=\"keyword\">await</span> myPromise;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">myDisplay</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"等待文件-2\"><a href=\"#等待文件-2\" class=\"headerlink\" title=\"等待文件\"></a>等待文件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>JavaScript async / await<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getFile</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> myPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">myResolve, myReject</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> req = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    req.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&quot;/demo/js/mycar.html&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    req.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">if</span> (req.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">myResolve</span>(req.<span class=\"property\">response</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">myResolve</span>(<span class=\"string\">&quot;File not Found&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    req.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = <span class=\"keyword\">await</span> myPromise;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">getFile</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Vue常用指令\"><a href=\"#Vue常用指令\" class=\"headerlink\" title=\"Vue常用指令\"></a>Vue常用指令</h2><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240504153103328.png\" alt=\"image-20240504153103328\"></p>\n<h2 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h2><ul>\n<li>概念:Asynchronous JavaScript And XML，异步的JavaScript和XML。</li>\n<li>作用:<ul>\n<li>AJAX 是开发者的梦想，因为您能够：<ul>\n<li>不刷新页面更新网页</li>\n<li>在页面加载后从服务器请求数据</li>\n<li>在页面加载后从服务器接收数据</li>\n<li>在后台向服务器发送数据</li>\n</ul>\n</li>\n<li>数据交换:通过Ajax可以给服务器发送请求，并获取服务器响应的数据。</li>\n<li>异步交互:可以在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术，如:搜索联想、用户名是否可用的校验等等。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Ajax实例\"><a href=\"#Ajax实例\" class=\"headerlink\" title=\"Ajax实例\"></a>Ajax实例</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span> <span class=\"comment\">&lt;!-- 设置文档编码 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span> <span class=\"comment\">&lt;!-- 适应移动设备 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Ajax实例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span> <span class=\"comment\">&lt;!-- 注意：应为id=&quot;demo&quot;而非class=&quot;demo&quot;以匹配JS中的getElementById --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>单击按钮，让Ajax改变这段文本<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;changeEdit()&quot;</span>&gt;</span>更改文本<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 定义一个函数，用于通过Ajax请求更改文本内容</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">function</span> <span class=\"title function_\">changeEdit</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 创建一个新的XMLHttpRequest对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> xhttp = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 设置请求完成后的回调函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            xhttp.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 当请求完成（readyState=4）且状态为成功（status=200）时，执行以下代码</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> == <span class=\"number\">4</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 使用响应文本替换页面中id为&quot;demo&quot;的元素的内容,注：this.responseText是在使用XMLHttpRequest对象进行Ajax请求时的一个属性。这个属性包含了从服务器返回的响应文本内容。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">responseText</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 初始化请求，设置请求类型、URL及异步标志（true表示异步）</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;ajax_info.txt&#x27;</span>, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 发送请求</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            xhttp.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240625165526714.png\" alt=\"image-20240625165526714\"></p>\n<h3 id=\"什么是-AJAX？\"><a href=\"#什么是-AJAX？\" class=\"headerlink\" title=\"什么是 AJAX？\"></a>什么是 AJAX？</h3><p>AJAX &#x3D; <em>A</em>synchronous <em>J</em>avaScript <em>A</em>nd <em>X</em>ML.</p>\n<p>AJAX 并非编程语言。</p>\n<p>AJAX 仅仅组合了：</p>\n<ul>\n<li>浏览器内建的 XMLHttpRequest 对象（从 web 服务器请求数据）</li>\n<li>JavaScript 和 HTML DOM（显示或使用数据）</li>\n</ul>\n<p>Ajax 是一个令人误导的名称。Ajax 应用程序可能使用 XML 来传输数据，但将数据作为纯文本或 JSON 文本传输也同样常见。</p>\n<p>Ajax 允许通过与场景后面的 Web 服务器交换数据来异步更新网页。这意味着可以更新网页的部分，而不需要重新加载整个页面。</p>\n<h3 id=\"AJAX-如何工作\"><a href=\"#AJAX-如何工作\" class=\"headerlink\" title=\"AJAX 如何工作\"></a>AJAX 如何工作</h3><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/ajax.gif\" alt=\"AJAX\"></p>\n<ol>\n<li>网页中发生一个事件（页面加载、按钮点击）</li>\n<li>由 JavaScript 创建 XMLHttpRequest 对象</li>\n<li>XMLHttpRequest 对象向 web 服务器发送请求</li>\n<li>服务器处理该请求</li>\n<li>服务器将响应发送回网页</li>\n<li>由 JavaScript 读取响应</li>\n<li>由 JavaScript 执行正确的动作（比如更新页面）</li>\n</ol>\n<h3 id=\"AJAX-XMLHttpRequest-对象\"><a href=\"#AJAX-XMLHttpRequest-对象\" class=\"headerlink\" title=\"AJAX - XMLHttpRequest 对象\"></a>AJAX - XMLHttpRequest 对象</h3><h4 id=\"XMLHttpRequest-对象是-AJAX-的基石。\"><a href=\"#XMLHttpRequest-对象是-AJAX-的基石。\" class=\"headerlink\" title=\"XMLHttpRequest 对象是 AJAX 的基石。\"></a><strong>XMLHttpRequest 对象是 AJAX 的基石。</strong></h4><ol>\n<li>创建 XMLHttpRequest 对象</li>\n<li>定义回调函数</li>\n<li>打开 XMLHttpRequest 对象</li>\n<li>向服务器发送请求</li>\n</ol>\n<h4 id=\"XMLHttpRequest-对象\"><a href=\"#XMLHttpRequest-对象\" class=\"headerlink\" title=\"XMLHttpRequest 对象\"></a>XMLHttpRequest 对象</h4><p>所有现代浏览器都支持 <em>XMLHttpRequest 对象</em>。</p>\n<p>XMLHttpRequest 对象可用于在后台与 Web 服务器交换数据。这意味着可以更新网页的部分内容，而无需重新加载整个页面。</p>\n<h5 id=\"创建-XMLHttpRequest-对象\"><a href=\"#创建-XMLHttpRequest-对象\" class=\"headerlink\" title=\"创建 XMLHttpRequest 对象\"></a>创建 XMLHttpRequest 对象</h5><p>所有现代浏览器（Chrome、Firefox、IE、Edge、Safari、Opera）都有内置的 <em>XMLHttpRequest 对象</em>。</p>\n<p>创建 XMLHttpRequest 对象的语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">variable = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"定义回调函数\"><a href=\"#定义回调函数\" class=\"headerlink\" title=\"定义回调函数\"></a>定义回调函数</h5><p>回调函数是作为参数传递给另一个函数的函数。</p>\n<p>在这种情况下，回调函数应包含响应准备就绪时要执行的代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhttp.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当响应准备就绪时要做什么</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"发送请求\"><a href=\"#发送请求\" class=\"headerlink\" title=\"发送请求\"></a>发送请求</h5><p>如需向服务器发送请求，您可以使用 XMLHttpRequest 对象的 <code>open()</code> 和 <code>send()</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;ajax_info.txt&quot;</span>);</span><br><span class=\"line\">xhttp.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 XMLHttpRequest 对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> xhttp = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义回调函数</span></span><br><span class=\"line\">xhttp.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 您可以在这里使用数据</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送请求</span></span><br><span class=\"line\">xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;ajax_info.txt&quot;</span>);</span><br><span class=\"line\">xhttp.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"XMLHttpRequest-对象方法\"><a href=\"#XMLHttpRequest-对象方法\" class=\"headerlink\" title=\"XMLHttpRequest 对象方法\"></a>XMLHttpRequest 对象方法</h4><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">new XMLHttpRequest()</td>\n<td align=\"left\">创建新的 XMLHttpRequest 对象。</td>\n</tr>\n<tr>\n<td align=\"left\">abort()</td>\n<td align=\"left\">取消当前请求。</td>\n</tr>\n<tr>\n<td align=\"left\">getAllResponseHeaders()</td>\n<td align=\"left\">返回头部信息。</td>\n</tr>\n<tr>\n<td align=\"left\">getResponseHeader()</td>\n<td align=\"left\">返回特定的头部信息。</td>\n</tr>\n<tr>\n<td align=\"left\">open(<em>method</em>, <em>url</em>, <em>async</em>, <em>user</em>, <em>psw</em>)</td>\n<td align=\"left\">规定请求。<em>method</em>：请求类型 GET 或 POST<em>url</em>：文件位置<em>async</em>：true（异步）或 false（同步）<em>user</em>：可选的用户名<em>psw</em>：可选的密码</td>\n</tr>\n<tr>\n<td align=\"left\">send()</td>\n<td align=\"left\">向服务器发送请求，用于 GET 请求。</td>\n</tr>\n<tr>\n<td align=\"left\">send(string)</td>\n<td align=\"left\">向服务器发送请求，用于 POST 请求。</td>\n</tr>\n<tr>\n<td align=\"left\">setRequestHeader()</td>\n<td align=\"left\">将标签&#x2F;值对添加到要发送的标头。</td>\n</tr>\n</tbody></table>\n<h4 id=\"XMLHttpRequest-对象属性\"><a href=\"#XMLHttpRequest-对象属性\" class=\"headerlink\" title=\"XMLHttpRequest 对象属性\"></a>XMLHttpRequest 对象属性</h4><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">onload</td>\n<td align=\"left\">定义接收到（加载）请求时要调用的函数。</td>\n</tr>\n<tr>\n<td align=\"left\">onreadystatechange</td>\n<td align=\"left\">定义当 readyState 属性发生变化时调用的函数。</td>\n</tr>\n<tr>\n<td align=\"left\">readyState</td>\n<td align=\"left\">保存 XMLHttpRequest 的状态。0：请求未初始化1：服务器连接已建立2：请求已收到3：正在处理请求4：请求已完成且响应已就绪</td>\n</tr>\n<tr>\n<td align=\"left\">responseText</td>\n<td align=\"left\">以字符串形式返回响应数据。</td>\n</tr>\n<tr>\n<td align=\"left\">responseXML</td>\n<td align=\"left\">以 XML 数据返回响应数据。</td>\n</tr>\n<tr>\n<td align=\"left\">status</td>\n<td align=\"left\">返回请求的状态号200: “OK”403: “Forbidden”404: “Not Found”如需完整列表请访问 <a href=\"https://www.w3school.com.cn/tags/html_ref_httpmessages.asp\">Http 消息参考手册</a></td>\n</tr>\n<tr>\n<td align=\"left\">statusText</td>\n<td align=\"left\">返回状态文本（比如 “OK” 或 “Not Found”）</td>\n</tr>\n</tbody></table>\n<h5 id=\"onload-属性\"><a href=\"#onload-属性\" class=\"headerlink\" title=\"onload 属性\"></a>onload 属性</h5><p>使用 XMLHttpRequest 对象时，您可以定义一个回调函数，以便在请求收到答复时执行。</p>\n<p>请在 XMLHttpRequest 对象的 <code>onload</code> 属性中定义该函数：</p>\n<h6 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhttp.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">responseText</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;ajax_info.txt&quot;</span>);</span><br><span class=\"line\">xhttp.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多个回调函数\"><a href=\"#多个回调函数\" class=\"headerlink\" title=\"多个回调函数\"></a>多个回调函数</h5><p>如果网站中有多个 AJAX 任务，则应创建一个执行 XMLHttpRequest 对象的函数，并为每个 AJAX 任务创建一个回调函数。</p>\n<p>函数调用应包含 URL 以及响应准备就绪时要调用的函数。</p>\n<h6 id=\"实例-5\"><a href=\"#实例-5\" class=\"headerlink\" title=\"实例\"></a>实例</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">loadDoc</span>(<span class=\"string\">&quot;url-1&quot;</span>, myFunction1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">loadDoc</span>(<span class=\"string\">&quot;url-2&quot;</span>, myFunction2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loadDoc</span>(<span class=\"params\">url, cFunction</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> xhttp = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">  xhttp.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;<span class=\"title function_\">cFunction</span>(<span class=\"variable language_\">this</span>);&#125;</span><br><span class=\"line\">  xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, url);</span><br><span class=\"line\">  xhttp.<span class=\"title function_\">send</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction1</span>(<span class=\"params\">xhttp</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里是动作</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction2</span>(<span class=\"params\">xhttp</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里是动作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>顺带一提，上面的this指的是什么呢？其实this就是如下图所示，是一个XMLHttpRequest对象</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240625171203531.png\" alt=\"image-20240625171203531\"></p>\n<h5 id=\"onreadystatechange-属性\"><a href=\"#onreadystatechange-属性\" class=\"headerlink\" title=\"onreadystatechange 属性\"></a>onreadystatechange 属性</h5><p><code>readyState</code> 属性保存 XMLHttpRequest 的状态。</p>\n<p><code>onreadystatechange</code> 属性定义了一个回调函数，当 readyState 改变时执行该函数。</p>\n<p><code>status</code> 属性和 <code>statusText</code> 属性保存 XMLHttpRequest 对象的状态。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">onreadystatechange</td>\n<td align=\"left\">定义当 readyState 属性改变时调用的函数。</td>\n</tr>\n<tr>\n<td align=\"left\">readyState</td>\n<td align=\"left\">保存 XMLHttpRequest 的状态。0：请求未初始化1：服务器连接已建立2：请求已收到3：正在处理请求4：请求已完成且响应已就绪</td>\n</tr>\n<tr>\n<td align=\"left\">status</td>\n<td align=\"left\">返回请求的状态号200: “OK”403: “Forbidden”404: “Not Found”如需完整列表请访问 <a href=\"https://www.w3school.com.cn/tags/html_ref_httpmessages.asp\">Http 消息参考手册</a></td>\n</tr>\n<tr>\n<td align=\"left\">statusText</td>\n<td align=\"left\">返回状态文本（比如 “OK” 或 “Not Found”）。</td>\n</tr>\n</tbody></table>\n<p>每次 readyState 改变时都会调用 onreadystatechange 函数。</p>\n<p>当 readyState 为 <code>4</code> 且 status 为 <code>200</code> 时，响应就绪：</p>\n<h6 id=\"实例-6\"><a href=\"#实例-6\" class=\"headerlink\" title=\"实例\"></a>实例</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loadDoc</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> xhttp = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">  xhttp.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> == <span class=\"number\">4</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> =</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">responseText</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;ajax_info.txt&quot;</span>);</span><br><span class=\"line\">  xhttp.<span class=\"title function_\">send</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>onreadystatechange 事件被触发了四次（1-4），每次 readyState 变化一次。</p>\n<h4 id=\"XMLHttpRequest-对象用于同服务器交换数据。\"><a href=\"#XMLHttpRequest-对象用于同服务器交换数据。\" class=\"headerlink\" title=\"XMLHttpRequest 对象用于同服务器交换数据。\"></a><strong>XMLHttpRequest 对象用于同服务器交换数据。</strong></h4><h5 id=\"向服务器发送请求\"><a href=\"#向服务器发送请求\" class=\"headerlink\" title=\"向服务器发送请求\"></a>向服务器发送请求</h5><p>如需向服务器发送请求，我们使用 XMLHttpRequest 对象的 <code>open()</code> 和 <code>send()</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;ajax_info.txt&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhttp.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">open(<em>method</em>, <em>url</em>, <em>async</em>)</td>\n<td align=\"left\">规定请求的类型<em>method</em>：请求的类型：GET 还是 POST<em>url</em>：服务器（文件）位置<em>async</em>：true（异步）或 false（同步）</td>\n</tr>\n<tr>\n<td align=\"left\">send()</td>\n<td align=\"left\">向服务器发送请求（用于 GET）</td>\n</tr>\n<tr>\n<td align=\"left\">send(<em>string</em>)</td>\n<td align=\"left\">向服务器发送请求（用于 POST）</td>\n</tr>\n</tbody></table>\n<h5 id=\"GET-还是-POST？\"><a href=\"#GET-还是-POST？\" class=\"headerlink\" title=\"GET 还是 POST？\"></a>GET 还是 POST？</h5><p>GET 比 POST 更简单更快，可用于大多数情况下。</p>\n<p>不过，请在以下情况始终使用 POST：</p>\n<ul>\n<li>缓存文件不是选项（更新服务器上的文件或数据库）</li>\n<li>向服务器发送大量数据（POST 无大小限制）</li>\n<li>发送用户输入（可包含未知字符），POST 比 GET 更强大更安全</li>\n</ul>\n<h5 id=\"GET-请求\"><a href=\"#GET-请求\" class=\"headerlink\" title=\"GET 请求\"></a>GET 请求</h5><p>一条简单的 GET 请求：</p>\n<h6 id=\"实例1-4\"><a href=\"#实例1-4\" class=\"headerlink\" title=\"实例1\"></a>实例1</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;demo_get.asp&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhttp.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<p>在上面的例子中，您可能会获得一个缓存的结果。为了避免此情况，请向 URL 添加一个唯一的 ID：</p>\n<h6 id=\"实例2-3\"><a href=\"#实例2-3\" class=\"headerlink\" title=\"实例2\"></a>实例2</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;demo_get.asp?t=&quot;</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>(), <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhttp.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<p>如果您需要用 GET 方法来发送信息，请向 URL 添加这些信息：</p>\n<h6 id=\"实例3\"><a href=\"#实例3\" class=\"headerlink\" title=\"实例3\"></a>实例3</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//携带query形式的参数</span></span><br><span class=\"line\">xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;demo_get2.asp?fname=Bill&amp;lname=Gates&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhttp.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"POST-请求\"><a href=\"#POST-请求\" class=\"headerlink\" title=\"POST 请求\"></a>POST 请求</h5><p>一条简单的 POST 请求：</p>\n<h6 id=\"实例1-5\"><a href=\"#实例1-5\" class=\"headerlink\" title=\"实例1\"></a>实例1</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;demo_post.asp&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhttp.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<p>如需像 HTML 表单那样 POST 数据，请通过 <code>setRequestHeader()</code> 添加一个 HTTP 头部。请在 <code>send()</code> 方法中规定您需要发送的数据：</p>\n<h6 id=\"实例2-4\"><a href=\"#实例2-4\" class=\"headerlink\" title=\"实例2\"></a>实例2</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;ajax_test.asp&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhttp.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Content-type&quot;</span>, <span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class=\"line\">xhttp.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;fname=Bill&amp;lname=Gates&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">setRequestHeader(<em>header</em>, <em>value</em>)</td>\n<td align=\"left\">向请求添加 HTTP 头部<em>header</em>：规定头部名称<em>value</em>：规定头部值</td>\n</tr>\n</tbody></table>\n<h4 id=\"url-服务器上的文件\"><a href=\"#url-服务器上的文件\" class=\"headerlink\" title=\"url - 服务器上的文件\"></a><em>url</em> - 服务器上的文件</h4><p>open() 方法的 <em>url</em> 参数，是服务器上文件的地址：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;ajax_test.asp&quot;</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<p>该文件可以是任何类型的文件，如 .txt 和 .xml，或服务器脚本文件，如 .asp 和 .php（它们可以在发送回响应之前在服务器执行操作）。</p>\n<h4 id=\"异步-true-还是-false？\"><a href=\"#异步-true-还是-false？\" class=\"headerlink\" title=\"异步 - true 还是 false？\"></a>异步 - true 还是 false？</h4><p>如需异步发送请求，<code>open()</code> 方法的 <em>async</em> 参数必须设置为 <code>true</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;ajax_test.asp&quot;</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<p>发送异步请求对 web 开发人员来说是一个巨大的进步。服务器上执行的许多任务都非常耗时。在 AJAX 之前，此操作可能会导致应用程序挂起或停止。</p>\n<p>通过异步发送，JavaScript 不必等待服务器响应，而是可以：</p>\n<ul>\n<li>在等待服务器响应时执行其他脚本</li>\n<li>当响应就绪时处理响应</li>\n</ul>\n<h4 id=\"onreadystatechange-属性-1\"><a href=\"#onreadystatechange-属性-1\" class=\"headerlink\" title=\"onreadystatechange 属性\"></a>onreadystatechange 属性</h4><p>通过 XMLHttpRequest 对象，您可以定义当请求接收到应答时所执行的函数。</p>\n<p>这个函数是在 XMLHttpResponse 对象的 <code>onreadystatechange</code> 属性中定义的：</p>\n<h5 id=\"实例-7\"><a href=\"#实例-7\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhttp.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> == <span class=\"number\">4</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">responseText</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;ajax_info.txt&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhttp.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"同步请求\"><a href=\"#同步请求\" class=\"headerlink\" title=\"同步请求\"></a>同步请求</h4><p>如需执行同步的请求，请把 <code>open()</code> 方法中的第三个参数设置为 <code>false</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;ajax_info.txt&quot;</span>, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p>有时 async &#x3D; false 用于快速测试。你也会在更老的 JavaScript 代码中看到同步请求。</p>\n<p>由于代码将等待服务器完成，所以不需要 onreadystatechange 函数：</p>\n<h5 id=\"实例-8\"><a href=\"#实例-8\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;ajax_info.txt&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">xhttp.<span class=\"title function_\">send</span>();</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = xhttp.<span class=\"property\">responseText</span>;</span><br></pre></td></tr></table></figure>\n\n<p>我们不推荐同步的 XMLHttpRequest (async &#x3D; false)，因为 JavaScript 将停止执行直到服务器响应就绪。如果服务器繁忙或缓慢，应用程序将挂起或停止。</p>\n<p>同步 XMLHttpRequest 正在从 Web 标准中移除，但是这个过程可能需要很多年。</p>\n<p>现代开发工具被鼓励对使用同步请求做出警告，并且当这种情况发生时，可能会抛出 InvalidAccessError 异常。</p>\n<p>同步和异步：</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240504154717543.png\" alt=\"image-20240504154717543\"></p>\n<h3 id=\"AJAX-服务器响应\"><a href=\"#AJAX-服务器响应\" class=\"headerlink\" title=\"AJAX - 服务器响应\"></a>AJAX - 服务器响应</h3><h4 id=\"onreadystatechange-属性-2\"><a href=\"#onreadystatechange-属性-2\" class=\"headerlink\" title=\"onreadystatechange 属性\"></a>onreadystatechange 属性</h4><p><code>readyState</code> 属性存留 XMLHttpRequest 的状态。</p>\n<p><code>onreadystatechange</code> 属性定义当 readyState 发生变化时执行的函数。</p>\n<p><code>status</code> 属性和 <code>statusText</code> 属性存有 XMLHttpRequest 对象的状态。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">onreadystatechange</td>\n<td align=\"left\">定义了当 readyState 属性发生改变时所调用的函数。</td>\n</tr>\n<tr>\n<td align=\"left\">readyState</td>\n<td align=\"left\">保存了 XMLHttpRequest 的状态。0: 请求未初始化1: 服务器连接已建立2: 请求已接收3: 正在处理请求4: 请求已完成且响应已就绪</td>\n</tr>\n<tr>\n<td align=\"left\">status</td>\n<td align=\"left\">200: “OK”403: “Forbidden”404: “Page not found”如需完整列表，请访问 <a href=\"https://www.w3school.com.cn/tags/html_ref_httpmessages.asp\">Http 消息参考手册</a></td>\n</tr>\n<tr>\n<td align=\"left\">statusText</td>\n<td align=\"left\">返回状态文本（例如 “OK” 或 “Not Found”）</td>\n</tr>\n</tbody></table>\n<p><em>每当</em> readyState 发生变化时就会调用 onreadystatechange 函数。当 <code>readyState</code> 为 <code>4</code>，<code>status</code> 为 <code>200</code> 时，响应就绪：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>XMLHttpRequest 对象<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;loadDoc()&quot;</span>&gt;</span>更改内容<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">loadDoc</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">var</span> xhttp = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  xhttp.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> == <span class=\"number\">4</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> =</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">responseText</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;/demo/js/ajax_info.txt&quot;</span>, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  xhttp.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>注释：</strong><code>onreadystatechange</code> 被触发五次（0-4），每次 <code>readyState</code> 都发生变化。</p>\n<p>回调函数是一种作为参数被传递到另一个函数的函数。</p>\n<p>如果您的网站中有多个 AJAX 任务，那么您应该创建一个执行 XMLHttpRequest 对象的函数，以及一个供每个 AJAX 任务的回调函数。</p>\n<p>该函数应当包含 URL 以及当响应就绪时调用的函数。</p>\n<h5 id=\"实例-9\"><a href=\"#实例-9\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">loadDoc</span>(<span class=\"string\">&quot;url-1&quot;</span>, myFunction1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">loadDoc</span>(<span class=\"string\">&quot;url-2&quot;</span>, myFunction2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loadDoc</span>(<span class=\"params\">url, cFunction</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> xhttp;</span><br><span class=\"line\">  xhttp = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">  xhttp.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> == <span class=\"number\">4</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">cFunction</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  xhttp.<span class=\"title function_\">send</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction1</span>(<span class=\"params\">xhttp</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 行动在这里</span></span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction2</span>(<span class=\"params\">xhttp</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 行动在这里</span></span><br><span class=\"line\"> &#125; </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"服务器响应属性\"><a href=\"#服务器响应属性\" class=\"headerlink\" title=\"服务器响应属性\"></a>服务器响应属性</h4><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">responseText</td>\n<td align=\"left\">获取字符串形式的响应数据</td>\n</tr>\n<tr>\n<td align=\"left\">responseXML</td>\n<td align=\"left\">获取 XML 数据形式的响应数据</td>\n</tr>\n</tbody></table>\n<h5 id=\"responseText-属性\"><a href=\"#responseText-属性\" class=\"headerlink\" title=\"responseText 属性\"></a>responseText 属性</h5><p><code>responseText</code> 属性以 JavaScript 字符串的形式返回服务器响应，因此您可以这样使用它：</p>\n<h6 id=\"实例-10\"><a href=\"#实例-10\" class=\"headerlink\" title=\"实例\"></a>实例</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = xhttp.<span class=\"property\">responseText</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"responseXML-属性\"><a href=\"#responseXML-属性\" class=\"headerlink\" title=\"responseXML 属性\"></a>responseXML 属性</h5><p>XML HttpRequest 对象有一个內建的 XML 解析器。</p>\n<p><code>ResponseXML</code> 属性以 XML DOM 对象返回服务器响应。</p>\n<p>使用此属性，您可以把响应<em>解析</em>为 XML DOM 对象：</p>\n<h6 id=\"实例-11\"><a href=\"#实例-11\" class=\"headerlink\" title=\"实例\"></a>实例</h6><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>XMLHttpRequest 对象<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">var</span> xhttp, xmlDoc, txt, x, i;</span></span><br><span class=\"line\"><span class=\"language-javascript\">xhttp = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">xhttp.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> == <span class=\"number\">4</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    xmlDoc = <span class=\"variable language_\">this</span>.<span class=\"property\">responseXML</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    txt = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    x = xmlDoc.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;ARTIST&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; x.<span class=\"property\">length</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      txt = txt + x[i].<span class=\"property\">childNodes</span>[<span class=\"number\">0</span>].<span class=\"property\">nodeValue</span> + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = txt;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;music_list.xml&quot;</span>, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">xhttp.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240625174125862.png\" alt=\"image-20240625174125862\"></p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240625174147547.png\" alt=\"image-20240625174147547\"></p>\n<h3 id=\"服务器响应方法\"><a href=\"#服务器响应方法\" class=\"headerlink\" title=\"服务器响应方法\"></a>服务器响应方法</h3><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">getResponseHeader()</td>\n<td align=\"left\">从服务器返回特定的头部信息</td>\n</tr>\n<tr>\n<td align=\"left\">getAllResponseHeaders()</td>\n<td align=\"left\">从服务器返回所有头部信息</td>\n</tr>\n</tbody></table>\n<h4 id=\"getAllResponseHeaders-方法\"><a href=\"#getAllResponseHeaders-方法\" class=\"headerlink\" title=\"getAllResponseHeaders() 方法\"></a>getAllResponseHeaders() 方法</h4><p><code>getAllResponseHeaders()</code> 方法返回所有来自服务器响应的头部信息。</p>\n<h5 id=\"实例-12\"><a href=\"#实例-12\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhttp = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">xhttp.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> == <span class=\"number\">4</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getAllResponseHeaders</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getResponseHeader-方法\"><a href=\"#getResponseHeader-方法\" class=\"headerlink\" title=\"getResponseHeader() 方法\"></a>getResponseHeader() 方法</h4><p><code>getResponseHeader()</code> 方法返回来自服务器响应的特定头部信息。</p>\n<h5 id=\"实例-13\"><a href=\"#实例-13\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhttp = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">xhttp.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> == <span class=\"number\">4</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getResponseHeader</span>(<span class=\"string\">&quot;Last-Modified&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;ajax_info.txt&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhttp.<span class=\"title function_\">send</span>(); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AJAX-可用于同-XML-文件进行交互式通信。\"><a href=\"#AJAX-可用于同-XML-文件进行交互式通信。\" class=\"headerlink\" title=\"AJAX 可用于同 XML 文件进行交互式通信。\"></a><strong>AJAX 可用于同 XML 文件进行交互式通信。</strong></h3><p>实例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">   </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;loadDoc()&quot;</span>&gt;</span>获取CD<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> loadDoc = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> xhttp = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//调用响应准备就绪时的函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhttp.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> == <span class=\"number\">4</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> ==<span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//调用回调函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title class_\">MyFunction</span>(<span class=\"variable language_\">this</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&#x27;music_list.xml&#x27;</span>,<span class=\"literal\">true</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhttp.<span class=\"title function_\">send</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">MyFunction</span>(<span class=\"params\">xml</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> i;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xml);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> xmlDoc = xml.<span class=\"property\">responseXML</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xmlDoc);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> table = <span class=\"string\">&#x27;&lt;tr&gt;&lt;th&gt;艺术家&lt;/th&gt;&lt;th&gt;曲目&lt;/th&gt;&lt;/tr&gt;&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> x = xmlDoc.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;TRACK&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; x.<span class=\"property\">length</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">       <span class=\"comment\">//通过拼接字符串来完成表结构的构建</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        table += <span class=\"string\">&#x27;&lt;tr&gt;&lt;td&gt;&#x27;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">       x[i].<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;ARTIST&quot;</span>)[<span class=\"number\">0</span>].<span class=\"property\">childNodes</span>[<span class=\"number\">0</span>].<span class=\"property\">nodeValue</span> + <span class=\"string\">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">        x[i].<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;TITLE&#x27;</span>)[<span class=\"number\">0</span>].<span class=\"property\">childNodes</span>[<span class=\"number\">0</span>].<span class=\"property\">nodeValue</span> +<span class=\"string\">&#x27;&lt;/td&gt;&lt;/tr&gt;&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#demo&quot;</span>).<span class=\"property\">innerHTML</span> = table;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240625181731222.png\" alt=\"image-20240625181731222\"></p>\n<h4 id=\"XML-应用程序\"><a href=\"#XML-应用程序\" class=\"headerlink\" title=\"XML 应用程序\"></a>XML 应用程序</h4><p><strong>本章演示使用 XML、HTTP、DOM 以及 JavaScript 的 HTML 应用程序。</strong></p>\n<h5 id=\"在-HTML-div-元素中显示第一首曲子\"><a href=\"#在-HTML-div-元素中显示第一首曲子\" class=\"headerlink\" title=\"在 HTML div 元素中显示第一首曲子\"></a>在 HTML div 元素中显示第一首曲子</h5><p>本例使用一个函数在 id&#x3D;”displayMUSIC” 的 HTML 元素中显示第一首歌曲：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>displayMusic<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">displayMusic</span>(<span class=\"number\">0</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">displayMusic</span>(<span class=\"params\">i</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> xhttp = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhttp.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> == <span class=\"number\">4</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> == <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title class_\">MyFunction</span>(<span class=\"variable language_\">this</span>,i)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;Get&#x27;</span>,<span class=\"string\">&#x27;music_list.xml&#x27;</span>,<span class=\"literal\">true</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhttp.<span class=\"title function_\">send</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">   <span class=\"keyword\">function</span>  <span class=\"title function_\">MyFunction</span>(<span class=\"params\">xml,i</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> ul = <span class=\"string\">&#x27;&lt;ul&gt;&lt;/ul&gt;&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> responseObj = xml.<span class=\"property\">responseXML</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> x = responseObj.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;TRACK&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ul =    ul+ <span class=\"string\">&#x27;&lt;li&gt;&#x27;</span> + x[i].<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;TITLE&#x27;</span>)[<span class=\"number\">0</span>].<span class=\"property\">childNodes</span>[<span class=\"number\">0</span>].<span class=\"property\">nodeValue</span> + <span class=\"string\">&#x27;&lt;/li&gt;&#x27;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"string\">&#x27;&lt;li&gt;&#x27;</span> + x[i].<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;ARTIST&#x27;</span>)[<span class=\"number\">0</span>].<span class=\"property\">childNodes</span>[<span class=\"number\">0</span>].<span class=\"property\">nodeValue</span> + <span class=\"string\">&#x27;&lt;/li&gt;&#x27;</span> </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = ul;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x[i].<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;TITLE&#x27;</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">   &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240625185731110.png\" alt=\"image-20240625185731110\"></p>\n<h5 id=\"在曲目之间导航\"><a href=\"#在曲目之间导航\" class=\"headerlink\" title=\"在曲目之间导航\"></a>在曲目之间导航</h5><p>如需在上例中的曲目间导航，请添加 next() 和 previous() 函数：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>displayMusic<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;next()&quot;</span>&gt;</span>下一首歌曲<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;previous()&quot;</span>&gt;</span>上一首歌曲<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">displayMusic</span>(<span class=\"number\">0</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">displayMusic</span>(<span class=\"params\">i</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> xhttp = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhttp.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> == <span class=\"number\">4</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> == <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title class_\">MyFunction</span>(<span class=\"variable language_\">this</span>,i)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhttp.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;Get&#x27;</span>,<span class=\"string\">&#x27;music_list.xml&#x27;</span>,<span class=\"literal\">true</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhttp.<span class=\"title function_\">send</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">   <span class=\"keyword\">function</span>  <span class=\"title function_\">MyFunction</span>(<span class=\"params\">xml,i</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> ul = <span class=\"string\">&#x27;&lt;ul&gt;&lt;/ul&gt;&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> responseObj = xml.<span class=\"property\">responseXML</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> x = responseObj.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;TRACK&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        len = x.<span class=\"property\">length</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ul =    ul+ <span class=\"string\">&#x27;&lt;li&gt;&#x27;</span> + x[i].<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;TITLE&#x27;</span>)[<span class=\"number\">0</span>].<span class=\"property\">childNodes</span>[<span class=\"number\">0</span>].<span class=\"property\">nodeValue</span> + <span class=\"string\">&#x27;&lt;/li&gt;&#x27;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"string\">&#x27;&lt;li&gt;&#x27;</span> + x[i].<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;ARTIST&#x27;</span>)[<span class=\"number\">0</span>].<span class=\"property\">childNodes</span>[<span class=\"number\">0</span>].<span class=\"property\">nodeValue</span> + <span class=\"string\">&#x27;&lt;/li&gt;&#x27;</span> </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = ul;</span></span><br><span class=\"line\"><span class=\"language-javascript\">   &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">   <span class=\"keyword\">function</span> <span class=\"title function_\">next</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//下一首，除非到达最后一首停下，由于len =x.length，当 i = len-1时，比如一共8首歌，当i=7时，即是最后一首，这时7 = 8-1故不再执行，并且到达了最后一首歌的位置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span>(i &lt; len -<span class=\"number\">1</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        i++;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">displayMusic</span>(i)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">   &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">   <span class=\"keyword\">function</span> <span class=\"title function_\">previous</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"comment\">//当i=0时，也就是位于第一首歌的位置时，上一首是不管事的只能下一首</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    i--;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">displayMusic</span>(i)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">   &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Axios\"><a href=\"#Axios\" class=\"headerlink\" title=\"Axios\"></a>Axios</h3><p>基础语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//请求方式</span></span><br><span class=\"line\">    <span class=\"attr\">method</span>:</span><br><span class=\"line\">    <span class=\"comment\">//请求地址</span></span><br><span class=\"line\">    <span class=\"attr\">url</span>:</span><br><span class=\"line\">    <span class=\"comment\">//请求参数</span></span><br><span class=\"line\">    <span class=\"attr\">data</span>:&#123;<span class=\"comment\">/*post求情用data*/</span>&#125;</span><br><span class=\"line\">    <span class=\"attr\">params</span>:&#123;<span class=\"comment\">/*get请求用params*/</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">//回调函数</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">loh</span>(res.<span class=\"property\">data</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Vue路由\"><a href=\"#Vue路由\" class=\"headerlink\" title=\"Vue路由\"></a>Vue路由</h2><ul>\n<li><p>介绍: Vue Router 是 Vue 的官方路由。</p>\n</li>\n<li><p>组成:</p>\n<ul>\n<li>VueRouter:路由器类，根据路由请求在路由视图中动态渲染选中的组件。</li>\n<li><router-link>：请求链接组件，浏览器会解析成<a>。</a></router-link></li>\n<li><router-view>：动态视图组件，用来渲染展示与路由路径对应的组件。</router-view></li>\n</ul>\n</li>\n<li><p>图示：</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240505153439121.png\" alt=\"image-20240505153439121\"></p>\n</li>\n</ul>\n<h2 id=\"部署——nginx服务器\"><a href=\"#部署——nginx服务器\" class=\"headerlink\" title=\"部署——nginx服务器\"></a>部署——nginx服务器</h2><ul>\n<li>部署：<ul>\n<li>将打包好的dist文件里面的内容放在nginx目录下的html文件夹下。</li>\n<li>启动nginx即可</li>\n</ul>\n</li>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240505154702311.png\" alt=\"image-20240505154702311\"></li>\n</ul>\n<h2 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h2><ul>\n<li><p>Maven是apache旗下的一个开源项目，是一款用于管理和构建java项目的工具。</p>\n</li>\n<li><p>maven的作用：</p>\n<ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240505155028692.png\" alt=\"image-20240505155028692\"></li>\n</ul>\n</li>\n<li><p>仓库:用于存储资源，管理各种jar包。</p>\n<ul>\n<li>本地仓库:自己计算机上的一个目录。</li>\n<li>中央仓库:由Maven团队维护的全球唯一的。仓库地址:<a href=\"https://repo1.maven.qrg/maven2/\">https://repo1.maven.qrg/maven2/</a></li>\n<li>远程仓库(私服):一般由公司团队搭建的私有仓库。</li>\n</ul>\n</li>\n<li><p>maven中的坐标：</p>\n<ul>\n<li>maven中的坐标是资源的唯一标识，<strong>通过该坐标可以唯一定位资源位置。</strong></li>\n<li>使用坐标来定义项目或引入项目中需要的依赖。</li>\n</ul>\n</li>\n<li><p>Maven 坐标主要组成：</p>\n<ul>\n<li>groupld:定义当前Maven项目隶属组织名称(通常是域名反写，例如:com.itheima)。</li>\n<li>artifactld:定义当前Maven项目名称(通常是模块名称，例如 order-service、goods-service)。</li>\n<li>version:定义当前项目版本号</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240505164733500.png\" alt=\"image-20240505164733500\"></p>\n<ul>\n<li><p>依赖传递</p>\n<ul>\n<li>依赖具有传递性</li>\n<li>直接依赖:在当前项目中通过依赖配置建立的依赖关系。</li>\n<li>间接依赖:被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源</li>\n</ul>\n</li>\n<li><p>排除依赖：</p>\n<ul>\n<li>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本。</li>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240505165557223.png\" alt=\"image-20240505165557223\"></li>\n</ul>\n</li>\n</ul>\n<p>上面通过标签<exclusions>来排除。</exclusions></p>\n<ul>\n<li><p>依赖范围：依赖的jar包在默认情况下可以再任何地方使用。但是我们通过<scope>标签可以指定它的作用范围。</scope></p>\n<ul>\n<li>主程序范围有效。(main文件夹范围内)</li>\n<li>测试程序范围有效。(test文件夹范围内)</li>\n<li>是否参与打包运行。(package指令范围内)</li>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240505170021537.png\" alt=\"image-20240505170021537\"></li>\n</ul>\n</li>\n<li><p>maven的生命周期：</p>\n<ul>\n<li>clean：清理。</li>\n<li>compile：编译</li>\n<li>test：测试</li>\n<li>package：打包</li>\n<li>install：安装(将打好的jar包安装到本地仓库)</li>\n</ul>\n</li>\n<li><p>官网：<a href=\"https://spring.io/\">https://spring.io</a></p>\n</li>\n<li><p>Spring形成一种开发生态圈，Spring提供了若干个子项目，每个项目用于完成特定功能。</p>\n<ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240505172103140.png\" alt=\"image-20240505172103140\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h2><h3 id=\"Servlet简介\"><a href=\"#Servlet简介\" class=\"headerlink\" title=\"Servlet简介\"></a>Servlet简介</h3><ul>\n<li>Servlet就是sun公司开发动态web的一门技术</li>\n<li>Sun在这些API中提供了一个接口叫做 ：Servlet，如果你想开发一个Servlet程序，只需要完成两个步骤：<ul>\n<li>编写一个类实现Servlet接口</li>\n<li>把开发好的Java类部署到web服务器中</li>\n</ul>\n</li>\n</ul>\n<p><strong>把实现了Servlet接口的java程序叫做Servlet</strong></p>\n<h3 id=\"HelloServlet\"><a href=\"#HelloServlet\" class=\"headerlink\" title=\"HelloServlet\"></a>HelloServlet</h3><p>Servlet接口有两个默认的实现类：HttpServlet，GenericServlet</p>\n<p>1.构建一个Maven项目，删掉里面的src目录，以后就可以在这个项目里面建立多个Moduel(模块)，这个空的就是主工程</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240617193050100.png\" alt=\"image-20240617193050100\"></p>\n<p><strong>子工程的项目结构</strong></p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240617193953130.png\" alt=\"image-20240617193953130\"></p>\n<p>2.关于Maven父子工程的理解</p>\n<p>父项目中会有一个</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>Servlet-01<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>子项目中会有</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>JavaWeb-02-Servlet<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>4.编写一个Servlet程序</p>\n<p>​\t1.编写一个普通类</p>\n<p>​\t2.实现Servlet接口，这里我们直接继承HttpServlet</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240617194420914.png\" alt=\"image-20240617194420914\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.li;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//由于Get或者post只是请求实现方式不同，可以相互调用，业务逻辑一样</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">PrintWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> resp.getWriter(); <span class=\"comment\">//响应流</span></span><br><span class=\"line\">        writer.print(<span class=\"string\">&quot;Hello Servlet&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">      doGet(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.编写Servlet的映射</p>\n<p>​\t为什么要映射：我们写Java程序，但是要通过浏览器访问，而浏览器需要连接Web服务器，所以我们需要在Web服务中注册我们写的Servlet。还需要给他浏览器能够访问的路径。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">&quot;4.0&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    注册Servlet--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.li.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    Servlet请求路径--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>6.配置Tomcat</p>\n<p>​\t注意 ：配置项目发布的路径</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240617195852405.png\" alt=\"image-20240617195852405\"></p>\n<p>在第二步中，要注意下面问题</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240617195950957.png\" alt=\"image-20240617195950957\"></p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240617200026587.png\" alt=\"image-20240617200026587\"></p>\n<p>启动运行即可</p>\n<h3 id=\"Servlet原理\"><a href=\"#Servlet原理\" class=\"headerlink\" title=\"Servlet原理\"></a>Servlet原理</h3><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240617205640627.png\" alt=\"image-20240617205640627\"></p>\n<h3 id=\"Mapping映射问题\"><a href=\"#Mapping映射问题\" class=\"headerlink\" title=\"Mapping映射问题\"></a>Mapping映射问题</h3><p>1、一个Servlet可以指定一个映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、一个Servlet可以指定多个映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello2<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello3<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello4<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello5<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、一个Servlet可以指定通用映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>4、默认请求路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>   </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>5、指定一些后缀或者前缀等等…</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注意，*前面不能加项目映射的路径--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.demo<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>6、优先级问题<br>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--404--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>error<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.ErrorServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>error<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ServletContext\"><a href=\"#ServletContext\" class=\"headerlink\" title=\"ServletContext\"></a>ServletContext</h3><p>web容器在启动时候，它会为每个web程序都穿件一个对应的ServletContext对象，它代表了当前web应用；</p>\n<h4 id=\"1、共享数据\"><a href=\"#1、共享数据\" class=\"headerlink\" title=\"1、共享数据\"></a>1、共享数据</h4><ul>\n<li><p>我们在一个servlet中放入数据，可以在另一个Servlet中拿到这个数据</p>\n</li>\n<li><pre><code class=\"java\">public class HelloServlet  extends HttpServlet &#123;\n//放入数据\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n        System.out.println(&quot;hello&quot;);\n        ServletContext servletContext = this.getServletContext();// Servlet上下文\n         String name = &quot;小李&quot;;\n         servletContext.setAttribute(&quot;username&quot;,name); //将一个数据保存在了Servlet中，名字为username，值是name\n\n    &#125;\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n        doGet(req, resp);\n    &#125;\n&#125;\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* ```java</span><br><span class=\"line\">  public class GetServlet extends HttpServlet &#123;</span><br><span class=\"line\">      //拿到数据</span><br><span class=\"line\">      @Override</span><br><span class=\"line\">      protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">          //this.getServletContext();拿到的servletContext是和前一个类一样的容器</span><br><span class=\"line\">          ServletContext servletContext = this.getServletContext();</span><br><span class=\"line\">          String username =(String)servletContext.getAttribute(&quot;username&quot;);</span><br><span class=\"line\">          resp.setContentType(&quot;text/html&quot;);</span><br><span class=\"line\">          resp.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class=\"line\">          resp.getWriter().print(&quot;名字是：&quot;+username);</span><br><span class=\"line\">  </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      @Override</span><br><span class=\"line\">      protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">          doGet(req, resp);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p>测试结果：</p>\n</li>\n</ul>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240621132053907.png\" alt=\"image-20240621132053907\"></p>\n<h4 id=\"2、获取初始化参数\"><a href=\"#2、获取初始化参数\" class=\"headerlink\" title=\"2、获取初始化参数\"></a>2、获取初始化参数</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置一些web应用初始化参数--&gt;</span>`</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span>`</span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>application-name<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span>`</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>学习Servlet<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span>`</span><br><span class=\"line\">context-param&gt;`</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServletDemo03</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">ServletContext</span> <span class=\"variable\">servletContext</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getServletContext();</span><br><span class=\"line\">        <span class=\"comment\">//调用方法，但是注意要在web.xml注册。</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> servletContext.getInitParameter(<span class=\"string\">&quot;url&quot;</span>);</span><br><span class=\"line\">        resp.getWriter().print(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        doGet(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、进行请求转发\"><a href=\"#3、进行请求转发\" class=\"headerlink\" title=\"3、进行请求转发\"></a>3、进行请求转发</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServletDemo04</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">ServletContext</span> <span class=\"variable\">servletContext</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getServletContext();</span><br><span class=\"line\">        <span class=\"comment\">//参数是要转发的地址</span></span><br><span class=\"line\">        <span class=\"type\">RequestDispatcher</span> <span class=\"variable\">requestDispatcher</span> <span class=\"operator\">=</span> servletContext.getRequestDispatcher(<span class=\"string\">&quot;/hello&quot;</span>); <span class=\"comment\">//转发的请求路径</span></span><br><span class=\"line\">        requestDispatcher.forward(req,resp); <span class=\"comment\">//调用forward进行请求转发</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        doGet(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、读取资源文件\"><a href=\"#4、读取资源文件\" class=\"headerlink\" title=\"4、读取资源文件\"></a>4、读取资源文件</h4><p>需要一个文件流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获得文件流的方法getResourceAsStream()</span></span><br><span class=\"line\">    <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getServletContext().getResourceAsStream(<span class=\"string\">&quot;/WEB-INF/db.properties&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Properties</span> <span class=\"variable\">prop</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">    prop.load(is);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> prop.getProperty(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">pwd</span> <span class=\"operator\">=</span> prop.getProperty(<span class=\"string\">&quot;password&quot;</span>);</span><br><span class=\"line\">    resp.getWriter().print(user+<span class=\"string\">&quot;:&quot;</span>+pwd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HttpServletRequest-6-21学到了狂神的servlet的这个地方\"><a href=\"#HttpServletRequest-6-21学到了狂神的servlet的这个地方\" class=\"headerlink\" title=\"HttpServletRequest(6.21学到了狂神的servlet的这个地方)\"></a>HttpServletRequest(6.21学到了狂神的servlet的这个地方)</h3><h3 id=\"HttpServletResponse\"><a href=\"#HttpServletResponse\" class=\"headerlink\" title=\"HttpServletResponse\"></a>HttpServletResponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p>\n<ul>\n<li>获取客户端请求过来的参数：<code>HttpServletRequest</code></li>\n<li>响应客户端响应一些信息：<code>HttpServletResponse</code></li>\n</ul>\n<h2 id=\"SpringBoot入门\"><a href=\"#SpringBoot入门\" class=\"headerlink\" title=\"SpringBoot入门\"></a>SpringBoot入门</h2><ul>\n<li><strong>编写一个入门程序，浏览器访问url输出Hello，Spring！字样</strong><ul>\n<li>项目结构：</li>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240505172659110.png\" alt=\"image-20240505172659110\"></li>\n</ul>\n</li>\n</ul>\n<p>第一步，在java包下的com下新建controller包下创建HelloTestController类中添加如下内容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiaoli.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span><span class=\"comment\">//该注解相当于@Controller + @ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloSpringController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/test&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSpring</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello,Spring,你好，Spring&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>启动类下启动SpringBoot项目，访问&#x2F;hello&#x2F;test查看页控制台输出</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240505173434049.png\" alt=\"image-20240505173434049\"></p>\n<p>浏览器输出：</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240505173849454.png\" alt=\"image-20240505173849454\"></p>\n<ul>\n<li>概念:<strong>Hyper Text Transfer Protocol</strong>，超文本传输协议，规定了浏览器和服务器之间数据传输的规则。</li>\n<li>特点:<ul>\n<li><ol>\n<li>基于TCP协议:面向连接，安全</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>基于请求-响应模型的:一次请求对应一次响应</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>HTTP协议是无状态的协议:对于事务处理没有记忆能力。每次请求-响应都是独立的。<ul>\n<li>缺点:多次请求间不能共享数据。</li>\n<li>优点:速度快</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>4.HTTP默认端口：80</li>\n<li>5.HTTPS默认端口：443</li>\n<li>HTTP 1.0: HTTP&#x2F;1.0:客户端可以与Web服务器连接，只能获得一个web资源，断开连接。</li>\n<li>HTTP&#x2F;1.1：客户端可以与Web服务器连接，可以获得多个web资源</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"HTTP——请求数据格式\"><a href=\"#HTTP——请求数据格式\" class=\"headerlink\" title=\"HTTP——请求数据格式\"></a>HTTP——请求数据格式</h3><p><strong>客户端——发请求(Request)——服务器</strong></p>\n<ul>\n<li>请求行：请求数据的第一行(请求方式、资源路径、协议)</li>\n<li>请求头：第二行开始，key：value格式</li>\n<li>请求体：(post请求独有)，存放请求的参数<ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240511145939993.png\" alt=\"image-20240511145939993\"></li>\n</ul>\n</li>\n</ul>\n<p>拿下面这一段代码举例：</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240512130440784.png\" alt=\"image-20240512130440784\"></p>\n<p>我们来看下，他的各个部分代表着什么含义：</p>\n<img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240512130505773.png\" alt=\"image-20240512130505773\" style=\"zoom:93%;\">\n\n<h3 id=\"HTTP——响应格式\"><a href=\"#HTTP——响应格式\" class=\"headerlink\" title=\"HTTP——响应格式\"></a>HTTP——响应格式</h3><p><strong>服务器——响应——客户端</strong></p>\n<ul>\n<li><p>响应行：响应数据的第一行(协议、状态码、描述)</p>\n<ul>\n<li><p>状态码 ：<img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240512175202186.png\" alt=\"image-20240512175202186\"></p>\n</li>\n<li><p>常见的响应状态码：<img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240512175514372.png\" alt=\"image-20240512175514372\"></p>\n</li>\n<li><p>响应状态码</p>\n<ul>\n<li><p>200:请求响应成功 200</p>\n</li>\n<li><p>3xx:请求重定向</p>\n<p>重定向:你重新到我给你新位置去;</p>\n</li>\n<li><p>4xx:找不到资源</p>\n<p>404资源不存在</p>\n</li>\n<li><p>5xx:服务器代码错误 500<br>502:网关错误</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>常见面试题：</strong></p>\n<p>​\t当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么?</p>\n<ul>\n<li><p>响应头：第二行开始，格式key：value</p>\n<ul>\n<li>常见的响应头：<img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240512194826494.png\" alt=\"image-20240512194826494\"></li>\n</ul>\n</li>\n<li><p>响应体：最后一部分，存放响应数据。</p>\n</li>\n</ul>\n<h2 id=\"Web服务器——Tomcat\"><a href=\"#Web服务器——Tomcat\" class=\"headerlink\" title=\"Web服务器——Tomcat\"></a>Web服务器——Tomcat</h2><ul>\n<li>是一个开源免费的轻量级Web服务器，支持Servlet&#x2F;JSP少量JavaEE规范。</li>\n<li>Tomcat也称为Web容器、Servlet容器。Servlet程序需要依赖于Tomcat才能运行。</li>\n<li>Tomcat官网：<a href=\"https://tomcat.apache.org/\">https://tomcat.apache.org/</a></li>\n</ul>\n<h4 id=\"Tomcat目录说明\"><a href=\"#Tomcat目录说明\" class=\"headerlink\" title=\"Tomcat目录说明\"></a>Tomcat目录说明</h4><ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240512200708260.png\" alt=\"image-20240512200708260\"></li>\n</ul>\n<h2 id=\"请求和响应概述\"><a href=\"#请求和响应概述\" class=\"headerlink\" title=\"请求和响应概述\"></a>请求和响应概述</h2><h3 id=\"（1）BS架构和CS架构\"><a href=\"#（1）BS架构和CS架构\" class=\"headerlink\" title=\"（1）BS架构和CS架构\"></a>（1）BS架构和CS架构</h3><ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240512204745235.png\" alt=\"image-20240512204745235\"></li>\n</ul>\n<h3 id=\"（2）接口测试的工具\"><a href=\"#（2）接口测试的工具\" class=\"headerlink\" title=\"（2）接口测试的工具\"></a>（2）接口测试的工具</h3><p>postman，apifox等等都可以</p>\n<h3 id=\"（3）-简单参数\"><a href=\"#（3）-简单参数\" class=\"headerlink\" title=\"（3） 简单参数\"></a>（3） 简单参数</h3><ul>\n<li><p>原始方式</p>\n<ul>\n<li>在原始Web程序中，获取求情参数，需要通过<strong>HttpServletRequest</strong>对象手动获取</li>\n</ul>\n</li>\n<li><p>实现代码：</p>\n<ul>\n<li><pre><code class=\"java\">//请求地址\n@RequestMapping(&quot;/simpleParam&quot;)\npublic String simpleParam(HttpServletRequest request)&#123;\n//获取参数名称为name的值，赋值给变量name\nString name = request.getParameter(&quot;name&quot;);\n//获取参数名称为age的值，赋值给变量ageStr\nString ageStr = request.getParameter(&quot;age&quot;);\n//把ageStr转成int类型，赋值给age变量\nint age = Integer.paseInt(ageStr);\nSystem.out.println(name+&quot;:&quot;+age);\nreturn &quot;ok;&quot;\n&#125;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* SpringBoot方法：</span><br><span class=\"line\"></span><br><span class=\"line\">  * 实现代码：</span><br><span class=\"line\"></span><br><span class=\"line\">    ```java</span><br><span class=\"line\">    //请求地址</span><br><span class=\"line\">    @RequestMapping(&quot;/simpleParam&quot;)</span><br><span class=\"line\">    public String simpleParam(String name,Integer age)&#123;</span><br><span class=\"line\">    System.out.println(name+&quot;:&quot;+age);</span><br><span class=\"line\">    return &quot;ok;&quot;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p>在<strong>SpringBoot</strong>方法中，如果你<strong>请求的参数名称和方法中定义的形参名称不一致</strong>，可以使用注解**@RequestParam<strong>完成映射。比如我形参为username，但是我请求的参数是name，那么这时候就</strong>需要这样改写(如下图形式)<strong>。</strong>如果说该参数不需要传，那么可以在@RequestParam注解中设置属性required &#x3D; false**</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//请求地址</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">simpleParam</span><span class=\"params\">(<span class=\"meta\">@RequestParam(name = &quot;name&quot;,required = false)</span>String username,Integer age)</span>&#123;</span><br><span class=\"line\">System.out.println(username+<span class=\"string\">&quot;:&quot;</span>+age);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">&quot;ok;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"（4）实体参数\"><a href=\"#（4）实体参数\" class=\"headerlink\" title=\"（4）实体参数\"></a>（4）实体参数</h3><ul>\n<li><p>简单实体对象：请求参数名与形参对象属性名相同，定义POJO接收即可。(query参数)</p>\n<ul>\n<li><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240518170137745.png\" alt=\"image-20240518170137745\"></p>\n</li>\n<li><p>结果：</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240518171108915.png\" alt=\"image-20240518171108915\"></p>\n</li>\n</ul>\n</li>\n<li><p>复杂实体对象：请求参数名与形参对象属性名相同，按照对象层次结构关系即可接受嵌套POJO属性参数。</p>\n<ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240518171205542.png\" alt=\"image-20240518171205542\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"（5）数组集合参数\"><a href=\"#（5）数组集合参数\" class=\"headerlink\" title=\"（5）数组集合参数\"></a>（5）数组集合参数</h3><ul>\n<li><p>数组参数：请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参即可接收参数。</p>\n<ul>\n<li><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240518171650956.png\" alt=\"image-20240518171650956\"></p>\n</li>\n<li><p>结果：</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240518172115005.png\" alt=\"image-20240518172115005\"></p>\n</li>\n</ul>\n</li>\n<li><p>集合参数 ：请求参数名称与形参集合名称相同且请求参数为多个时，@RequesParam绑定参数关系。</p>\n<ul>\n<li><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240518172242683.png\" alt=\"image-20240518172242683\"></p>\n</li>\n<li><p>结果：</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240518172452983.png\" alt=\"image-20240518172452983\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"（6）日期参数\"><a href=\"#（6）日期参数\" class=\"headerlink\" title=\"（6）日期参数\"></a>（6）日期参数</h3><ul>\n<li><p>日期参数：使用@DataTimeFormat注解完成日期参数格式转换。</p>\n<ul>\n<li><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240518172628653.png\" alt=\"image-20240518172628653\"></p>\n</li>\n<li><p>结果：<img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240518173331332.png\" alt=\"image-20240518173331332\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"（7）Json参数\"><a href=\"#（7）Json参数\" class=\"headerlink\" title=\"（7）Json参数\"></a>（7）Json参数</h3><ul>\n<li>JSON参数：JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数，需要使用@RequestBody标识<ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240518205130846.png\" alt=\"image-20240518205130846\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"（8）路径参数\"><a href=\"#（8）路径参数\" class=\"headerlink\" title=\"（8）路径参数\"></a>（8）路径参数</h3><ul>\n<li><p>通过URL直接传递参数，使用{….}来标识该路径参数，需要使用**@PathVariable**获取路径参数。</p>\n<ul>\n<li><p>说明：</p>\n<ul>\n<li><p>举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接收来自前端的proId</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/pathParam/&#123;proId&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String  <span class=\"title function_\">pathParam</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Long proId)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用某个方法传入proId实现某种功能等等</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">&quot;OK&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"响应数据-介绍注解-ResponseBody\"><a href=\"#响应数据-介绍注解-ResponseBody\" class=\"headerlink\" title=\"响应数据(介绍注解**@ResponseBody**)\"></a>响应数据(介绍注解**@ResponseBody**)</h3><p>来看一图：</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240518205828162.png\" alt=\"image-20240518205828162\"></p>\n<p>这里介绍注解**@ResponseBody**</p>\n<ul>\n<li><p>类型：方法注解，类注解</p>\n</li>\n<li><p>位置：Controller方法上&#x2F;类上</p>\n</li>\n<li><p>作用：将方法返回值直接响应，如果返回值类型是实体对象&#x2F;集合，将会转换为JSON格式响应</p>\n</li>\n<li><p>说明：**@RestController &#x3D; @Controller + @ResponseBody**</p>\n</li>\n<li><p>为了统一并且方便管理，这里提供一个统一响应类Result类</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240519165834449.png\" alt=\"image-20240519165834449\"></p>\n</li>\n</ul>\n<h2 id=\"三层架构\"><a href=\"#三层架构\" class=\"headerlink\" title=\"三层架构\"></a>三层架构</h2><ul>\n<li><p>controller:控制层，接收前端发送的请求，对请求进行处理，并响应数据。</p>\n</li>\n<li><p>service:业务逻辑层，处理具体的业务逻辑。</p>\n</li>\n<li><p>dao:数据访问层(<strong>Data Access Object</strong>)(持久层)，负责数据访问操作，包括数据的增、删、改、查</p>\n</li>\n<li><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240520162027687.png\" alt=\"image-20240520162027687\"></p>\n</li>\n</ul>\n<h3 id=\"（2）分层解耦\"><a href=\"#（2）分层解耦\" class=\"headerlink\" title=\"（2）分层解耦\"></a>（2）分层解耦</h3><ul>\n<li>内聚:软件中各个功能模块内部的功能联系。</li>\n<li>耦合:衡量软件中各个层&#x2F;模块之间的依赖、关联的程度。</li>\n<li>如何解决耦合过高呢？下面提供解决方法<ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240520162646862.png\" alt=\"image-20240520162646862\"></li>\n</ul>\n</li>\n</ul>\n<p>由图可以看出，我们需要提供一个容器，从而舍弃在controller层中去操作对象这一步。接下来，就介绍<strong>控制反转</strong>和<strong>依赖注入</strong>这两个概念。</p>\n<ul>\n<li><strong>控制反转</strong>: Inversion Of Control，简称IOC。对象的创建控制权由程序自身转移到外部(容器)，这种思想称为控制反转</li>\n<li><strong>依赖注入</strong>: Dependency Injection，简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。</li>\n<li><strong>Bean对象</strong>:IOC容器中创建、管理的对象，称之为bean。</li>\n</ul>\n<h3 id=\"（3）IOC-DI入门\"><a href=\"#（3）IOC-DI入门\" class=\"headerlink\" title=\"（3）IOC&amp;DI入门\"></a>（3）IOC&amp;DI入门</h3><p>步骤如下：</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240520163208083.png\" alt=\"image-20240520163208083\"></p>\n<ul>\n<li><p>1.利用@Componet注解，将实现类交给IOC容器管理</p>\n<ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240520163350608.png\" alt=\"image-20240520163350608\"></li>\n</ul>\n</li>\n<li><p>注入依赖对象(注入Bean)，只需要在需要注入的对象上面添加注解@AutoWired注解即可完成</p>\n<ul>\n<li><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240520163451952.png\" alt=\"image-20240520163451952\"></p>\n</li>\n<li><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240520163505330.png\" alt=\"image-20240520163505330\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"（4）IOC详解-控制反转\"><a href=\"#（4）IOC详解-控制反转\" class=\"headerlink\" title=\"（4）IOC详解(控制反转)\"></a>（4）IOC详解(控制反转)</h3><ul>\n<li><p>对于Bean对象**(IOC容器中创建、管理的对象，称之为bean**)，如若要把某个对象交给IOC容器管理，需要在对应类上加上如下注解：</p>\n<ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240520164610396.png\" alt=\"image-20240520164610396\"></li>\n</ul>\n</li>\n<li><p>Bean组件扫描</p>\n<ul>\n<li>前面声明Bean的四大注解，想要生效，还需要被组件扫描注解**@ComponetScan**扫描。</li>\n<li>@ComponetScan注解虽然没有显示配置，但是实际上已经包含在了启动类注解**@SpringBootApplication<strong>中，</strong>默认扫描范围是启动类所在的包及其子包。**</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"（5）DI详解-依赖注入\"><a href=\"#（5）DI详解-依赖注入\" class=\"headerlink\" title=\"（5）DI详解(依赖注入)\"></a>（5）DI详解(依赖注入)</h3><ul>\n<li><p>Bean注入：</p>\n<ul>\n<li><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240520173859033.png\" alt=\"image-20240520173859033\"></p>\n</li>\n<li><p>解决方法：</p>\n<ul>\n<li><p>使用@Primary注解，想使用谁就在谁上添加该注解，在进行程序运行时就会使用带有@Primary注解的Bean对象</p>\n</li>\n<li><p><strong>@AutoWried注解搭配@Qualifier</strong>注解：</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240520174057576.png\" alt=\"image-20240520174057576\"></p>\n</li>\n<li><p>@Resource注解(由JDK提供)：注入哪一个Bean就使用@Resource(name &#x3D; “要注入Bean对象的名字”)</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>穿插一道面试题：</p>\n<ul>\n<li>@AutoWried与@Resource注解的区别 ：<ul>\n<li><p>@Autowired 是spring框架提供的注解。而@Resource是JDK提供的注解。</p>\n</li>\n<li><p>@Autowired 默认是按照类型注入，而@Resource默认是按照名称注入。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Mysql——查询\"><a href=\"#Mysql——查询\" class=\"headerlink\" title=\"Mysql——查询\"></a>Mysql——查询</h2><h4 id=\"（1）Mysql——基本查询\"><a href=\"#（1）Mysql——基本查询\" class=\"headerlink\" title=\"（1）Mysql——基本查询\"></a>（1）Mysql——基本查询</h4><p>语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查询多个字段</span><br><span class=\"line\"><span class=\"keyword\">Select</span> 字段<span class=\"number\">1</span>,字段<span class=\"number\">2</span>,字段<span class=\"number\">3</span> <span class=\"keyword\">from</span> 表名；</span><br><span class=\"line\"># 查询所有字段(通配符)</span><br><span class=\"line\">Selcet <span class=\"operator\">*</span> <span class=\"keyword\">from</span> 表名;</span><br><span class=\"line\"># 设置别名(<span class=\"keyword\">as</span>关键字可以省略)</span><br><span class=\"line\"><span class=\"keyword\">select</span> 字段<span class=\"number\">1</span> [<span class=\"keyword\">as</span> <span class=\"string\">&#x27;别名1&#x27;</span>],字段<span class=\"number\">2</span> [<span class=\"keyword\">as</span> <span class=\"string\">&#x27;别名2&#x27;</span> ] <span class=\"keyword\">from</span> 表名;</span><br><span class=\"line\"># 去除重复记录</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">DISTINCT</span> 字段<span class=\"number\">1</span>,字段<span class=\"number\">2</span> <span class=\"keyword\">from</span> 表名;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）Mysql——条件查询\"><a href=\"#（2）Mysql——条件查询\" class=\"headerlink\" title=\"（2）Mysql——条件查询\"></a>（2）Mysql——条件查询</h4><ul>\n<li><p>语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> 要查询的字段 <span class=\"keyword\">from</span> 表名 <span class=\"keyword\">where</span> 条件</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240521200136313.png\" alt=\"image-20240521200136313\"></li>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240521200147742.png\" alt=\"image-20240521200147742\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"（3）Mysql——聚合函数\"><a href=\"#（3）Mysql——聚合函数\" class=\"headerlink\" title=\"（3）Mysql——聚合函数\"></a>（3）Mysql——聚合函数</h4><ul>\n<li><p>语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">\t字段列表</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">\t表名列表</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">\t条件列表</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span></span><br><span class=\"line\">\t分组字段列表</span><br><span class=\"line\"><span class=\"keyword\">having</span></span><br><span class=\"line\">\t分组后条件列表</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span></span><br><span class=\"line\">\t排序字段列表</span><br><span class=\"line\">limit</span><br><span class=\"line\">\t分页参数</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>聚合函数：</p>\n<ul>\n<li><p>count：统计数量(*是通配符)</p>\n</li>\n<li><p>max：取最大值</p>\n</li>\n<li><p>min：取最小值</p>\n</li>\n<li><p>avg：取平均值</p>\n</li>\n<li><p>sum：求和</p>\n</li>\n<li><p>语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> 聚合函数(字段名) <span class=\"keyword\">from</span> 表名</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"（4）Mysql——分组查询\"><a href=\"#（4）Mysql——分组查询\" class=\"headerlink\" title=\"（4）Mysql——分组查询\"></a>（4）Mysql——分组查询</h4><ul>\n<li><p>语法：group by 关键字</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> 字段列表 <span class=\"keyword\">from</span> 表名 [<span class=\"keyword\">where</span> 条件] <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> 分组字段名 [<span class=\"keyword\">having</span> 分组后的过滤条件]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"（5）Mysql——排序查询\"><a href=\"#（5）Mysql——排序查询\" class=\"headerlink\" title=\"（5）Mysql——排序查询\"></a>（5）Mysql——排序查询</h4><ul>\n<li><p>关键字：order by</p>\n<ul>\n<li><p>语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> 字段列表 <span class=\"keyword\">from</span> 表名 [<span class=\"keyword\">where</span> 条件] <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> 分组字段名  <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 字段<span class=\"number\">1</span> 排序方式<span class=\"number\">1</span>,字段<span class=\"number\">2</span>,排序方式<span class=\"number\">2</span>,....;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>排序方式：</p>\n<ul>\n<li>ASC：升序(默认值)</li>\n<li>DESC：降序</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"（6）Mysql——分页查询\"><a href=\"#（6）Mysql——分页查询\" class=\"headerlink\" title=\"（6）Mysql——分页查询\"></a>（6）Mysql——分页查询</h4><ul>\n<li><p>关键字：limit</p>\n</li>\n<li><p>语法：</p>\n<ul>\n<li><pre><code class=\"sql\">select 字段列表 from 表名 limit 起始索引,查询记录数;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* 起始索引从0开始。起始索引 = (页码－1) * 5</span><br><span class=\"line\"></span><br><span class=\"line\">* 注意事项：</span><br><span class=\"line\"></span><br><span class=\"line\">  ![image-20240521202744500](./JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240521202744500.png)</span><br><span class=\"line\"></span><br><span class=\"line\">## Mysql——多表设计</span><br><span class=\"line\"></span><br><span class=\"line\">#### （1）一对多</span><br><span class=\"line\"></span><br><span class=\"line\">* 实现：在数据库表中多的一方，添加字段，来关联一的一方的主键</span><br><span class=\"line\">* 实现关联可以通过添加外键约束：</span><br><span class=\"line\">  * 外键语法：</span><br><span class=\"line\">    * ![image-20240521204007417](./JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240521204007417.png)</span><br><span class=\"line\"></span><br><span class=\"line\">#### （2）一对一</span><br><span class=\"line\"></span><br><span class=\"line\">* 案例：用户与身份证的关系</span><br><span class=\"line\">* 关系：一对一关系，用于单表拆分，将一张表的基础字段放在一张表中，其他字段放在另一张表中，以此来提升操作效率。</span><br><span class=\"line\">* 图例：![image-20240525190504774](./JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240525190504774.png)</span><br><span class=\"line\"></span><br><span class=\"line\">#### （3）多对多</span><br><span class=\"line\"></span><br><span class=\"line\">* 案例：学生和课程之间的关系</span><br><span class=\"line\">* 关系：一门课程可以有多个学生选修，而一个学生也可以选修多门课程</span><br><span class=\"line\">* 实现：建立一张第三表(中间表)，**中间表至少包含两个外键**，**分别关联两边的主键**。</span><br><span class=\"line\">  * 示例：![image-20240525190728405](./JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240525190728405.png)</span><br><span class=\"line\"></span><br><span class=\"line\">## Mysql——多表查询</span><br><span class=\"line\"></span><br><span class=\"line\">* 概念：从多张表中查询数据。</span><br><span class=\"line\"></span><br><span class=\"line\">* 笛卡尔积：笛卡尔积是指在数学中，两个集合(两张表)的所有组合情况，而多表查询的结果符合笛卡尔积。</span><br><span class=\"line\"></span><br><span class=\"line\">  * 语法：</span><br><span class=\"line\"></span><br><span class=\"line\">    ```sql</span><br><span class=\"line\">    Select * from 表名1,表名2 where 表1.字段名 = 表2.字段名。</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p>这里要注意的是：where后的条件是指表1表2中都有的字段。</p>\n</li>\n</ul>\n</li>\n<li><p>分类：</p>\n<ul>\n<li><p>连接查询</p>\n<ul>\n<li><p>内连接：相当于查询A，B交集部分数据</p>\n</li>\n<li><p>外连接：</p>\n<ul>\n<li><p>左外连接：查询左表所有数据(包括两张表交集部分数据)</p>\n</li>\n<li><p>右外连接 ：查询有表所有数据(包括两张表交集部分)</p>\n</li>\n<li><p>图示：<img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240525192226776.png\" alt=\"image-20240525192226776\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>内连接：</p>\n<ul>\n<li>隐式内连接：<strong>Select</strong> 字段列表 <strong>from</strong> 表1，表2 <strong>where</strong> 条件…；</li>\n<li>显示内连接：<strong>Select</strong> 字段列表 <strong>from [inner] join</strong> 表2 <strong>on</strong>  连接条件..</li>\n</ul>\n</li>\n<li><p>外连接 ： </p>\n<ul>\n<li>左外连接(会把在左表中而不在右表中的数据查出)：<strong>Select</strong> 字段列表 <strong>from</strong> 表1 <strong>left [outer] join</strong> 表2 <strong>on</strong> 连接条件….；</li>\n<li>右外连接(会把在右表中而不在左表中的数据查出)：<strong>select</strong> 字段列表 <strong>from</strong> 表1 <strong>left [outer] join</strong> 表2 <strong>on</strong> 连接条件…</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"（1）子查询\"><a href=\"#（1）子查询\" class=\"headerlink\" title=\"（1）子查询\"></a>（1）子查询</h3><ul>\n<li>介绍：sql语句中嵌套select查询，称为嵌套查询，又称子查询。</li>\n<li>形式 ：select  * from 表1 where 字段1 &#x3D;(select 字段1 from 表2)；</li>\n<li>子查询外部的语句可以是insert &#x2F; update &#x2F; delete &#x2F; select 的任何一个。最常见的是select。</li>\n<li>分类 ：<ul>\n<li>标量子查询:子查询返回的结果为单个值</li>\n<li>列子查询:子查询返回的结果为一列</li>\n<li>行子查询:子查询返回的结果为一行</li>\n<li>表子查询:子查询返回的结果为多行多列</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"（1）标量子查询\"><a href=\"#（1）标量子查询\" class=\"headerlink\" title=\"（1）标量子查询\"></a>（1）标量子查询</h5><ul>\n<li><p>子查询返回的结果是单个值(数字、字符串、日期等)，最简单</p>\n<p>的形式。</p>\n</li>\n<li><p>常用的操作符:  &#x3D;    &lt;&gt;      &gt;    &gt;&#x3D;     &lt;    &lt;&#x3D;</p>\n</li>\n</ul>\n<h5 id=\"（2）列子查询\"><a href=\"#（2）列子查询\" class=\"headerlink\" title=\"（2）列子查询\"></a>（2）列子查询</h5><ul>\n<li><p>子查询返回的结果是一列(可以是多行)。</p>\n</li>\n<li><p>常用操作符：in、not in 等</p>\n</li>\n</ul>\n<h5 id=\"（3）行子查询\"><a href=\"#（3）行子查询\" class=\"headerlink\" title=\"（3）行子查询\"></a>（3）行子查询</h5><ul>\n<li><p>子查询返回的结果是一行(可以是多列)</p>\n</li>\n<li><p>常用操作符：&#x3D;  、 &lt;&gt;  、 in  、 not in。</p>\n</li>\n<li><p>示例：<img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240530170210204.png\" alt=\"image-20240530170210204\"></p>\n</li>\n</ul>\n<p>这里需要注意的是，<strong>当返回多个字段，(多列)时，可以使用括号，将要返回的字段括起来，并用逗号隔开，里面字段顺序和子查询中的字段顺序一致。</strong></p>\n<h5 id=\"（4）表子查询\"><a href=\"#（4）表子查询\" class=\"headerlink\" title=\"（4）表子查询\"></a>（4）表子查询</h5><ul>\n<li>子查询返回的结果是多行多列，把它作为临时表来使用。</li>\n<li>常用操作符：in</li>\n</ul>\n<h2 id=\"Mysql——事务\"><a href=\"#Mysql——事务\" class=\"headerlink\" title=\"Mysql——事务\"></a>Mysql——事务</h2><p>概念：</p>\n<ul>\n<li><p>事务 是一组操作的集合，它是一个不可分割的工作单位。事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些<br>操作 <strong>要么同时成功，要么同时失败。</strong></p>\n</li>\n<li><p>事务控制：</p>\n<ul>\n<li>开启事务：start transaction; &#x2F; begin ;</li>\n<li>提交事务：commit;</li>\n<li>回滚事务：rollback;</li>\n</ul>\n</li>\n<li><p>示例：依次运行。</p>\n<ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240530173434039.png\" alt=\"image-20240530173434039\"></li>\n</ul>\n</li>\n<li><p>事务的四大特性(ACID)：</p>\n<ul>\n<li>原子性：事务是不可分割的最小单元，<br>要么全部成功，要么全部失败</li>\n<li>一致性：事务完成时，必须使所有的数据都<br>保持一致状态</li>\n<li>隔离性：数据库系统提供的隔离机制，保<br>证事务在不受外部并发操作影响<br>的独立环境下运行</li>\n<li>持久性：事务一旦提交或回滚，它对数据<br>库中的数据的改变就是永久的</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"（1）Mysql——索引-对数据库查询效率进行优化的手段\"><a href=\"#（1）Mysql——索引-对数据库查询效率进行优化的手段\" class=\"headerlink\" title=\"（1）Mysql——索引(对数据库查询效率进行优化的手段 )\"></a>（1）Mysql——索引(对数据库查询效率进行优化的手段 )</h3><p>索引的概念：是帮助数据库高效获取数据的数据结构(构建红黑二叉树)。</p>\n<ul>\n<li><p>当一张表没有建立索引的时候，默认查找方法是进行全表扫描，数据量越大，性能越低。</p>\n</li>\n<li><p>索引的示例：<img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240530175027804.png\" alt=\"image-20240530175027804\"></p>\n</li>\n<li><p>索引的优缺点：</p>\n<ul>\n<li>优点：<img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240530175145211.png\" alt=\"image-20240530175145211\"></li>\n<li>缺点：<img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240530175155625.png\" alt=\"image-20240530175155625\"></li>\n</ul>\n</li>\n<li><p>索引结构：</p>\n<ul>\n<li>MySQL数据库支持的索引结构有很多，如:Hash索引、B+Tree索引、Full-Text索引等。我们平常所说的索引，如果没<br>有特别指明，都是指默认的 <strong>B+Tree</strong> 结构组织的索引。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"拓展：请求方法以及含义\"><a href=\"#拓展：请求方法以及含义\" class=\"headerlink\" title=\"拓展：请求方法以及含义\"></a>拓展：请求方法以及含义</h2><h3 id=\"1-GET\"><a href=\"#1-GET\" class=\"headerlink\" title=\"1. GET\"></a>1. GET</h3><ul>\n<li><p><strong>意义</strong>：GET方法用于从服务器请求信息。它是最常见的HTTP请求类型，主要用于获取资源。当使用GET方法时，请求的参数会被附加在URL后面，以问号分隔。</p>\n</li>\n<li><p><strong>特点</strong>：</p>\n<ul>\n<li>安全性：理论上不应该有副作用，不应修改数据或状态。</li>\n<li>可缓存：结果可以被缓存。</li>\n<li>可收藏：即请求可以被保存、书签化或分享给他人。</li>\n<li>参数长度限制：由于参数是URL的一部分，因此可能受到URL长度的限制（尽管现代浏览器和服务器通常可以处理非常长的URL）。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-POST\"><a href=\"#2-POST\" class=\"headerlink\" title=\"2. POST\"></a>2. POST</h3><ul>\n<li><p><strong>意义</strong>：POST方法用于向服务器发送数据，通常用于创建新的资源或者更新现有资源的部分内容。POST请求的数据体通常包含在HTTP请求的消息体中。</p>\n</li>\n<li><p><strong>特点</strong>：</p>\n<ul>\n<li>不安全：可能会改变服务器上的数据或状态。</li>\n<li>不可缓存：结果不应被缓存。</li>\n<li>不可收藏：请求不能被保存或分享。</li>\n<li>数据大小无限制：理论上没有数据大小的限制。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-PUT\"><a href=\"#3-PUT\" class=\"headerlink\" title=\"3. PUT\"></a>3. PUT</h3><ul>\n<li><p><strong>意义</strong>：PUT方法用于替换指定的资源。与POST不同，PUT通常用于更新一个已存在的资源，而不是创建一个新的资源。PUT请求的数据体包含要更新的资源的新状态。</p>\n</li>\n<li><p><strong>特点</strong>：</p>\n<ul>\n<li>安全性：理论上不应有副作用，但会修改数据或状态。</li>\n<li>可幂等：多次相同的请求应该产生相同的结果。</li>\n<li>数据大小无限制：理论上没有数据大小的限制。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-其他HTTP请求方法\"><a href=\"#4-其他HTTP请求方法\" class=\"headerlink\" title=\"4.其他HTTP请求方法\"></a>4.其他HTTP请求方法</h3><p>除了GET、POST和PUT，HTTP还定义了其他一些请求方法：</p>\n<ul>\n<li><p><strong>HEAD</strong>：类似于GET，但服务器只会返回响应头部，而不返回响应体。这可以用来检查资源的状态和元数据，而不需要传输整个资源。</p>\n</li>\n<li><p><strong>DELETE</strong>：用于删除指定的资源。</p>\n</li>\n<li><p><strong>PATCH</strong>：用于对资源进行部分更新。与PUT不同，PATCH只更新指定的部分，而不是替换整个资源。</p>\n</li>\n<li><p><strong>OPTIONS</strong>：用于查询服务器支持的通信选项，如HTTP方法和服务器支持的媒体类型。</p>\n</li>\n<li><p><strong>CONNECT</strong>：用于建立与代理服务器的TCP连接，主要在HTTP代理隧道中使用。</p>\n</li>\n</ul>\n<p>每种请求方法都有其特定的用途和适用场景，在开发Web应用时，合理选择和使用这些方法对于构建高效、安全和符合标准的应用程序至关重要。</p>\n<h2 id=\"MyBatis——入门\"><a href=\"#MyBatis——入门\" class=\"headerlink\" title=\"MyBatis——入门\"></a>MyBatis——入门</h2><p>编写一个入门程序(基于注解的方式)</p>\n<p>准备实体类User</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiaoli.springbootmybatis.domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> user_id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String user_name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> phone_number;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getUser_id</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user_id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUser_id</span><span class=\"params\">(<span class=\"type\">int</span> user_id)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.user_id = user_id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUser_name</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user_name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUser_name</span><span class=\"params\">(String user_name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.user_name = user_name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getPhone_number</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> phone_number;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPhone_number</span><span class=\"params\">(<span class=\"type\">int</span> phone_number)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.phone_number = phone_number;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;User&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;user_id=&quot;</span> + user_id +</span><br><span class=\"line\">                <span class=\"string\">&quot;, user_name=&#x27;&quot;</span> + user_name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, phone_number=&quot;</span> + phone_number +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>引入MyBatis相关依赖。配置MyBatis（数据库连接信息）</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置数据库的连接信息  - 四要素</span></span><br><span class=\"line\"><span class=\"comment\">#驱动类名称</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"comment\">#数据库连接的url</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.url</span>=<span class=\"string\">jdbc://localhost:3306/springboot</span></span><br><span class=\"line\"><span class=\"comment\">#连接数据库的用户名</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"comment\">#连接数据库的密码</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.password</span>=<span class=\"string\">123456</span></span><br></pre></td></tr></table></figure>\n\n<p>mapper接口文件中的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiaoli.springbootmybatis.mapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.xiaoli.springbootmybatis.domain.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Select;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span> <span class=\"comment\">//在运行时 ，会自动生成该接口的实现类对象（代理对象），并将该对象交给IOC容器管理</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;select * from user&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">selectList</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在测试类中</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240606150349729.png\" alt=\"image-20240606150349729\"></p>\n<p>有如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiaoli.springbootmybatis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.xiaoli.springbootmybatis.mapper.UserMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span> <span class=\"comment\">//springboot整合单元测试的注解</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootMyBatisApplicationTests</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//注入IOC容器中的bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    UserMapper userMapper;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">allUsers</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       usersList.stream().forEach(item -&gt;&#123;</span><br><span class=\"line\">          System.out.println(item);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出如下</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240606150820437.png\" alt=\"image-20240606150820437\"></p>\n<p>如果字段没有和数据对应，不会报错，但是数据会出现问题</p>\n<p>​\t<img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240606151143263.png\" alt=\"image-20240606151143263\"></p>\n<h3 id=\"1-JDBC介绍\"><a href=\"#1-JDBC介绍\" class=\"headerlink\" title=\"1.JDBC介绍\"></a>1.JDBC介绍</h3><ul>\n<li>JDBC:(Java DataBase Connectivity)，就是使用Java语言操作关系型数据库的一套API。</li>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240606161903424.png\" alt=\"image-20240606161903424\"></li>\n</ul>\n<h3 id=\"2-数据库连接池\"><a href=\"#2-数据库连接池\" class=\"headerlink\" title=\"2.数据库连接池\"></a>2.数据库连接池</h3><ul>\n<li>数据库连接池是个容器，负责分配、管理数据库连接(Connection)</li>\n<li>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</li>\n<li>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏</li>\n<li>优点：<ul>\n<li>资源重用</li>\n<li>提升系统响应速度</li>\n<li>避免数据库连接遗漏</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240606162701683.png\" alt=\"image-20240606162701683\"></p>\n<ul>\n<li>实现数据库连接池<ul>\n<li>标准接口：DataSource</li>\n<li>官方(sun)提供的数据库连接池接口，由第三方组织实现此接口</li>\n<li>功能:获取连接</li>\n<li>代码：Connection getConnection() throws SOLException;</li>\n</ul>\n</li>\n</ul>\n<p>连接池常见产品：</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240606163242222.png\" alt=\"image-20240606163242222\"></p>\n<ul>\n<li>Druid(德鲁伊)</li>\n<li>Druid连接池是阿里巴巴开源的数据库连接池项目</li>\n<li>功能强大，性能优秀，是ava语言最好的数据库连接池之一</li>\n</ul>\n<p>切换数据库连接池：比如切换到德鲁伊连接池，在pom中引入启动依赖即可</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240606163528986.png\" alt=\"image-20240606163528986\"></p>\n<h3 id=\"3-LomBok\"><a href=\"#3-LomBok\" class=\"headerlink\" title=\"3.LomBok\"></a>3.LomBok</h3><ul>\n<li>Lombok是一个实用的]ava类库，能通过注解的形式自动生成构造器、getter&#x2F;setter、equals、hashcode、tostring等方法，并可以自动化生成日志变量，简化java开发、提高效率。如要使用LomBok需要引入依赖</li>\n</ul>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240606163839181.png\" alt=\"image-20240606163839181\"></p>\n<h2 id=\"MyBatis——基础操作\"><a href=\"#MyBatis——基础操作\" class=\"headerlink\" title=\"MyBatis——基础操作\"></a>MyBatis——基础操作</h2><p>准备项目，来看下项目结构</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240609171353584.png\" alt=\"image-20240609171353584\"></p>\n<h3 id=\"1-删除操作\"><a href=\"#1-删除操作\" class=\"headerlink\" title=\"1.删除操作\"></a>1.删除操作</h3><p>在Mapper包下创建对应的接口</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240609171220746.png\" alt=\"image-20240609171220746\"></p>\n<p>@Mapper注解是在SpringBoot项目启动时候，动态的将bean注入容器中，注意，动态传参的参数名称应该和形参名称一致。#{}被称为参数占位符</p>\n<p>注意事项<br>如果mapper接口方法形参只有一个普通类型的参数，#{}里面的属性名可以随便写，如:#{id}、#{value}。 </p>\n<p>编写测试方法</p>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240609171543784.png\" alt=\"image-20240609171543784\"></p>\n<p>如果想在控制台看到日志信息可以在application.properties中，打开mybatis的日志，并指定输出到控制台</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#指定mybatis输出日志的位置,输出控制台</span></span><br><span class=\"line\"><span class=\"attr\">mybatis.configuration.log-impl</span>=<span class=\"string\">org.apache.ibatis.logging.stdout.StdOutlmpl</span></span><br></pre></td></tr></table></figure>\n\n<p>在输出的日志中，我们动态传入的参数会被?代替，这其实是Mysql的预编译SQL</p>\n<p>对于预编译SQL他的：</p>\n<ul>\n<li><p>优势：性能更高，更安全。（可以防止SQL注入）</p>\n</li>\n<li><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240609173337968.png\" alt=\"image-20240609173337968\"></p>\n</li>\n<li><p>使用Java在执行SQL语句的过程</p>\n</li>\n<li><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240609173815486.png\" alt=\"image-20240609173815486\"></p>\n</li>\n<li><p>参数占位符</p>\n<ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240611181831441.png\" alt=\"image-20240611181831441\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-新增员工\"><a href=\"#2-新增员工\" class=\"headerlink\" title=\"2.新增员工\"></a>2.新增员工</h3><ul>\n<li>采用@Insert注解来进行插入操作，现在来看在mapper接口里面的方法。<strong>这里的对应指的是#{}中参数名称要和java实体类的属性名对应</strong></li>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240611182830079.png\" alt=\"image-20240611182830079\"></li>\n<li>新增(主键返回)<ul>\n<li>描述:在数据添加成功后，需要获取插入数据库数据的主键。如:添加套餐数据时，还需要维护套餐菜品关系表数据。</li>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240611183306064.png\" alt=\"image-20240611183306064\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-更新操作\"><a href=\"#3-更新操作\" class=\"headerlink\" title=\"3.更新操作\"></a>3.更新操作</h3><p> 在Mapper接口中写入更新的方法 采用@Update注解</p>\n<ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240612200404391.png\" alt=\"image-20240612200404391\"></li>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240612200612889.png\" alt=\"image-20240612200612889\"></li>\n<li>执行更新操作，在测试类中操作bean对象调用上面定义的update方法。</li>\n</ul>\n<h3 id=\"4-查询操作\"><a href=\"#4-查询操作\" class=\"headerlink\" title=\"4 .查询操作\"></a>4 .查询操作</h3><ul>\n<li><p>由于在进行查询操作时候，通过某个条件查询出来我们想要的数据，那这时候就要选择封装该数据的方法，有很多，下面展示将返回来的某一个员工信息封装在对象中</p>\n</li>\n<li><p>方法：<img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240612201104446.png\" alt=\"image-20240612201104446\"></p>\n</li>\n<li><p>在Test类中调用方法getByid，动态的传入值如下</p>\n<ul>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240612202138502.png\" alt=\"image-20240612202138502\"></li>\n<li><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240612202227476.png\" alt=\"image-20240612202227476\"></li>\n</ul>\n</li>\n<li><p>下面来介绍一下再MyBatis中的数据封装</p>\n<ul>\n<li><p><strong>实体类属性名 和 数据库表查询返回(注意是返回来的数据)的字段名一致，mybatis会自动封装</strong>。</p>\n</li>\n<li><p><strong>如果实体类属性名 和 数据库表查询返回的字段名不一致，不能自动封装</strong></p>\n</li>\n<li><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240612202719952.png\" alt=\"image-20240612202719952\"></p>\n</li>\n<li><p>解决方法如下：</p>\n<ul>\n<li><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240612202913693.png\" alt=\"image-20240612202913693\"></p>\n</li>\n<li><p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240612203157140.png\" alt=\"image-20240612203157140\"></p>\n</li>\n<li><p>方案三：MyBatis的驼峰命名自动映射开关 比如数据库字段为a_Cloumn 会被解析为 aCloumn</p>\n</li>\n<li><p>开启方式：在配置文件中添加如下代码：</p>\n<ul>\n<li><pre><code class=\"properties\">mybatis.configuration.map-underscore-to-camel-case=true\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 5.查询操作(条件查询)</span><br><span class=\"line\"></span><br><span class=\"line\">即SQL语法中where关键字后面的内容，这里举例子如下</span><br><span class=\"line\"></span><br><span class=\"line\">* 当然，在进行查询的时候难免会遇到下面这种情况</span><br><span class=\"line\">* ![image-20240612204731922](./JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240612204731922.png)</span><br><span class=\"line\">* concat方法：该方法会把里面包括的字符串拼接成一个字符串，那么就可解决上面的办法啦，如下，?即是我们的#&#123;name&#125;占位符、</span><br><span class=\"line\">* ![image-20240612205413989](./JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240612205413989.png)</span><br><span class=\"line\">* 正确的代码是这样的：![image-20240612205517715](./JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240612205517715.png)</span><br><span class=\"line\"></span><br><span class=\"line\">#### 参数名说明</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20240612205655793](./JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240612205655793.png)</span><br><span class=\"line\"></span><br><span class=\"line\">## MyBait——XML映射文件</span><br><span class=\"line\"></span><br><span class=\"line\">* 规范：</span><br><span class=\"line\">  * XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在相同包下(**同包同名**)</span><br><span class=\"line\">  * XML映射文件的namespace属性为Mapper接口全限定名一致。</span><br><span class=\"line\">  * XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致。</span><br><span class=\"line\">  * ![image-20240612205928624](./JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240612205928624.png)</span><br><span class=\"line\">  * 返回类型我们用ResultType属性来指定，注意，resultType指的是单条记录所封装的类型</span><br><span class=\"line\"></span><br><span class=\"line\">## MyBatis——动态SQL</span><br><span class=\"line\"></span><br><span class=\"line\">***动态SQL标签以及关键属性的概述：***</span><br><span class=\"line\"></span><br><span class=\"line\">* 随着用户输入或外部条件的变化而变化的SQL语句，我们称为动态SQL。</span><br><span class=\"line\"></span><br><span class=\"line\">动态SQL在MyBatis中是一组非常强大的功能，允许你根据运行时的条件动态地构建SQL语句。以下是MyBatis中动态SQL标签及其关键属性的概述：</span><br><span class=\"line\"></span><br><span class=\"line\">1. **`&lt;if&gt;`**</span><br><span class=\"line\">   - **`test`**：表达式，用于测试条件。如果表达式计算为true，则执行if体内的SQL语句。</span><br><span class=\"line\"></span><br><span class=\"line\">2. **`&lt;choose&gt;`**, **`&lt;when&gt;`**, **`&lt;otherwise&gt;`**</span><br><span class=\"line\">   - **`choose`**：类似于Java中的switch语句，用于多个条件的选择。</span><br><span class=\"line\">   - **`when`**：每个`&lt;when&gt;`元素都包含一个`test`属性，当测试条件满足时，执行其中的SQL语句。</span><br><span class=\"line\">   - **`otherwise`**：当所有的`&lt;when&gt;`条件都不满足时，执行`&lt;otherwise&gt;`中的SQL语句。</span><br><span class=\"line\"></span><br><span class=\"line\">3. **`&lt;where&gt;`**</span><br><span class=\"line\">   - 自动在前面添加“WHERE”关键字，如果已经有“WHERE”关键字，则不会重复添加。还会移除前导的AND或OR关键字。</span><br><span class=\"line\"></span><br><span class=\"line\">4. **`&lt;set&gt;`**</span><br><span class=\"line\">   - 用于UPDATE语句中，只会在有至少一个字段需要更新的情况下添加“SET”关键字，并移除尾部的逗号。</span><br><span class=\"line\"></span><br><span class=\"line\">5. **`&lt;foreach&gt;`**</span><br><span class=\"line\">   - **`collection`**：指定要遍历的集合或数组的名称。</span><br><span class=\"line\">   - **`item`**：当前元素的变量名。</span><br><span class=\"line\">   - **`index`**：可选，表示当前元素的索引。</span><br><span class=\"line\">   - **`open`**：开始符号，如左括号。</span><br><span class=\"line\">   - **`close`**：结束符号，如右括号。</span><br><span class=\"line\">   - **`separator`**：元素间的分隔符。</span><br><span class=\"line\"></span><br><span class=\"line\">6. **`&lt;trim&gt;`**</span><br><span class=\"line\">   - **`prefix`**：添加到内部SQL语句的开头的前缀。</span><br><span class=\"line\">   - **`suffix`**：添加到内部SQL语句的结尾的后缀。</span><br><span class=\"line\">   - **`prefixOverrides`**：从内部SQL语句开头移除的字符串。</span><br><span class=\"line\">   - **`suffixOverrides`**：从内部SQL语句结尾移除的字符串。</span><br><span class=\"line\"></span><br><span class=\"line\">7. **`&lt;bind&gt;`**</span><br><span class=\"line\">   - **`name`**：定义的变量名。</span><br><span class=\"line\">   - **`value`**：变量的值，可以是一个表达式。</span><br><span class=\"line\"></span><br><span class=\"line\">8. **`&lt;sql&gt;`** 和 **`&lt;include&gt;`**</span><br><span class=\"line\">   - **`&lt;sql&gt;`**：用于定义可重用的SQL片段。</span><br><span class=\"line\">   - **`&lt;include&gt;`**：用于包含由`&lt;sql&gt;`定义的SQL片段。</span><br><span class=\"line\">   - **`refid`**：在`&lt;include&gt;`标签中引用`&lt;sql&gt;`片段的ID。</span><br><span class=\"line\"></span><br><span class=\"line\">9. **`&lt;when&gt;`** 和 **`&lt;otherwise&gt;`** 在 **`&lt;choose&gt;`** 内部使用，已经提到过。</span><br><span class=\"line\"></span><br><span class=\"line\">每个标签都有自己的用途和特定的属性，这些属性帮助你控制SQL语句的动态生成过程。在实际应用中，这些标签通常会被组合使用，以生成复杂和灵活的SQL查询。例如，`&lt;if&gt;`标签可以嵌套在`&lt;foreach&gt;`标签中，或者`&lt;where&gt;`和`&lt;set&gt;`标签可以包含`&lt;if&gt;`或`&lt;choose&gt;`结构来进一步定制输出的SQL语句。</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.`foreach` 标签的关键属性</span><br><span class=\"line\"></span><br><span class=\"line\">- **`collection`**：指定要迭代的集合或数组的名称。如果你传递的是一个单一的List或数组参数，`collection`属性可以省略，MyBatis会自动识别。对于Map类型的参数，需要明确指定Map中的键名作为`collection`属性的值。</span><br><span class=\"line\"></span><br><span class=\"line\">- **`item`**：表示每次迭代中当前元素的变量名。</span><br><span class=\"line\"></span><br><span class=\"line\">- **`index`**：表示当前元素在集合中的索引位置的变量名，这个属性是可选的。</span><br><span class=\"line\"></span><br><span class=\"line\">- **`open`** 和 **`close`**：分别指定开始和结束符号，常用于构建SQL语句的括号。</span><br><span class=\"line\"></span><br><span class=\"line\">- **`separator`**：指定迭代元素之间的分隔符，如逗号。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 示例</span><br><span class=\"line\"></span><br><span class=\"line\">假设你有一个方法，接受一个整数列表，并且你想根据这些ID查询数据库中的记录：</span><br><span class=\"line\"></span><br><span class=\"line\">#### Java接口定义</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">public interface UserMapper &#123;</span><br><span class=\"line\">    List&lt;User&gt; findUsersByIds(@Param(&quot;ids&quot;) List&lt;Integer&gt; ids);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"映射文件中的SQL语句\"><a href=\"#映射文件中的SQL语句\" class=\"headerlink\" title=\"映射文件中的SQL语句\"></a>映射文件中的SQL语句</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findUsersByIds&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;User&quot;</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM user WHERE id IN</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;ids&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">open</span>=<span class=\"string\">&quot;(&quot;</span> <span class=\"attr\">close</span>=<span class=\"string\">&quot;)&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">        #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中：</p>\n<ul>\n<li><code>collection=&quot;ids&quot;</code> 表示传入的参数是名为<code>ids</code>的列表。</li>\n<li><code>item=&quot;id&quot;</code> 表示每次迭代的元素被称为<code>id</code>。</li>\n<li><code>open=&quot;(&quot;</code> 和 <code>close=&quot;)&quot;</code> 创建了一个包含所有ID的列表，它们被包裹在圆括号内。</li>\n<li><code>separator=&quot;,&quot;</code> 在每个ID之间插入一个逗号。</li>\n</ul>\n<p>当调用<code>findUsersByIds</code>方法并传入一个ID列表时，MyBatis会生成一个SQL语句，其中包含一个适合的IN子句，以匹配提供的ID列表。</p>\n<p>在MyBatis中，动态SQL主要通过使用<code>&lt;if&gt;</code>、<code>&lt;choose&gt;</code>、<code>&lt;when&gt;</code>、<code>&lt;otherwise&gt;</code>、<code>&lt;where&gt;</code>、<code>&lt;set&gt;</code>、<code>&lt;foreach&gt;</code>等标签来实现。下面分别介绍<code>&lt;update&gt;</code>和<code>&lt;insert&gt;</code>标签的动态写法：</p>\n<h3 id=\"2-标签动态写法\"><a href=\"#2-标签动态写法\" class=\"headerlink\" title=\"2. &lt;update&gt;标签动态写法\"></a>2. <code>&lt;update&gt;</code>标签动态写法</h3><p>假设我们有一个用户表<code>users</code>，字段包括<code>id</code>、<code>name</code>、<code>email</code>和<code>status</code>。我们想要更新用户的<code>name</code>和<code>email</code>，但是只有当它们不为null时才进行更新。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;updateUser&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;com.example.User&quot;</span>&gt;</span></span><br><span class=\"line\">    UPDATE users</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name != null&quot;</span>&gt;</span></span><br><span class=\"line\">            name = #&#123;name&#125;,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;email != null&quot;</span>&gt;</span></span><br><span class=\"line\">            email = #&#123;email&#125;,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">    WHERE id = #&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里使用了<code>&lt;set&gt;</code>标签来包含可能更新的字段，每个字段都用<code>&lt;if&gt;</code>标签包裹，通过<code>test</code>属性判断参数是否非空。</p>\n<h3 id=\"3-标签动态写法\"><a href=\"#3-标签动态写法\" class=\"headerlink\" title=\"3. &lt;insert&gt;标签动态写法\"></a>3. <code>&lt;insert&gt;</code>标签动态写法</h3><p>同样以<code>users</code>表为例，我们想要插入一条新记录，但是某些字段可能为空或未提供值，我们可以根据提供的值动态生成插入语句。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insertUser&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;com.example.User&quot;</span>&gt;</span></span><br><span class=\"line\">    INSERT INTO users</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">prefix</span>=<span class=\"string\">&quot;(&quot;</span> <span class=\"attr\">suffix</span>=<span class=\"string\">&quot;)&quot;</span> <span class=\"attr\">suffixOverrides</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name != null&quot;</span>&gt;</span></span><br><span class=\"line\">            name,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;email != null&quot;</span>&gt;</span></span><br><span class=\"line\">            email,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;status != null&quot;</span>&gt;</span></span><br><span class=\"line\">            status,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br><span class=\"line\">    VALUES</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">prefix</span>=<span class=\"string\">&quot;(&quot;</span> <span class=\"attr\">suffix</span>=<span class=\"string\">&quot;)&quot;</span> <span class=\"attr\">suffixOverrides</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name != null&quot;</span>&gt;</span></span><br><span class=\"line\">            #&#123;name&#125;,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;email != null&quot;</span>&gt;</span></span><br><span class=\"line\">            #&#123;email&#125;,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;status != null&quot;</span>&gt;</span></span><br><span class=\"line\">            #&#123;status&#125;,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里使用了<code>&lt;trim&gt;</code>标签来帮助处理括号和逗号的添加和去除，使得SQL语句格式正确。每个字段同样使用<code>&lt;if&gt;</code>标签进行条件判断。</p>\n<p>这些动态SQL技巧可以大大提高代码的灵活性和可维护性。</p>\n<h3 id=\"4-trim标签\"><a href=\"#4-trim标签\" class=\"headerlink\" title=\"4.trim标签\"></a>4.trim标签</h3><p><code>&lt;trim&gt;</code>标签是MyBatis框架中一个非常有用的元素，主要用于处理动态SQL中常见的问题，如多余的前缀、后缀或分隔符（如逗号、AND等）。它允许你在生成SQL语句时自动添加或移除特定的字符串，从而确保SQL语句的正确性和效率。下面是<code>&lt;trim&gt;</code>标签的一些关键特性和属性：</p>\n<h4 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h4><ul>\n<li><strong>prefix</strong>：指定要添加到<code>&lt;trim&gt;</code>元素内部SQL语句开始处的前缀。</li>\n<li><strong>suffix</strong>：指定要添加到<code>&lt;trim&gt;</code>元素内部SQL语句结束处的后缀。</li>\n<li><strong>prefixOverrides</strong>：指定要从<code>&lt;trim&gt;</code>元素内部SQL语句开始处移除的字符串。这通常用于移除多余的逗号、AND或OR关键字。</li>\n<li><strong>suffixOverrides</strong>：指定要从<code>&lt;trim&gt;</code>元素内部SQL语句结束处移除的字符串。</li>\n</ul>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ol>\n<li><p><strong>WHERE子句的动态构建</strong>：<br>当你需要根据传入的参数动态构建WHERE子句时，<code>&lt;trim&gt;</code>标签可以自动添加”WHERE”关键字，并且确保不会出现多余的AND关键字。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">prefix</span>=<span class=\"string\">&quot;WHERE&quot;</span> <span class=\"attr\">prefixOverrides</span>=<span class=\"string\">&quot;AND&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;id != null&quot;</span>&gt;</span> AND id = #&#123;id&#125; <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name != null&quot;</span>&gt;</span> AND name = #&#123;name&#125; <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>SET子句的动态构建</strong>：<br>在UPDATE语句中，<code>&lt;trim&gt;</code>标签可以用来构建动态的SET子句，确保不会有额外的逗号。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">prefix</span>=<span class=\"string\">&quot;SET&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name != null&quot;</span>&gt;</span> name = #&#123;name&#125;, <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;age != null&quot;</span>&gt;</span> age = #&#123;age&#125;, <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>VALUES子句的动态构建</strong>：<br>在INSERT语句中，<code>&lt;trim&gt;</code>可以帮助构建动态的列名和值列表。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">prefix</span>=<span class=\"string\">&quot;(&quot;</span> <span class=\"attr\">suffix</span>=<span class=\"string\">&quot;)&quot;</span> <span class=\"attr\">suffixOverrides</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name != null&quot;</span>&gt;</span> name, <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;age != null&quot;</span>&gt;</span> age, <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br><span class=\"line\">VALUES</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">prefix</span>=<span class=\"string\">&quot;(&quot;</span> <span class=\"attr\">suffix</span>=<span class=\"string\">&quot;)&quot;</span> <span class=\"attr\">suffixOverrides</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name != null&quot;</span>&gt;</span> #&#123;name&#125;, <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;age != null&quot;</span>&gt;</span> #&#123;age&#125;, <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>假设我们有以下需求：构建一个动态的SQL查询，如果<code>userId</code>和<code>username</code>都有值，则需要包含这两个字段的查询条件；如果没有值，则不包含。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectUsersByCriteria&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;User&quot;</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM users</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">prefix</span>=<span class=\"string\">&quot;WHERE&quot;</span> <span class=\"attr\">prefixOverrides</span>=<span class=\"string\">&quot;AND&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;userId != null&quot;</span>&gt;</span> AND id = #&#123;userId&#125; <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;username != null&quot;</span>&gt;</span> AND username = #&#123;username&#125; <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，即使某些条件未被满足，SQL语句也不会出错，因为<code>&lt;trim&gt;</code>标签会确保正确的语法。</p>\n<h3 id=\"5-补充说明：MyBatis动态SQL——更多细节与高级用法\"><a href=\"#5-补充说明：MyBatis动态SQL——更多细节与高级用法\" class=\"headerlink\" title=\"5.补充说明：MyBatis动态SQL——更多细节与高级用法\"></a>5.补充说明：MyBatis动态SQL——更多细节与高级用法</h3><h4 id=\"1-标签\"><a href=\"#1-标签\" class=\"headerlink\" title=\"1. &lt;choose&gt;, &lt;when&gt;, &lt;otherwise&gt;标签\"></a>1. <code>&lt;choose&gt;</code>, <code>&lt;when&gt;</code>, <code>&lt;otherwise&gt;</code>标签</h4><p>这些标签组合起来类似于Java中的<code>switch-case</code>结构，用于在多个条件中选择一个执行。这在构建复杂查询条件时特别有用，例如根据不同的业务逻辑分支生成不同的SQL片段。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">choose</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;type == &#x27;active&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">        AND status = &#x27;active&#x27;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;type == &#x27;inactive&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">        AND status = &#x27;inactive&#x27;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">otherwise</span>&gt;</span></span><br><span class=\"line\">        -- 如果没有匹配的条件，则不做任何操作</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">otherwise</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">choose</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-标签\"><a href=\"#2-标签\" class=\"headerlink\" title=\"2. &lt;bind&gt;标签\"></a>2. <code>&lt;bind&gt;</code>标签</h4><p><code>&lt;bind&gt;</code>标签用于定义局部变量，可以在后续的SQL片段中重用。这对于减少代码重复和提高代码可读性很有帮助。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findUsersByName&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bind</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;escapedName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&#x27;%&#x27;+name+&#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class=\"line\">    SELECT * FROM users WHERE name LIKE #&#123;escapedName&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>&lt;bind&gt;</code>标签创建了一个名为<code>escapedName</code>的变量，其值为<code>%</code>加上传入的名字再加上<code>%</code>，这样就可以在LIKE子句中使用这个变量，而无需直接在SQL语句中拼接字符串，提高了安全性。</p>\n<h4 id=\"3-标签的高级用法\"><a href=\"#3-标签的高级用法\" class=\"headerlink\" title=\"3. &lt;foreach&gt;标签的高级用法\"></a>3. <code>&lt;foreach&gt;</code>标签的高级用法</h4><p>除了基本的使用外，<code>&lt;foreach&gt;</code>标签还支持闭合表达式（closing expression），这允许在循环结束时添加额外的代码片段。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findUsersByIds&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;User&quot;</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM users WHERE id IN</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;list&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;item&quot;</span> <span class=\"attr\">open</span>=<span class=\"string\">&quot;(&quot;</span> <span class=\"attr\">close</span>=<span class=\"string\">&quot;)&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">        #&#123;item&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\">    ORDER BY id DESC</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>ORDER BY id DESC</code>是循环结束后添加的SQL片段，确保了查询结果按ID降序排列。</p>\n<h4 id=\"4-标签\"><a href=\"#4-标签\" class=\"headerlink\" title=\"4. &lt;sql&gt;标签\"></a>4. <code>&lt;sql&gt;</code>标签</h4><p><code>&lt;sql&gt;</code>标签用于定义可复用的SQL片段。这有助于保持代码的DRY（Don’t Repeat Yourself）原则。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sql</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;commonFields&quot;</span>&gt;</span>id, name, email, status<span class=\"tag\">&lt;/<span class=\"name\">sql</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findUsers&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;User&quot;</span>&gt;</span></span><br><span class=\"line\">    SELECT</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">&quot;commonFields&quot;</span>/&gt;</span></span><br><span class=\"line\">    FROM users</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里，<code>&lt;sql&gt;</code>标签定义了一个包含常用字段的SQL片段，然后在<code>&lt;select&gt;</code>语句中通过<code>&lt;include&gt;</code>标签引用它。</p>\n<h4 id=\"5-和标签\"><a href=\"#5-和标签\" class=\"headerlink\" title=\"5. &lt;isNotEmpty&gt;和&lt;isNotNUll&gt;标签\"></a>5. <code>&lt;isNotEmpty&gt;</code>和<code>&lt;isNotNUll&gt;</code>标签</h4><p>虽然这些不是MyBatis的标准标签，但许多MyBatis插件提供了这样的功能，用于检查变量是否非空或非NULL。这在处理动态SQL时可以提供更简洁的语法。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">isNotEmpty</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\">    AND name = #&#123;name&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">isNotEmpty</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这些标签可以简化条件判断，使SQL映射文件更加清晰和易于维护。</p>\n<p>通过以上补充，我们看到了MyBatis动态SQL的更多细节和高级用法，这将帮助开发者更高效地处理复杂的数据库查询需求。</p>\n<h2 id=\"开发规范——Restful\"><a href=\"#开发规范——Restful\" class=\"headerlink\" title=\"开发规范——Restful\"></a>开发规范——Restful</h2><ul>\n<li><strong>REST(REpresentational State Transfer)，表述性状态转换，它是一种软件架构风格</strong></li>\n</ul>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240616145316160.png\" alt=\"image-20240616145316160\"></p>\n<ul>\n<li>注意事项</li>\n<li>REST是风格，是约定方式，约定不是规定，可以打破。</li>\n<li>描述模块的功能通常使用复数，也就是加s的格式来描述，表示此类资源，而非单个资源。如:users、emps、books。</li>\n</ul>\n<h2 id=\"开发规范——统一响应结果\"><a href=\"#开发规范——统一响应结果\" class=\"headerlink\" title=\"开发规范——统一响应结果\"></a>开发规范——统一响应结果</h2><ul>\n<li>前后端交互统一响应结果Result类</li>\n</ul>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240616145459994.png\" alt=\"image-20240616145459994\"></p>\n<ul>\n<li>开发流程</li>\n</ul>\n<p><img src=\"/2024/05/02/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/image-20240616145657932.png\" alt=\"image-20240616145657932\"></p>\n","categories":[],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://example.com/tags/JavaWeb/"}]},{"title":"Java练习题","date":"2024-04-25T04:48:53.000Z","path":"2024/04/25/Java练习题/","content":"<h1 id=\"题-1-：最简单的四舍五入\"><a href=\"#题-1-：最简单的四舍五入\" class=\"headerlink\" title=\"题(1)：最简单的四舍五入\"></a>题(1)：最简单的四舍五入</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123; </span><br><span class=\"line\">  \t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in); <span class=\"type\">double</span>     d= scanner.nextDouble();</span><br><span class=\"line\">\t<span class=\"comment\">//write your code here......</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>)(d+<span class=\"number\">0.5</span>);</span><br><span class=\"line\">    System.out.println(i);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":[{"name":"练习题，面试题","slug":"练习题，面试题","permalink":"http://example.com/tags/%E7%BB%83%E4%B9%A0%E9%A2%98%EF%BC%8C%E9%9D%A2%E8%AF%95%E9%A2%98/"}]},{"title":"Java学习笔记","date":"2024-04-08T06:56:32.000Z","path":"2024/04/08/Java学习笔记/","content":"<h1 id=\"1、如何拿到用户的输入\"><a href=\"#1、如何拿到用户的输入\" class=\"headerlink\" title=\"1、如何拿到用户的输入\"></a>1、如何拿到用户的输入</h1><p>有时候的一些业务是需要用户和系统互动的，这时，我们就需要来接收用户的互动，在java中，通常这么做</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//新建一个扫描器对象sc</span></span><br><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"><span class=\"comment\">//定义一个变量来接收用户输入，类型要看你接受的是字符串还是数据而变动</span></span><br><span class=\"line\">数据类型 变量 = sc.nextInt();</span><br></pre></td></tr></table></figure>\n\n<p>举个例子，比如我下面这段代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;请您输出查询的id&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> sc.nextInt();</span><br><span class=\"line\">operator.searchMovieById(id);</span><br></pre></td></tr></table></figure>\n\n<p>很好理解，接收用户输入的数字id然后把他传给<code>operator.searchMovieById(id);</code>方法完成代码逻辑。</p>\n<h1 id=\"2、this关键字\"><a href=\"#2、this关键字\" class=\"headerlink\" title=\"2、this关键字\"></a>2、this关键字</h1><p>在java中this关键字的作用是:</p>\n<ul>\n<li><p><code>this</code>就是一个变量，可以用在方法中，用来拿到当前对象；哪个对象调用方法，this就指向那个对象，也就是拿到那个对象</p>\n</li>\n<li><p>用来解决对象的成员变量与方法内部变量的名称一样时，导致访问冲突问题的</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Movie[] movies;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">MovieOperator</span><span class=\"params\">(Movie[] movies)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.movies = movies;</span><br></pre></td></tr></table></figure>\n\n<p>如果写成<code>movies = movies</code> 这时就会报错，让idea觉得你这是在该函数内部自己赋值给自己，显然不成立，如果加上this就会被识别为是<code>Movie[ ]</code> 的对象<code>movies</code>。</p>\n<h1 id=\"3、常用API-应用程序编程接口\"><a href=\"#3、常用API-应用程序编程接口\" class=\"headerlink\" title=\"3、常用API(应用程序编程接口)\"></a>3、常用API(应用程序编程接口)</h1><h2 id=\"1-、String创建对象封装字符串数据的方式\"><a href=\"#1-、String创建对象封装字符串数据的方式\" class=\"headerlink\" title=\"(1)、String创建对象封装字符串数据的方式*\"></a>(1)、String创建对象封装字符串数据的方式*</h2><ul>\n<li>方式一:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;小黑&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">schoolName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;黑马程序员&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方式二：调用String类的构造器初始化字符串对象</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">String</span><span class=\"params\">()</span> <span class=\"comment\">//创建一个空白字符串对象，不含有任何内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">String</span><span class=\"params\">(String original)</span> <span class=\"comment\">// 根据传入的字符串内容，来创建字符串对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">String</span><span class=\"params\">(<span class=\"type\">char</span>[] chars)</span><span class=\"comment\">// 根据字符数组的内容，来创建字符串对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">String</span><span class=\"params\">(<span class=\"type\">byte</span>[] bytes)</span> <span class=\"comment\">//根据字节数组的内容，来创建字符串对象</span></span><br></pre></td></tr></table></figure>\n\n<p>(2)有关字符串的一些方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查询字符串长度(字符个数)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">length</span><span class=\"params\">()</span></span><br><span class=\"line\"><span class=\"comment\">//获取某个索引位置处的字符返回</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">char</span> <span class=\"title function_\">charAt</span><span class=\"params\">(<span class=\"type\">int</span> index)</span></span><br><span class=\"line\"> <span class=\"comment\">//将当前字符串转换成字符数组返回</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">char</span>[] toCharArray():</span><br><span class=\"line\"><span class=\"comment\">//判断当前字符串与另一个字符串的内容一样，一样返回true</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(object anobject)</span></span><br><span class=\"line\"> <span class=\"comment\">//判断当前字符串与另一个字符串的内容是否一样(忽略大小写)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equalsIgnoreCase</span><span class=\"params\">(String anotherString)</span></span><br><span class=\"line\">  <span class=\"comment\">//根据开始和结束索引进行截取，得到新的字符串(包前不包后)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">substring</span><span class=\"params\">(<span class=\"type\">int</span> beginIndex, <span class=\"type\">int</span> endIndex)</span></span><br><span class=\"line\">  <span class=\"comment\">//从传入的索引处截取，截取到末尾，得到新的字符串返回</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">substring</span><span class=\"params\">(<span class=\"type\">int</span> beginIndex)</span></span><br><span class=\"line\"><span class=\"comment\">//使用新值，将字符串中的旧值替换，得到新的字符串</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">replace</span><span class=\"params\">(CharSequence target,CharSequence replacement)</span></span><br><span class=\"line\"> <span class=\"comment\">////判断字符串中是否包含了某个字符串</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">contains</span><span class=\"params\">(Charsequence s)</span></span><br><span class=\"line\"><span class=\"comment\">//判断字符串是否以某个字符串内容开头，开头返回true，反之返回false</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">startsWith</span><span class=\"params\">(String prefix)</span></span><br><span class=\"line\"><span class=\"comment\">//判断字符串是否以某个字符串内容结尾，结尾返回true，反之返回false</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">endWith</span><span class=\"params\">(String prefix)</span></span><br><span class=\"line\"><span class=\"comment\">//把字符串按照某个字符串内容分割，并返回字符串数组回来</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String[] split(String regex)</span><br><span class=\"line\"><span class=\"comment\">//indexOf用于获取数据在字符串中第一次出现的位置</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;world hello hello world hello&quot;</span></span><br><span class=\"line\">s.indexOf(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//lastIndexOf用于获取数据在字符串中最后一次出现的位置</span></span><br><span class=\"line\">s.lastIndexOf(<span class=\"string\">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>（3）字符串进行比较有哪些需要注意的？</p>\n<p>1、字符串的比较使用<code>==</code>比较好吗?为什么?什么时候使用<code>==</code>?</p>\n<ul>\n<li>不好，对于字符串对象的比较，&#x3D;&#x3D;比较的是地址，容易出业务bug</li>\n<li>基本数据类型的变量或者值应该使用&#x3D;&#x3D;比较。</li>\n</ul>\n<p>2、开发中比较字符串推荐使用什么方式比较?<br>使用<code>String</code>提供的<code>equals</code>方法，它只关心字符串内容一样就返回true，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法名</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(object anobject)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equalsIgnoreCase</span><span class=\"params\">(String anotherstring)</span></span><br></pre></td></tr></table></figure>\n\n<p>(4)随机产生验证码(使用字符串方式)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.StringController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//随机产生验证码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringDemo2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(randomCode(<span class=\"number\">4</span>));</span><br><span class=\"line\">        System.out.println(randomCode(<span class=\"number\">5</span>));</span><br><span class=\"line\">        System.out.println(randomCode(<span class=\"number\">6</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">randomCode</span><span class=\"params\">(<span class=\"type\">int</span> tempCode)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Random</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">code</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span><span class=\"string\">&quot;abcdefghijklmnopqrstuVWXyZABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//我们需要5位验证码调用for循环</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; tempCode; i++) &#123;</span><br><span class=\"line\">          <span class=\"type\">int</span> <span class=\"variable\">j</span>  <span class=\"operator\">=</span> r.nextInt(data.length());</span><br><span class=\"line\">          <span class=\"comment\">//将字符交给code</span></span><br><span class=\"line\">         code += data.charAt(j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(5)两种方式的区别</p>\n<ul>\n<li><code>双引号给出的字符串对象，存在于堆内存中的常量池中，相同内容只会存储一份。</code></li>\n<li><code>new 字符串对象，每new一次都会在堆内存中产生一个字符串对象。</code></li>\n</ul>\n<h3 id=\"2）字符串大小写转换\"><a href=\"#2）字符串大小写转换\" class=\"headerlink\" title=\"2）字符串大小写转换\"></a>2）字符串大小写转换</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span><span class=\"string\">&quot;Hello,World&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//字符串变小写</span></span><br><span class=\"line\">s.toLowerCase()</span><br><span class=\"line\"><span class=\"comment\">//字符串变大写</span></span><br><span class=\"line\">s.toUpperCase()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3）StringBuilder方法\"><a href=\"#3）StringBuilder方法\" class=\"headerlink\" title=\"3）StringBuilder方法\"></a>3）StringBuilder方法</h3><p>java提供的一种对字符串进行拼接，反转的快捷类</p>\n<p>使用实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">StringBuilder</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\"><span class=\"comment\">//拼接字符串</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">      s.append(i);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">System.out.println(s);</span><br><span class=\"line\"><span class=\"comment\">//反转字符串</span></span><br><span class=\"line\">s.reverse();</span><br><span class=\"line\"><span class=\"comment\">//在字符串指定位置插入</span></span><br><span class=\"line\">s.insert(<span class=\"number\">1</span>,<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">System.out.println(s.toString());</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2、ArrayList集合概述\"><a href=\"#2、ArrayList集合概述\" class=\"headerlink\" title=\"2、ArrayList集合概述\"></a>2、ArrayList集合概述</h2><p>1.怎么学？</p>\n<ul>\n<li><p>arrayList会提供创建容器对象的方式</p>\n</li>\n<li><p>会提供相应方法对容器进行操作</p>\n<p>增 删 改 查</p>\n</li>\n</ul>\n<p>创建对象 &#x3D;&#x3D;&#x3D;&#x3D;&gt; 添加增删改查方法 &#x3D;&#x3D;&#x3D;&#x3D;&gt; 了解集合特点</p>\n<p>2.ArrayList常用方法</p>\n<p>构造器</p>\n<p>ArrayList<E><br>是用的最多、最常见的一种集合。</E></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个空的集合对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ArrayList</span><span class=\"params\">()</span></span><br><span class=\"line\">    <span class=\"comment\">//存储任意数据类型</span></span><br><span class=\"line\">    <span class=\"type\">ArrayList</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    <span class=\"comment\">/** 也可以这么写 */</span></span><br><span class=\"line\">    Array&lt;Object&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<p>常用方法名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将指定的元素添加到此集合的末尾</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">add</span><span class=\"params\">(E e)</span></span><br><span class=\"line\">    <span class=\"comment\">//在此集合中的指定位置插入指定的元素</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> index,E element)</span></span><br><span class=\"line\">    <span class=\"comment\">//返回指定索引处的元素</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> E <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> index)</span></span><br><span class=\"line\">    <span class=\"comment\">//返回集合中的元素的个数</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">size</span><span class=\"params\">()</span></span><br><span class=\"line\">    <span class=\"comment\">//删除指定索引处的元素，返回被删除的元素</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> E <span class=\"title function_\">remove</span><span class=\"params\">(<span class=\"type\">int</span> index)</span></span><br><span class=\"line\">    <span class=\"comment\">//删除指定的元素，返回删除是否成功</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">remove</span><span class=\"params\">(Object o)</span></span><br><span class=\"line\">    <span class=\"comment\">//修改指定索引处的元素，返回被修改的元素</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> E <span class=\"title function_\">set</span><span class=\"params\">(<span class=\"type\">int</span> index,E element)</span></span><br></pre></td></tr></table></figure>\n\n<p>3.从集合中遍历元素，并筛选出元素删除它，应该如何操作才能不出bug?<br><code>方式一:每次删除一个数据后，索引-1。</code></p>\n<p><code>方式二:从集合后面遍历然后删除，可以避免漏掉元素。</code></p>\n<h3 id=\"1-集合中常用的接口\"><a href=\"#1-集合中常用的接口\" class=\"headerlink\" title=\"(1) 集合中常用的接口\"></a>(1) 集合中常用的接口</h3><p>1.Collection接口(面对单一的数据处理)</p>\n<p>常用子接口：List，Set，Queue</p>\n<p>List：按照 插入顺序保存数据，数据可以重复</p>\n<p>具体实现类：ArrayList，LinkedList</p>\n<p>Set：集，无序保存，数据不能重复</p>\n<p>具体实现类：HashSet(面对K-V键值对的数据处理)</p>\n<p>Queue：队列</p>\n<p>具体实现类：ArrayBlockingQueue</p>\n<p>1.Map接口</p>\n<p>具体实现类：hashMap，HashTable</p>\n<h3 id=\"（2）ArrayList\"><a href=\"#（2）ArrayList\" class=\"headerlink\" title=\"（2）ArrayList\"></a>（2）ArrayList</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestList</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//ArrayList:Array + List</span></span><br><span class=\"line\">        <span class=\"comment\">// TODO List:列表，清单</span></span><br><span class=\"line\">        <span class=\"comment\">//      按照数据插入顺序进行存储</span></span><br><span class=\"line\">        <span class=\"type\">ArrayList</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">        <span class=\"type\">ArrayList</span> <span class=\"variable\">list1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">        list1.add(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        list1.add(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">        list1.add(<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//创建集合对象</span></span><br><span class=\"line\">        <span class=\"comment\">//1.不需要传入参数，底层数组为空数组</span></span><br><span class=\"line\">        <span class=\"comment\">//2.构造参数需要传递一个int类型的值，设置底层数组的长度</span></span><br><span class=\"line\">        <span class=\"comment\">//3.构造参数需要传递一个Collection集合类型的值，用于将其他集合中的数据放置在当前集合中</span></span><br><span class=\"line\">        <span class=\"comment\">// TODO 增加数据</span></span><br><span class=\"line\">        <span class=\"comment\">//   add方法添加数据时，只要将数据作为参数传递到add方法即可</span></span><br><span class=\"line\">        <span class=\"comment\">//  添加数据时，如果集合中没有任何的数据，那么底层就会创建长度为10的数组</span></span><br><span class=\"line\">        <span class=\"comment\">//  add方法也可以传入两个参数，第一个是索引,第二个是添加数据的值</span></span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;zhangsan&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;wangwu&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;xiaoli&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"number\">1</span>,<span class=\"string\">&quot;zhaoliu&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//在该集合中传入其他集合</span></span><br><span class=\"line\">        list.addAll(list1);</span><br><span class=\"line\">        <span class=\"comment\">//     获取集合中的数据条数</span></span><br><span class=\"line\">        System.out.println(list.size());<span class=\"comment\">//3</span></span><br><span class=\"line\">        <span class=\"comment\">//获取指定位置的数据，传入的是索引</span></span><br><span class=\"line\">        System.out.println(list.get(<span class=\"number\">1</span>));<span class=\"comment\">//wangwu</span></span><br><span class=\"line\">        <span class=\"comment\">//遍历集合中的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">            System.out.println(list.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果循环数据不关心数据的位置，采用特殊的for循环</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : list)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;集合中的数据：&quot;</span>+obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// todo 修改数据</span></span><br><span class=\"line\">        <span class=\"comment\">//将指定位置的数据进行修改set()注意，传递两个参数，第一个参数表示数据的位置，第二个表示修改后的值</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">oldVal</span> <span class=\"operator\">=</span> list.set(<span class=\"number\">1</span>, <span class=\"string\">&quot;lisi&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;修改前的值：&quot;</span>+oldVal);</span><br><span class=\"line\">        <span class=\"comment\">// todo 删除数据</span></span><br><span class=\"line\">        <span class=\"comment\">//将指定位置的数据进行修改remove()注意，传递1个参数，一个参数表示数据的位置。</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">remove</span> <span class=\"operator\">=</span> list.remove(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;删除的值&quot;</span>+remove);</span><br><span class=\"line\">        <span class=\"comment\">//清空集合的数据</span></span><br><span class=\"line\"><span class=\"comment\">//        list.clear();</span></span><br><span class=\"line\">        <span class=\"comment\">//删除指定集合中的数据(比如上面新添加的list1)</span></span><br><span class=\"line\"><span class=\"comment\">//        list.removeAll(list1);</span></span><br><span class=\"line\">        <span class=\"comment\">//判断集合中是否存在某条数据,包含返回true不包含返回false</span></span><br><span class=\"line\">        System.out.println(list.contains(<span class=\"string\">&quot;lisi&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//获取数据在索引中第一个的位置，数据不存在返回-1，存在返回数据所在位置的索引值</span></span><br><span class=\"line\">        System.out.println(list.indexOf(<span class=\"string\">&quot;lisi&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//获取最后出现的位置的索引值(集合中有多个zhangsan，但是返回的是最后一个zhangsan的索引值)</span></span><br><span class=\"line\">        list.lastIndexOf(<span class=\"string\">&quot;lisi&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//复制一个集合</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">clone</span> <span class=\"operator\">=</span> list.clone();</span><br><span class=\"line\">        <span class=\"type\">ArrayList</span> <span class=\"variable\">list2</span> <span class=\"operator\">=</span> (ArrayList)clone;</span><br><span class=\"line\">        <span class=\"comment\">//该集合和被复制的list集合额内容一致</span></span><br><span class=\"line\">        System.out.println(list2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// TODO 打印集合对象</span></span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（3）LinkedList\"><a href=\"#（3）LinkedList\" class=\"headerlink\" title=\"（3）LinkedList\"></a>（3）LinkedList</h3><p>LinkedList &#x3D; Linked(链接) + List</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LinkedListTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//todo 集合--- Collection</span></span><br><span class=\"line\">        <span class=\"comment\">// LinkedList</span></span><br><span class=\"line\">        <span class=\"comment\">//构建集合对象</span></span><br><span class=\"line\">        <span class=\"type\">LinkedList</span> <span class=\"variable\">linkedList</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>();</span><br><span class=\"line\">        LinkedList linkedList1=<span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>();</span><br><span class=\"line\">        <span class=\"comment\">//增加第一个数据</span></span><br><span class=\"line\">        linkedList.add(<span class=\"string\">&quot;zhangsan&quot;</span>);</span><br><span class=\"line\">        linkedList.add(<span class=\"string\">&quot;lisi&quot;</span>);</span><br><span class=\"line\">        linkedList.add(<span class=\"string\">&quot;wangwu&quot;</span>);</span><br><span class=\"line\">        linkedList1.add(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        linkedList1.add(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">        linkedList1.add(<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//添加一个集合</span></span><br><span class=\"line\">        linkedList.addAll(linkedList1);</span><br><span class=\"line\">        <span class=\"comment\">//链表前面增加</span></span><br><span class=\"line\"><span class=\"comment\">//        linkedList.addFirst(&quot;lisi&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">//链表后面增加</span></span><br><span class=\"line\"><span class=\"comment\">//        linkedList.add(1,&quot;wangwu&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">//获取数据</span></span><br><span class=\"line\">        <span class=\"comment\">//拿到第一个数据(开头数据)</span></span><br><span class=\"line\">        System.out.println(linkedList.getFirst());</span><br><span class=\"line\">        <span class=\"comment\">//拿到第二个数据(结尾数据)</span></span><br><span class=\"line\">        System.out.println(linkedList.getLast());</span><br><span class=\"line\">        <span class=\"comment\">//根据索引拿数据</span></span><br><span class=\"line\">        System.out.println(linkedList.get(<span class=\"number\">1</span>));<span class=\"comment\">//lisi</span></span><br><span class=\"line\">        <span class=\"comment\">// todo 遍历数据</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; linkedList.size(); i++) &#123;</span><br><span class=\"line\">            System.out.println(linkedList.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//todo 遍历数据(第二种)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj:linkedList)&#123;</span><br><span class=\"line\">            System.out.println(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除数据</span></span><br><span class=\"line\">        linkedList.remove(<span class=\"string\">&quot;lisi&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//表示删除第一个</span></span><br><span class=\"line\">        linkedList.remove(<span class=\"number\">1</span>);</span><br><span class=\"line\">        linkedList.remove();</span><br><span class=\"line\">        <span class=\"comment\">//删除链表第一个元素</span></span><br><span class=\"line\">        linkedList.removeFirst();</span><br><span class=\"line\">        <span class=\"comment\">//删除链表最后一个元素</span></span><br><span class=\"line\">        linkedList.removeLast();</span><br><span class=\"line\">        <span class=\"comment\">//push相当于addFirst方法</span></span><br><span class=\"line\">        linkedList.push(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//pop()弹出元素</span></span><br><span class=\"line\">        System.out.println(linkedList.poll());</span><br><span class=\"line\">        <span class=\"comment\">//todo 打印集合的数据</span></span><br><span class=\"line\">        System.out.println(linkedList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（4）泛型\"><a href=\"#（4）泛型\" class=\"headerlink\" title=\"（4）泛型\"></a>（4）泛型</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListQuestion</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//todo 集合</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//todo 泛型语法&lt;&gt;中放你要在集合中存储的数据类型</span></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">        <span class=\"comment\">//如果没有尖括号里面的内容，表示我在这个容器中可以存储任何类型的数据</span></span><br><span class=\"line\">        MyContainer&lt;User&gt; myContainer = <span class=\"keyword\">new</span> <span class=\"title class_\">MyContainer</span>();</span><br><span class=\"line\">        <span class=\"comment\">//会报错，因为我已经用尖括号限定了容器类类型</span></span><br><span class=\"line\"><span class=\"comment\">//        MyContainer.data = new Object();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// todo 容器类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">MyContainer</span>&lt;C&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> C data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（5）比较器\"><a href=\"#（5）比较器\" class=\"headerlink\" title=\"（5）比较器\"></a>（5）比较器</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ArrayList</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        list.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        list.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">        list.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"comment\">//new一个比较类的对象</span></span><br><span class=\"line\">        <span class=\"type\">NumberComparator</span> <span class=\"variable\">comparator</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NumberComparator</span>();</span><br><span class=\"line\">        <span class=\"comment\">//todo 集合中的数据进行比较</span></span><br><span class=\"line\">        list.sort(comparator);</span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建一个比较类，实现Comparator接口</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NumberComparator</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparator</span>&lt;Integer&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//todo 如果第一个数大于第二个数，返回结果为正数，表示升序排序</span></span><br><span class=\"line\"><span class=\"comment\">//        return o1 - o2;</span></span><br><span class=\"line\">        <span class=\"comment\">//todo 如果第一个数小于第二个数，返回结果为负数，表示升序降序</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> o2 - o1;</span><br><span class=\"line\">        <span class=\"comment\">//todo 如果第一个数等于第二个数，返回结果为0。</span></span><br><span class=\"line\"><span class=\"comment\">//        return 0;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（6）HashSet\"><a href=\"#（6）HashSet\" class=\"headerlink\" title=\"（6）HashSet\"></a>（6）HashSet</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HashSetTest</span>  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//HashSet:Hash + Set</span></span><br><span class=\"line\">        <span class=\"comment\">//Hash：哈希算法，散列(无序)</span></span><br><span class=\"line\">        <span class=\"comment\">//ArrayList：数组</span></span><br><span class=\"line\">        <span class=\"comment\">//LinkedList：</span></span><br><span class=\"line\">        <span class=\"type\">HashSet</span> <span class=\"variable\">hashSet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//todo 增加数据</span></span><br><span class=\"line\">        hashSet.add(<span class=\"string\">&quot;lisi&quot;</span>);</span><br><span class=\"line\">        hashSet.add(<span class=\"string\">&quot;zhangsan&quot;</span>);</span><br><span class=\"line\">        hashSet.add(<span class=\"string\">&quot;wangwu&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// todo 修改数据(先删除，在增加)</span></span><br><span class=\"line\">        hashSet.remove(<span class=\"string\">&quot;zhangsan&quot;</span>);</span><br><span class=\"line\">        hashSet.add(<span class=\"string\">&quot;xiaoli&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//todo 遍历数据</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : hashSet)&#123;</span><br><span class=\"line\">            System.out.println(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// todo 转换成数组</span></span><br><span class=\"line\">        Object[] objects = hashSet.toArray();</span><br><span class=\"line\">        System.out.println(hashSet);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"HashSet处理重复数据\"><a href=\"#HashSet处理重复数据\" class=\"headerlink\" title=\"HashSet处理重复数据\"></a>HashSet处理重复数据</h4><p>重写equals和hashcode方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.List;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HashSetTestForNum</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//HashSet的底层是：数组 + 链表 结构</span></span><br><span class=\"line\">        <span class=\"type\">HashSet</span> <span class=\"variable\">hashSet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>();</span><br><span class=\"line\">        <span class=\"type\">User1</span> <span class=\"variable\">user1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User1</span>();</span><br><span class=\"line\">        <span class=\"type\">User1</span> <span class=\"variable\">user2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User1</span>();</span><br><span class=\"line\">        <span class=\"type\">User1</span> <span class=\"variable\">user3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User1</span>();</span><br><span class=\"line\">        user1.id=<span class=\"number\">1001</span>;</span><br><span class=\"line\">        user1.name=<span class=\"string\">&quot;zhangsan&quot;</span>;</span><br><span class=\"line\">        user2.id=<span class=\"number\">1001</span>;</span><br><span class=\"line\">        user2.name=<span class=\"string\">&quot;zhangsan&quot;</span>;</span><br><span class=\"line\">        user3.id=<span class=\"number\">1002</span>;</span><br><span class=\"line\">        user3.name=<span class=\"string\">&quot;lisi&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        hashSet.add(user1);</span><br><span class=\"line\">        hashSet.add(user2);</span><br><span class=\"line\">        hashSet.add(user3);</span><br><span class=\"line\">        System.out.println(hashSet);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User1</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"comment\">//重写hashcode方法和equals</span></span><br><span class=\"line\">    <span class=\"comment\">//类似于内存地址</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object obj)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obj <span class=\"keyword\">instanceof</span> User1)&#123;</span><br><span class=\"line\">            <span class=\"type\">User1</span> <span class=\"variable\">testObj</span> <span class=\"operator\">=</span> (User1) obj;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(testObj.id == <span class=\"built_in\">this</span>.id)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(testObj.name.equals(<span class=\"built_in\">this</span>.name))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;User&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;id=&#x27;&quot;</span> + id + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, name=&quot;</span> + name +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-Queue接口\"><a href=\"#7-Queue接口\" class=\"headerlink\" title=\"(7)Queue接口\"></a>(7)Queue接口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.Queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestQueue</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"comment\">//todo 了解我们的Queue</span></span><br><span class=\"line\">        <span class=\"comment\">//      ArrayBlockingQueue = Array(数组) + Blocking(阻塞，等待)</span></span><br><span class=\"line\">        <span class=\"comment\">//      所以queue底层还是数组</span></span><br><span class=\"line\">        <span class=\"type\">ArrayBlockingQueue</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"comment\">//添加数据</span></span><br><span class=\"line\">        queue.add(<span class=\"string\">&quot;zhangsan&quot;</span>);</span><br><span class=\"line\">        queue.add(<span class=\"string\">&quot;lisi&quot;</span>);</span><br><span class=\"line\">        queue.add(<span class=\"string\">&quot;wangwu&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//由于我长度只给了3，所以只能存三个数据，下面这个数据无法存储,报错  Queue full，代表queue存满了</span></span><br><span class=\"line\"><span class=\"comment\">//        queue.add(&quot;xiaoli&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">//添加数据(put)方法，该方法能够体现出阻塞这一概念，当我添加的数据大于长度时，程序会继续运行，不会停止</span></span><br><span class=\"line\"><span class=\"comment\">//        queue.put(&quot;zhangsan&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        queue.put(&quot;lisi&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        queue.put(&quot;wangwu&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">//添加数据offer方法，该方法会返回一个布尔类型的值，添加成功返回true，添加失败(超出queue存储长度)返回false</span></span><br><span class=\"line\"><span class=\"comment\">//        boolean zhangsan = queue.offer(&quot;zhangsan&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        boolean lisi = queue.offer(&quot;lisi&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        boolean wangwu = queue.offer(&quot;wangwu&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(zhangsan);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(lisi);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(wangwu);</span></span><br><span class=\"line\">        <span class=\"comment\">//拿取数据(poll方法)</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(queue.poll());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(queue.poll());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(queue.poll());</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//拿取数据(take方法),当我去一个不存在的数据时，不会报错，程序不会结束，体现了一个等待，阻塞的过程</span></span><br><span class=\"line\">        System.out.println(queue.take());</span><br><span class=\"line\">        System.out.println(queue.take());</span><br><span class=\"line\">        System.out.println(queue.take());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(queue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-HashMap-处理键值对数据-K-V\"><a href=\"#8-HashMap-处理键值对数据-K-V\" class=\"headerlink\" title=\"(8)HashMap(处理键值对数据(K,V))\"></a>(8)HashMap(处理键值对数据(K,V))</h3><p>数据存储无序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestHashMap</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//HashMap = Hash + Map</span></span><br><span class=\"line\">        <span class=\"comment\">//todo 处理键值对&#123;K=V&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//创建HashMap对象</span></span><br><span class=\"line\">        HashMap&lt;String,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//添加数据put方法,当put传入的键相同时，相当于修改操作，返回被修改的值</span></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;zhangsan&quot;</span>,<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        System.out.println(map.put(<span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"string\">&quot;2&quot;</span>));<span class=\"comment\">//返回1，并且zhangsan键对应的value值被改为了2</span></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;lisi&quot;</span>,<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;wangwu&quot;</span>,<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">        System.out.println(map);</span><br><span class=\"line\">        <span class=\"comment\">//todo 查询数据(返回被删除的键对应的value值)</span></span><br><span class=\"line\">        System.out.println(map.get(<span class=\"string\">&quot;zhangsan&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//todo 删除数据</span></span><br><span class=\"line\">        map.remove(<span class=\"string\">&quot;zhangsan&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//todo 添加数据putIfAbsent方法，这个方法会检查该map里面有没有这个键值，如果有，则不做任何操作，如果没有则插入数据</span></span><br><span class=\"line\">        map.putIfAbsent(<span class=\"string\">&quot;Xiaoli&quot;</span>,<span class=\"string\">&quot;4&quot;</span>);</span><br><span class=\"line\">        map.putIfAbsent(<span class=\"string\">&quot;lisi&quot;</span>,<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//todo 修改数据replace方法</span></span><br><span class=\"line\">        map.replace(<span class=\"string\">&quot;Xiaoli&quot;</span>,<span class=\"string\">&quot;8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//todo 清空</span></span><br><span class=\"line\"><span class=\"comment\">//        map.clear();</span></span><br><span class=\"line\">        <span class=\"comment\">//todo 获取map集合中所有的key</span></span><br><span class=\"line\">        <span class=\"type\">Set</span> <span class=\"variable\">setKey</span> <span class=\"operator\">=</span> map.keySet();</span><br><span class=\"line\"><span class=\"comment\">//        for(Object i : setKey)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(map.get(i));</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//todo 获取所有的值</span></span><br><span class=\"line\">        <span class=\"type\">Collection</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> map.values();</span><br><span class=\"line\">        System.out.println(value);</span><br><span class=\"line\">        <span class=\"comment\">//判断集合中包含某个指定的value值</span></span><br><span class=\"line\">        System.out.println(map.containsValue(<span class=\"string\">&quot;1&quot;</span>));</span><br><span class=\"line\">        System.out.println(map);</span><br><span class=\"line\">        <span class=\"comment\">//todo 获取键值对对象</span></span><br><span class=\"line\">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;</span><br><span class=\"line\">            System.out.println(entry.getKey()+<span class=\"string\">&quot;=&quot;</span>+ entry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-HashTable\"><a href=\"#9-HashTable\" class=\"headerlink\" title=\"(9)HashTable\"></a>(9)HashTable</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.HashTable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestHashTable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//todo HashTable</span></span><br><span class=\"line\">        <span class=\"comment\">//  HashTable底层容量默认11</span></span><br><span class=\"line\">        <span class=\"comment\">//  HashTable的K,V不可以为null值</span></span><br><span class=\"line\">        <span class=\"comment\">//  HashTable使用的是HashCode</span></span><br><span class=\"line\">        <span class=\"comment\">//基本操作和HashMap一致(第(8)小节内容)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-迭代器\"><a href=\"#10-迭代器\" class=\"headerlink\" title=\"(10)迭代器\"></a>(10)迭代器</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.HashTable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DieDaiQi</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        HashMap&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String,Integer&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;a&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;b&quot;</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;c&quot;</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"comment\">//todo 获取map集合当中的key值，返回key值的集合</span></span><br><span class=\"line\">        Set&lt;String&gt; setKeys = map.keySet();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//TODO 使用迭代器对集合map进行处理</span></span><br><span class=\"line\">        <span class=\"comment\">//todo 创建迭代器对象(iterator)</span></span><br><span class=\"line\">        Iterator&lt;String&gt; iterator = setKeys.iterator();</span><br><span class=\"line\">        <span class=\"comment\">//hasNext用于判断是否存在下一条数据</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (iterator.hasNext())&#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取下一条数据</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> iterator.next();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">&quot;b&quot;</span>.equals(key))&#123;</span><br><span class=\"line\">                iterator.remove();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(map);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-工具类\"><a href=\"#11-工具类\" class=\"headerlink\" title=\"(11)工具类\"></a>(11)工具类</h3><h1 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h1><h2 id=\"1、标识符的命名规则\"><a href=\"#1、标识符的命名规则\" class=\"headerlink\" title=\"1、标识符的命名规则\"></a>1、标识符的命名规则</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ /T0D0标识符得命名规则</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1．英文拉丁字母</span></span><br><span class=\"line\"></span><br><span class=\"line\">/ / wx , qq</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;zhangsan&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">xingming</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;lisi&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2．符号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//@，#，%，$</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3.标识符只能采用下划线和美元$符号，其他符号不能使用，称之为特殊符号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4.空格属于特殊符号，所以也不能作为标识符使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">_name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;wangwu&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">$name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;wangwu&quot;</span> ;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">$na_me</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;wangwu&quot;</span>;</span><br><span class=\"line\">system.out.println(_name);</span><br><span class=\"line\">system.out.println($name);</span><br><span class=\"line\">system.out.println($na_me);</span><br><span class=\"line\"><span class=\"comment\">//5.阿拉伯数据0到9可以作为标识符使用，但是不能开头\t</span></span><br><span class=\"line\"><span class=\"comment\">//数字如果在标识符得开头位置，那么会被识别为数字，而不是标识符，所以会发生错误</span></span><br><span class=\"line\"><span class=\"comment\">//String 1name = &quot;zhangsan&quot;;</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">name1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;zhangsan&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//6.标识符区分大小写</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">Public</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;zhaoliu&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//7.驼峰命名法</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">userName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;小李&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、数据存储单位\"><a href=\"#2、数据存储单位\" class=\"headerlink\" title=\"2、数据存储单位\"></a>2、数据存储单位</h2><p>1.比特(bit位)：数据运算的最小存储单位。</p>\n<p>2.字节(byte)：数据的最小存储单位。</p>\n<p>字节和比特之间可以互相转换的，关系如下</p>\n<p>​\t<code>1byte = 8bit</code></p>\n<h2 id=\"3、基础数据类型\"><a href=\"#3、基础数据类型\" class=\"headerlink\" title=\"3、基础数据类型\"></a>3、基础数据类型</h2><p>1.整数数据类型:byte，short，int，long分别是8位，16位，32位，64位</p>\n<p>2.浮点类型：含有小数点的数据类型；float（单精度浮点类型），double（双进度浮点类型）。</p>\n<p> 单精度浮点类型，我们需要用F(f)来结尾如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"number\">2.0f</span>;</span><br></pre></td></tr></table></figure>\n\n<p>3.字符类型:使用符号标识文字内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;@&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>4.布尔类型：判断条件是否成立，成立取值true，不成立取值false</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">bln</span>  <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、数据类型转换\"><a href=\"#4、数据类型转换\" class=\"headerlink\" title=\"4、数据类型转换\"></a>4、数据类型转换</h2><p><strong>在java中范围小的数据可以直接转换为范围大的数据，但是范围大的数据不能转换成范围小的数据，如果非要大类型转小类型，那么我们应该使用小括号进行强制类型转换</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> s;</span><br><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span>(<span class=\"type\">byte</span>)i;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、引用数据类型\"><a href=\"#5、引用数据类型\" class=\"headerlink\" title=\"5、引用数据类型\"></a>5、引用数据类型</h2><p><code>类、String、接口、数组、枚举、特殊类型值:null</code></p>\n<h2 id=\"6、运算符、表达式、算数运算符\"><a href=\"#6、运算符、表达式、算数运算符\" class=\"headerlink\" title=\"6、运算符、表达式、算数运算符\"></a>6、运算符、表达式、算数运算符</h2><h3 id=\"1-运算符\"><a href=\"#1-运算符\" class=\"headerlink\" title=\"1.运算符\"></a>1.运算符</h3><h4 id=\"就是参与数据运算的符号，Java定义，无法自行定义\"><a href=\"#就是参与数据运算的符号，Java定义，无法自行定义\" class=\"headerlink\" title=\"就是参与数据运算的符号，Java定义，无法自行定义\"></a>就是参与数据运算的符号，Java定义，无法自行定义</h4><h3 id=\"2-表达式\"><a href=\"#2-表达式\" class=\"headerlink\" title=\"2.表达式\"></a>2.表达式</h3><h4 id=\"就是采用运算符和数据连接在一起形成符合Java语法规则的指令代码\"><a href=\"#就是采用运算符和数据连接在一起形成符合Java语法规则的指令代码\" class=\"headerlink\" title=\"就是采用运算符和数据连接在一起形成符合Java语法规则的指令代码\"></a>就是采用运算符和数据连接在一起形成符合Java语法规则的指令代码</h4><h3 id=\"3-算数运算符\"><a href=\"#3-算数运算符\" class=\"headerlink\" title=\"3.算数运算符\"></a>3.算数运算符</h3><ul>\n<li><p>二元运算符：两个元素参与运算的运算符 1 + 2</p>\n</li>\n<li><p>算术表达式 &#x3D; 元素1 二元运算符 元素2 (<em><strong>表达式是有结果的，就需要有类型，这里的类型是元素种类类型最大的那一种，最小使用的类型为int类型</strong></em>)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"number\">1</span> + <span class=\"number\">2</span>) <span class=\"comment\">//3</span></span><br><span class=\"line\">System.out.println(<span class=\"number\">2</span> - <span class=\"number\">2</span>) <span class=\"comment\">//0</span></span><br><span class=\"line\">System.out.println(<span class=\"number\">1</span> * <span class=\"number\">2</span>) <span class=\"comment\">//2</span></span><br><span class=\"line\">System.out.println(<span class=\"number\">4</span> / <span class=\"number\">2</span>) <span class=\"comment\">//2 (int,int) ==&gt;int结果类型取决于类型大的那个</span></span><br><span class=\"line\">System.out.println(<span class=\"number\">1.0</span> / <span class=\"number\">2</span>) <span class=\"comment\">//0.5 (double,int) ==&gt;double,结果类型取决于类型大的那个</span></span><br><span class=\"line\">System.out.println(<span class=\"number\">5</span> % <span class=\"number\">2</span>) <span class=\"comment\">//1(取余数，模运算)</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n</li>\n<li><p>一元运算符：一个元素参与的运算符(<code>++</code>，<code>--</code>)</p>\n<p><code>++</code>:本质是加1操作的简化版本，也成为自增运算符,注意，++i，表示i先自加1随后在进入下面的运算，而i++表示i先参加运算后再加1</p>\n<p><code>--</code>:本质是减1操作的简化版本，也成为自减运算符,注意，–i，表示i先自减少1随后在进入下面的运算，而i–表示i先参加运算后再减1</p>\n</li>\n</ul>\n<h3 id=\"4-赋值运算符\"><a href=\"#4-赋值运算符\" class=\"headerlink\" title=\"4.赋值运算符\"></a>4.赋值运算符</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OperatorDemo3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 赋值运算符</span></span><br><span class=\"line\">        <span class=\"comment\">//等号就是赋值运算符，将右边表达式的结果赋值给等号左边变量</span></span><br><span class=\"line\">        <span class=\"comment\">//赋值运算符要考虑类型的关系</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;zhangsan&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//TODO 复合赋值运算符：+=</span></span><br><span class=\"line\">        <span class=\"comment\">//  如果元素进行运算后重新赋值给自己，那么可以将运算和赋值的符号进行简化</span></span><br><span class=\"line\">        <span class=\"comment\">//  复合赋值运算符进行运算时，数据类型不会发生变化</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">0</span>;</span><br><span class=\"line\">        i+=<span class=\"number\">1</span>;<span class=\"comment\">//相当于i = i+1</span></span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">num1</span>  <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"comment\">//下面这种写法由于二元运算符最小类型为int会导致报错</span></span><br><span class=\"line\">        <span class=\"comment\">//num1 = num1 + 20;</span></span><br><span class=\"line\">        <span class=\"comment\">//使用复合运算符就不会报错了，因为复合赋值运算符进行运算时，数据类型不会发生变化</span></span><br><span class=\"line\">        num1 +=<span class=\"number\">20</span>;</span><br><span class=\"line\">        System.out.println(num1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-逻辑运算符\"><a href=\"#5-逻辑运算符\" class=\"headerlink\" title=\"5.逻辑运算符\"></a>5.逻辑运算符</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OperatorDemo1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//掌握逻辑运算符的使用</span></span><br><span class=\"line\">        <span class=\"comment\">//需求:要求手机必须满足大于等于6.95英寸，切内存大于等于8</span></span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">9.8</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">storage</span> <span class=\"operator\">=</span> <span class=\"number\">16</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> size &gt;= <span class=\"number\">6.95</span> &amp; storage &gt;=<span class=\"number\">8</span>;<span class=\"comment\">//逻辑与:一假即假，两个都成立才为true</span></span><br><span class=\"line\">        System.out.println(rs);</span><br><span class=\"line\">        <span class=\"comment\">//需求:要求手机要么满足大于等于6.95英寸，要么内存大于等于8</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">rs2</span> <span class=\"operator\">=</span> size &gt;= <span class=\"number\">10</span> &amp; storage &gt;=<span class=\"number\">8</span>;<span class=\"comment\">//逻辑或:一真即真，两个都是假才为false</span></span><br><span class=\"line\">        System.out.println(rs2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//逻辑非:取反的意思</span></span><br><span class=\"line\">        System.out.println(<span class=\"number\">2</span>&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(!(<span class=\"number\">2</span>&gt;<span class=\"number\">1</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//逻辑异或:前后结果条件相同返回false，不同返回true</span></span><br><span class=\"line\">        System.out.println(<span class=\"literal\">true</span> ^ <span class=\"literal\">true</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"literal\">false</span> ^ <span class=\"literal\">true</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//短路与: 写法:&amp;&amp;,规则:左边为false，右边不执行</span></span><br><span class=\"line\">        <span class=\"comment\">//短路或: 写法:|| 规则:左边为true，右边不执行</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span><span class=\"number\">20</span>;</span><br><span class=\"line\">        System.out.println(i&gt;<span class=\"number\">100</span> &amp;&amp; ++j&gt;<span class=\"number\">99</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span><span class=\"number\">30</span>;</span><br><span class=\"line\">        System.out.println(m&gt;<span class=\"number\">3</span> || ++n &gt;<span class=\"number\">40</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-三元运算符\"><a href=\"#6-三元运算符\" class=\"headerlink\" title=\"6.三元运算符\"></a>6.三元运算符</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OperatorDemo6</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 运算符 - 三元运算符</span></span><br><span class=\"line\">       <span class=\"comment\">//   指三个元素参与运算的运算符</span></span><br><span class=\"line\">        <span class=\"comment\">//基本语法结构：变量 = （条件表达式）？（任意表达式1）：（任意表达式2）</span></span><br><span class=\"line\">        <span class=\"comment\">//   当条件表达式的结果为ture则执行表达式1，反之执行表达式2</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span> ;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span>(i == <span class=\"number\">5</span>)? (i+<span class=\"number\">10</span>):(i+<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7、流程控制\"><a href=\"#7、流程控制\" class=\"headerlink\" title=\"7、流程控制\"></a>7、流程控制</h2><h3 id=\"1-顺序执行\"><a href=\"#1-顺序执行\" class=\"headerlink\" title=\"1.顺序执行\"></a>1.顺序执行</h3><ul>\n<li>按照代码顺序从前往后执行</li>\n</ul>\n<h3 id=\"2-分支执行\"><a href=\"#2-分支执行\" class=\"headerlink\" title=\"2.分支执行\"></a>2.分支执行</h3><ul>\n<li>if……else……</li>\n<li>if……elif……….elif……..else……..</li>\n<li>switch(变量){ case1: ……. ;  case2: ……… ;default: ………..;},switch分支判断也叫等值分支判断。</li>\n</ul>\n<p>其中在<code>switch</code>分支中如果想要跳出某个<code>case</code>并结束分支执行，就在那个<code>case</code>块的内容最后加上<code>break</code>用来跳出</p>\n<h3 id=\"3-重复执行（循环）\"><a href=\"#3-重复执行（循环）\" class=\"headerlink\" title=\"3.重复执行（循环）\"></a>3.重复执行（循环）</h3><p>在Java中用于循环的语法有3个：</p>\n<p>1）while：有条件循环</p>\n<ul>\n<li>while(条件表达式){需要循环的代码}</li>\n</ul>\n<p>2）do….while(先执行一次，在进行条件判断)</p>\n<p>3）for</p>\n<ul>\n<li>for(初始化表达式 ; 条件表达式 ; 更新表达式;){ 循环体内容 }</li>\n</ul>\n<p>​\t\t\t初始化表达式实际上是对条件表达式中用到的变量进行初始化，循环体内容执行完毕后，会重新进行条件判断，如果判断为ture则会继续执行循环体内容。</p>\n<p><code>小练习:九层妖塔</code></p>\n<p>请在控制台输出打印如下</p>\n<p><img src=\"/2024/04/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5Cimage-20240414160246249.png\" alt=\"image-20240414160246249\"></p>\n<p>代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i&lt;<span class=\"number\">9</span>;i++)&#123;</span><br><span class=\"line\"><span class=\"comment\">//完成打印但是打印出来的是全部对齐的，并未达到要求</span></span><br><span class=\"line\">    <span class=\"comment\">//下面打印空格因为最后一行不用输出空格所以我们只打印8层就可以，按照规律每层打印的空格数=8-层号</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">8</span>-i;j++)&#123;</span><br><span class=\"line\">System.out.print(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;i*<span class=\"number\">2</span>+<span class=\"number\">1</span>;j++)&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5Cimage-20240414161235302.png\" alt=\"image-20240414161235302\"></p>\n<h1 id=\"第三章-面向对象\"><a href=\"#第三章-面向对象\" class=\"headerlink\" title=\"第三章 面向对象\"></a>第三章 面向对象</h1><h2 id=\"1）什么是面向对象？\"><a href=\"#1）什么是面向对象？\" class=\"headerlink\" title=\"1）什么是面向对象？\"></a>1）什么是面向对象？</h2><p>所谓面向对象，其实就是分析问题时，以问题所涉及的是或者物为中心的分析方式</p>\n<h2 id=\"2）类和对象\"><a href=\"#2）类和对象\" class=\"headerlink\" title=\"2）类和对象\"></a>2）类和对象</h2><h3 id=\"1-类-and-对象-先有类，再有对象\"><a href=\"#1-类-and-对象-先有类，再有对象\" class=\"headerlink\" title=\"1.类 and 对象(先有类，再有对象)\"></a>1.类 and 对象(先有类，再有对象)</h3><p>类表示归纳和整理；对象表示具体的事务。</p>\n<p>在Java中我们用class表示类，<code>通常类名首写字母大写</code>。</p>\n<p>基本语法结构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 类名&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">特征(属性)</span><br><span class=\"line\"></span><br><span class=\"line\">功能(方法)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-创建对象的语法结构\"><a href=\"#2-创建对象的语法结构\" class=\"headerlink\" title=\"2.创建对象的语法结构\"></a>2.创建对象的语法结构</h3><p>对象：类的实例化(具象化)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> 类名();<span class=\"comment\">//小括号不能丢</span></span><br><span class=\"line\"><span class=\"comment\">//new是关键字，表示创建一个具体的对象，使用一次，创建一次，每次都是全新的对象。</span></span><br></pre></td></tr></table></figure>\n\n<p>对象是将内存地址赋值给了变量，所以变量其实引用了内存中的对象，所以称之为引用变量，而变量的类型称之为引用数据类型。</p>\n<p><code>特殊的对象</code>：空对象(null)，没有引用的对象，称之为空对象，关键字对象，所有引用对象的类型默认取值为null</p>\n<h3 id=\"3-属性\"><a href=\"#3-属性\" class=\"headerlink\" title=\"3.属性\"></a>3.属性</h3><p>所谓属性，就是类的对象的相同特征</p>\n<p>声明：属性类型 属性名称 &#x3D; 属性值</p>\n<p><code>如果在声明属性的同时进行了初始化赋值，那么所有对象的属性就完全相同。如果希望每个对象的属性不一致，那么我们可以只声明即可，那么属性会在构造对象的时候默认初始化，而默认初始化的值取决于属性的类型</code></p>\n<p><em><strong>byte，short，int，long &#x3D;&#x3D;&gt; 0</strong></em></p>\n<p><em><strong>float,double &#x3D;&#x3D;&gt; 0.0</strong></em></p>\n<p><em><strong>boolean flg &#x3D;&#x3D;&gt; false</strong></em></p>\n<p><em><strong>char &#x3D;&#x3D;&gt;空字符</strong></em></p>\n<p><em><strong>引用数据类型 &#x3D;&#x3D;&gt; null</strong></em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化并赋值zhansan</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;zhansan&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//只声明</span></span><br><span class=\"line\">String name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-静态-static\"><a href=\"#4-静态-static\" class=\"headerlink\" title=\"4.静态(static)\"></a>4.静态(static)</h3><p>针对于具体对象的属性称之为对象属性，成员属性，实例属性</p>\n<p>针对于具体对象的方法称之为对象方法，成员方法，实例方法</p>\n<p>把和对象无关，只和类相关的称之为<strong>静态</strong>，</p>\n<p><strong>和类相关的方法称为静态方法</strong></p>\n<p><strong>和类相关的属性称为静态属性</strong></p>\n<p><strong>静态语法</strong>：就是在属性和方法前面增加<code>static</code>关键字</p>\n<p>在Java语法中：</p>\n<ul>\n<li><p><strong>成员方法可以访问静态属性和静态方法</strong></p>\n</li>\n<li><p><strong>静态方法不可以访问成员属性和静态方法</strong></p>\n</li>\n<li><p>在访问静态类的属性时，可以用<strong>静态类名.属性名</strong>直接访问。</p>\n</li>\n</ul>\n<h4 id=\"静态代码块\"><a href=\"#静态代码块\" class=\"headerlink\" title=\"静态代码块\"></a>静态代码块</h4><p>当类的信息加载完成后，会自动调用静态代码块，可以完成静态属性的初始化功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">//代码块内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在我们构建对象时，代码块会进行初始化，但不是静态的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">//代码块内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3）方法\"><a href=\"#3）方法\" class=\"headerlink\" title=\"3）方法\"></a>3）方法</h2><h3 id=\"1-方法的声明：\"><a href=\"#1-方法的声明：\" class=\"headerlink\" title=\"1.方法的声明：\"></a>1.方法的声明：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">【方法返回值类型】【<span class=\"keyword\">void</span>】 方法名(参数)&#123;功能代码&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法中<code>void</code>是空的意思，意味着没有结果。如果在方法中的结果需要返回，则确定返回值的类型利用<code>return</code>关键字来返回结果。没有返回值就用<code>void</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回的结果是布尔类型的所以用Boolean</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">register</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;注册成功&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">//返回结果</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-方法传参-方法参数\"><a href=\"#2-方法传参-方法参数\" class=\"headerlink\" title=\"2.方法传参(方法参数)\"></a>2.方法传参(方法参数)</h3><p>1.语法:方法名(参数类型 参数名称)</p>\n<p>方法名(<strong>参数类型1 参数名称1,参数类型2 参数名称2,参数类型3 参数名称3</strong>) {   }进行多个参数的传递。</p>\n<p>2.传参注意事项：</p>\n<ul>\n<li><p>参数个数要匹配</p>\n</li>\n<li><p>参数类型要匹配</p>\n</li>\n<li><p>参数顺序要匹配</p>\n</li>\n<li><p>当参数个数不确定时，我们可以使用特殊语法来声明：可变参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参数类型... 参数名称</span><br><span class=\"line\">方法名(String ... name)&#123;  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当参数列表中还有别的参数时，我们需要将可变参数声明在参数列表最后。</p>\n</li>\n<li><p>基本数据类型:传数值</p>\n</li>\n<li><p>引用数据类型:传引用地址</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main方法中</span></span><br><span class=\"line\"><span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span><span class=\"string\">&quot;zhangsan&quot;</span>；</span><br><span class=\"line\">    <span class=\"comment\">//传递参数</span></span><br><span class=\"line\">user.sayHello(name);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用参数</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;hello&quot;</span>+ name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小插曲\"><a href=\"#小插曲\" class=\"headerlink\" title=\"小插曲\"></a>小插曲</h2><p>Java中的三块内存区域</p>\n<p><strong>栈</strong>：存放的是(方法，变量)</p>\n<p><strong>堆</strong>：存放(对象)</p>\n<p><strong>元空间</strong>：存放类的信息，也称之为方法区</p>\n<h2 id=\"4）包\"><a href=\"#4）包\" class=\"headerlink\" title=\"4）包\"></a>4）包</h2><p>-包中容纳类</p>\n<p><strong>语法：package 包完整路径;</strong></p>\n<p>包完整路径用<code>·</code>隔开</p>\n<p>包名一般全是<code>小写字母</code></p>\n<h3 id=\"包的导入\"><a href=\"#包的导入\" class=\"headerlink\" title=\"包的导入:\"></a>包的导入:</h3><p>我们用import语法来导入包。</p>\n<p><strong>import使用在package后class前</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> xxx.xxx.Xxxx;</span><br><span class=\"line\"><span class=\"keyword\">import</span> xxxxxx;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">xxxx</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5）面向对象——构建对象——构造方法\"><a href=\"#5）面向对象——构建对象——构造方法\" class=\"headerlink\" title=\"5）面向对象——构建对象——构造方法\"></a>5）面向对象——构建对象——构造方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建了一个User类的对象user</span></span><br><span class=\"line\"><span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br></pre></td></tr></table></figure>\n\n<p>上面这个过程实际上使用了构造方法来构建的对象下面来介绍一个构造方法</p>\n<p><strong>构造方法：专门用于构建对象</strong></p>\n<p>如果类中没有任何构造方法，那么**JVM(java虚拟机)**会自动添加一个公共的无参的构造方法。基本语法如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类名 ()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意点:</p>\n<ul>\n<li>构造方法也是方法，但是没有void关键字</li>\n<li>方法名和类名完全相同</li>\n<li>如果类中没有构造方法&#x3D;&#x3D;&#x3D;&gt;JVM会提供默认构造方法</li>\n<li>如果类中有构造方法&#x3D;&#x3D;&#x3D;&gt;JVM不会提供默认构造方法</li>\n<li>构造方法也是方法，可以传递参数，但是一般传递参数的目的是用于对象属性的赋值</li>\n</ul>\n<h2 id=\"6）面向对象——继承\"><a href=\"#6）面向对象——继承\" class=\"headerlink\" title=\"6）面向对象——继承\"></a>6）面向对象——继承</h2><p>关键字：Extends</p>\n<p>基本语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 子类 extends 父类 &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>类存在父子关系：子类可以直接获取到父类的成员属性和成员方法</p>\n<p>类的继承只能是单继承，一个类只能有一个父类，不能存在多个父类</p>\n<p>在继承中，如果父类和子类含有相同的属性，那么可以采用特殊的关键字进行区分:super &amp; this.</p>\n<p>super：表示上一级</p>\n<p>this：表示当前</p>\n<h3 id=\"继承中的方法问题\"><a href=\"#继承中的方法问题\" class=\"headerlink\" title=\"继承中的方法问题\"></a>继承中的方法问题</h3><p>构造方法(完成内存控件属性的初始化操作):</p>\n<p><strong>父类对象是在子类对象前创建完成的，创建子类对象前，会先创建父类对象</strong></p>\n<p>如果父类提供了有参构造方法，那么JVM就不会提供默认的构造方法，那么子类应该调用super方法(带入参数)构建父类对象。</p>\n<h2 id=\"7）面向对象——多态\"><a href=\"#7）面向对象——多态\" class=\"headerlink\" title=\"7）面向对象——多态\"></a>7）面向对象——多态</h2><p>所谓多态，其实就是一个对象在不同场景下表现出来的不同状态和形态。</p>\n<p>多态语法其实就是对对象的使用场景进行了约束。</p>\n<p><strong>以父类声明的子类对象，只能使用父类中的方法，如果子类对象想使用子类方法，需要用子类来声明子类对象</strong></p>\n<h2 id=\"8）面向对象——方法重载\"><a href=\"#8）面向对象——方法重载\" class=\"headerlink\" title=\"8）面向对象——方法重载\"></a>8）面向对象——方法重载</h2><p>相同的方法：<strong>在一个类中，相同方法是指方法名，参数列表相同，和返回值类型无关的方法。</strong></p>\n<p><strong>方法重载：</strong> 在Java中，如果方法名称相同，但是参数列表(个数，顺序，类型)不相同，会认为是不同的方法，只是名称一样，我们称之为方法的重载。</p>\n<p><em><strong>在构造方法中，想要调用其他构造方法，那么需要使用关键字:this</strong></em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.面相对象综合实例;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClassObject2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//我们只需要调用无参构造方法即可</span></span><br><span class=\"line\">        <span class=\"comment\">//创建对象时会调用构造函数</span></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">    User()&#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用this关键字传入参数调用下面构造方法</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>(<span class=\"string\">&quot;zhansan&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    User(String name)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//接收name并用this关键字调用下面方法</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>(<span class=\"string\">&quot;zhangsan&quot;</span>,<span class=\"string\">&quot;男&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    User(String name, String sex)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;名字是:&quot;</span>+name+<span class=\"string\">&quot;,&quot;</span>+sex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>打印如下</strong>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">名字是:zhangsan,男</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>基本数据类型：</p>\n<p><strong>基本数据类型匹配方法时，可以在数值不变的情况下扩大数据的精度。</strong></p>\n<p><strong>byte数据类型无法和char类型做转换，char没有负数，而byte存在着负数</strong></p>\n<p>引用数据类型：</p>\n<p>引用数据类型无法扩大数据精度，但是引用数据类型匹配方法时，会往object类去找。</p>\n<p><strong>比如A类是B类的父类，那么当调用的方法在B类中不符合时，就去A类中寻找，如果A类中没有就去A类的父类object中寻找</strong></p>\n<h2 id=\"9）面向对象——方法重写\"><a href=\"#9）面向对象——方法重写\" class=\"headerlink\" title=\"9）面向对象——方法重写\"></a>9）面向对象——方法重写</h2><p>定义：<strong>在父类中的方法其实主要体现通用性(可以被多个子类继承，可以被多个子类使用自身方法)，无法在某一个特定情况去使用这个方法。如果子类对象需要再某个特定业务逻辑中使用该父类的方法，那么就需要对父类中的方法进行重写，这个操作成为重写。</strong></p>\n<p>请注意：</p>\n<ul>\n<li><p>子类中的方法不会覆盖父类的方法，只是父类当前方法不适用这个场景</p>\n</li>\n<li><p>如果想在当前类调用父类方法可以使用<strong>super</strong>关键字进行调用</p>\n</li>\n<li><p>当子类的方法中的<strong>返回值类型，参数列表，方法名称</strong>都和父类相同时才可以进行重写</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.面相对象综合实例;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RewriteMethods</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Child</span> <span class=\"variable\">child</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Child</span>();</span><br><span class=\"line\">        <span class=\"type\">Parent</span> <span class=\"variable\">parent</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Parent</span>();</span><br><span class=\"line\">        System.out.println(child.sum());<span class=\"comment\">//40</span></span><br><span class=\"line\">        System.out.println(parent.sum());<span class=\"comment\">//20</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Parent</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"title function_\">sum</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> i+<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Parent</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span>  <span class=\"operator\">=</span><span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">sum</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i+<span class=\"number\">20</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过以上例子，总结四点：</p>\n<ul>\n<li><strong>一个对象能使用什么方法，取决于引用变量的类型</strong></li>\n<li><strong>一个对象能使用什么属性，取决于引用变量的类型</strong></li>\n<li><strong>一个对象的方法具体使用(这个方法怎么去执行，逻辑是什么，直接使用还是间接使用)，需要看具体对象</strong></li>\n<li><strong>一个对象的属性具体的使用是不需要看具体的对象的，属性在哪里声明就在哪里使用</strong></li>\n</ul>\n<h2 id=\"10）面向对象——递归\"><a href=\"#10）面向对象——递归\" class=\"headerlink\" title=\"10）面向对象——递归\"></a>10）面向对象——递归</h2><p>定义：<strong>方法调用自身，成为递归方法</strong></p>\n<p><strong>递归最经典的案例——求n以内的奇数和</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.面相对象综合实例;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RewriteMethods</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> getSum(<span class=\"number\">20</span>);</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">getSum</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//三元运算符，当n是偶数时会执行(n－1)，当n是奇数时直接用n</span></span><br><span class=\"line\">        n = n % <span class=\"number\">2</span> == <span class=\"number\">0</span> ? n - <span class=\"number\">1</span> : n;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n + getSum(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>递归——阶乘</p>\n<p><em><strong>一个大于1的数的阶乘就是这个数乘以这个数减一的阶乘</strong></em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.面相对象综合实例;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RewriteMethods</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result1</span> <span class=\"operator\">=</span> jieCheng(<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(result1);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">//求n以内的数的阶乘</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">jieCheng</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&lt;= <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n * jieCheng(n-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ul>\n<li>递归应该有跳出的逻辑</li>\n<li>调用自身时，传入的参数应该是有规律的</li>\n</ul>\n<h2 id=\"11）面向对象——访问权限\"><a href=\"#11）面向对象——访问权限\" class=\"headerlink\" title=\"11）面向对象——访问权限\"></a>11）面向对象——访问权限</h2><ul>\n<li>public：公共的，访问权限修饰符</li>\n</ul>\n<p>​\t\t<strong>在Java中，公共类只有一个，且名称和源码文件相同</strong></p>\n<p>​\t\t<strong>main方法：main方法是有JVM调用的，JVM可以任意调用，可以忽略权限问题</strong></p>\n<p>Java中的访问权限有四种：</p>\n<ul>\n<li><p>private：私有的，同一个类中可以使用，别的类，其他地方无法使用</p>\n</li>\n<li><p>(default)：默认权限，当不设定任何权限时，JVM会默认提供权限，包(路径)权限</p>\n</li>\n<li><p>protected：受保护的权限，子类可以访问</p>\n</li>\n<li><p>public：公共的，任意使用。</p>\n</li>\n</ul>\n<h2 id=\"12）面向对象——内部类——外部类\"><a href=\"#12）面向对象——内部类——外部类\" class=\"headerlink\" title=\"12）面向对象——内部类——外部类\"></a>12）面向对象——内部类——外部类</h2><p>外部类：在源码中直接声明的类</p>\n<p>内部类：类中声明的类</p>\n<p><strong>内部类在进行定义的时候，可以当成外部类的属性使用即可</strong>，但是在使用的时候，因为内部类被看做了外部类的属性，所以<strong>需要定义外部类对象</strong>进行使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//内部类定义</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">InnerClass</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>举个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.面相对象综合实例;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InerClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建外部类对象</span></span><br><span class=\"line\">        <span class=\"type\">OuterClass</span> <span class=\"variable\">outerClass</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OuterClass</span>();</span><br><span class=\"line\">        <span class=\"comment\">//通过外部类对象来创建内部类对象</span></span><br><span class=\"line\">        OuterClass.<span class=\"type\">InnerClass1</span> <span class=\"variable\">innerClass1</span> <span class=\"operator\">=</span> outerClass.<span class=\"keyword\">new</span> <span class=\"title class_\">InnerClass1</span>();</span><br><span class=\"line\">        <span class=\"comment\">//调用各自的方法</span></span><br><span class=\"line\">        outerClass.printSome();</span><br><span class=\"line\">        innerClass1.printSome();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OuterClass</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printSome</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是外部类方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">InnerClass1</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printSome</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我是内部类方法&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13）面向对象——final关键字\"><a href=\"#13）面向对象——final关键字\" class=\"headerlink\" title=\"13）面向对象——final关键字\"></a>13）面向对象——final关键字</h2><ul>\n<li><p><strong>final</strong>可以修饰变量：变量的值一旦初始化不允许被修改</p>\n</li>\n<li><p><strong>final</strong>可以修饰属性：但是JVM不会对自动对属性进行初始化，需要手动初始化，并且属性值不可以修改</p>\n</li>\n<li><p><strong>final</strong>可以修饰方法：final修饰的方法不可以被子类重写</p>\n</li>\n<li><p><strong>final</strong>可以修饰类：当final修饰一个类时，被修饰的类不可以有子类</p>\n</li>\n<li><p><strong>final</strong>不可以修饰构造方法。</p>\n</li>\n<li><p><strong>final</strong>可以修饰方法参数：一旦修饰，该参数无法修改。</p>\n</li>\n</ul>\n<p>一般将final修饰的变量称之为常量，或者叫不可变量。</p>\n<h2 id=\"14）面向对象——抽象—Abstract\"><a href=\"#14）面向对象——抽象—Abstract\" class=\"headerlink\" title=\"14）面向对象——抽象—Abstract\"></a>14）面向对象——抽象—Abstract</h2><ul>\n<li><p>抽象类：不完整的类就是抽象类，抽象类不能够构造对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//语法</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> class 类名&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>抽象方法：只有声明方法，而不去写方法里面的逻辑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//语法</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> 返回值类型 方法名(参数);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>在一个类中，有抽象方法就是抽象类，反之，如果有抽象类，他的方法不一定是抽象方法。</p>\n</li>\n<li><p>抽象类无法直接构造对象，但是可以通过子类间接构造对象。</p>\n</li>\n<li><p>如果抽象类中含有抽象方法，那么子类继承抽象类，需要重写抽象方法，将方法补充完整。</p>\n</li>\n<li><p><strong>abstract关键字不能和final关键字一起使用</strong></p>\n</li>\n</ul>\n<h2 id=\"15）面向对象——接口-interface\"><a href=\"#15）面向对象——接口-interface\" class=\"headerlink\" title=\"15）面向对象——接口(interface)\"></a>15）面向对象——接口(interface)</h2><p>接口：可以简单理解为规则。</p>\n<p>基本语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接口语法</span></span><br><span class=\"line\">interface 接口名称&#123; 接口属性，接口规则&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>接口其实是抽象的</li>\n<li>规则的属性必须为固定值，而且不能修改。</li>\n<li>属性和行为的访问权限是公共的。</li>\n<li>属性是静态的。</li>\n<li>行为是抽象的。</li>\n<li>接口可以继承其他接口</li>\n<li>类的对象需要遵循接口，在Java中其实就是实现(implements)接口。而且类可以实现多个接口</li>\n</ul>\n<p>接口的一段演示代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterfaceTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Computer</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Computer</span>();</span><br><span class=\"line\">        <span class=\"type\">Light</span> <span class=\"variable\">light</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Light</span>();</span><br><span class=\"line\">\t\t<span class=\"comment\">//相当于把电灯插到usb1口上</span></span><br><span class=\"line\">        c.usb1 = light;</span><br><span class=\"line\">        <span class=\"comment\">//把电灯插到usb2口上</span></span><br><span class=\"line\">        c.usb2 = light;</span><br><span class=\"line\">        <span class=\"comment\">//电脑给上面两个供电(调用givePower方法)</span></span><br><span class=\"line\">        c.givePower();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">rule</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">PowerOut</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">rule</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">givePower</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">PowerIn</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">rule</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">receivePower</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Computer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PowerOut</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> PowerIn usb1;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> PowerIn usb2;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">givePower</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电脑提供电源&quot;</span>);</span><br><span class=\"line\">        usb1.receivePower();</span><br><span class=\"line\">        usb2.receivePower();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Light</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PowerIn</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">receivePower</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电灯接受电源&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16）面向对象——枚举-Enum\"><a href=\"#16）面向对象——枚举-Enum\" class=\"headerlink\" title=\"16）面向对象——枚举(Enum)\"></a>16）面向对象——枚举(Enum)</h2><p>定义：枚举是一个特殊的类，其中包含了一组特定的对象，一般使用大写的的字母，这些对象不会发生改变。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">City</span>&#123;</span><br><span class=\"line\">    BEIJING,SHANGHAI</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>枚举使用enum关键字使用。</li>\n<li>枚举类的对象一般放在前面，如果还要写入别的语法那么应该用分号与后面的语法隔开。</li>\n<li>枚举类不能创建对象，只能在内部使用</li>\n</ul>\n<p>举个例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EnumTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.print(City.SHANGHAI.name);</span><br><span class=\"line\">        System.out.println(City.SHANGHAI.code);</span><br><span class=\"line\">        System.out.print(City.BEIJING.name);</span><br><span class=\"line\">        System.out.println(City.BEIJING.code);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">City</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//相当于new一个对象,JVM完成</span></span><br><span class=\"line\">    BEIJING(<span class=\"string\">&quot;北京&quot;</span>,<span class=\"number\">1001</span>),SHANGHAI(<span class=\"string\">&quot;上海&quot;</span>,<span class=\"number\">1002</span>);</span><br><span class=\"line\">    City(String name, <span class=\"type\">int</span> code)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> code;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"17）面向对象——匿名类\"><a href=\"#17）面向对象——匿名类\" class=\"headerlink\" title=\"17）面向对象——匿名类\"></a>17）面向对象——匿名类</h2><p>在某些场合下，类的名字不重要了，我们只是想使用类中的方法或功能，那么这个时候就需要用到特殊的语法：匿名类。</p>\n<p>定义：没有名字的类，被称为匿名类</p>\n<p>举个例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NoNameClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建了一个SayHello的对象me</span></span><br><span class=\"line\">        <span class=\"type\">SayHello</span> <span class=\"variable\">me</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SayHello</span>();</span><br><span class=\"line\">        <span class=\"comment\">//下面这种写法不需要再额外创建张三和李四的类，也就是我们创建了一个没有名字的类new person()&#123;&#125;</span></span><br><span class=\"line\">        me.sayHelloToPeople(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>() &#123;</span><br><span class=\"line\">            <span class=\"comment\">//重写抽象方法具体化</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> String <span class=\"title function_\">name</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        me.sayHelloToPeople(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">public</span> String <span class=\"title function_\">name</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;李四&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//有抽象方法所以是抽象类</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">name</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SayHello</span>  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHelloToPeople</span><span class=\"params\">(Person person)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello&quot;</span> + person.name());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口也可以</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只关心你是怎么飞的，并没有考虑你是什么类，所以这里用匿名类。        </span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Fly</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;使用飞行器飞行&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.fly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接口是抽象的</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Fly</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"18）面向对象——Bean规范\"><a href=\"#18）面向对象——Bean规范\" class=\"headerlink\" title=\"18）面向对象——Bean规范\"></a>18）面向对象——Bean规范</h2><ul>\n<li>类要求必须含有无参的，公共的构造方法</li>\n<li>属性必须私有化，然后提供公共的get，set方法</li>\n</ul>\n<p>例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Movie</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  <span class=\"type\">double</span> price;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getPrice</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPrice</span><span class=\"params\">(<span class=\"type\">double</span> price)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"19）面向对象——作用域\"><a href=\"#19）面向对象——作用域\" class=\"headerlink\" title=\"19）面向对象——作用域\"></a>19）面向对象——作用域</h2><p>例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.面相对象综合实例;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZuoYongYu</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">User2</span> <span class=\"variable\">user2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User2</span>();</span><br><span class=\"line\">            user2.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person2</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User2</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person2</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;lisi&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果属性和(局部)变量名称相同，访问时不加修饰符，那么优先访问变量</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;wangwu&quot;</span>;<span class=\"comment\">//启动打印的是wangwu，如果注释掉这一行，那么打印的将会是lisi</span></span><br><span class=\"line\">        System.out.println(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"第四章-常见类和对象\"><a href=\"#第四章-常见类和对象\" class=\"headerlink\" title=\"第四章 常见类和对象\"></a>第四章 常见类和对象</h1><h2 id=\"1）常见类和对象——Object\"><a href=\"#1）常见类和对象——Object\" class=\"headerlink\" title=\"1）常见类和对象——Object\"></a>1）常见类和对象——Object</h2><p>Object类的包路径：java.lang.Object</p>\n<p>Object对象的常用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.常见类和对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ObjectClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">        <span class=\"comment\">//object对象的常用方法</span></span><br><span class=\"line\">        <span class=\"comment\">// TODO toString()，将对象转换成字符串</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> obj.toString();</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// TODO 获取对象的内存地址</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> obj.hashCode();</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// TODO 判断两个对象是否相等，如果相等返回true，不相等返回flase</span></span><br><span class=\"line\">        <span class=\"comment\">//      equals方法比较对象时，默认比较的是内存地址</span></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">equals1</span> <span class=\"operator\">=</span> obj.equals(person);</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">equals2</span> <span class=\"operator\">=</span> obj.equals(obj);</span><br><span class=\"line\">        System.out.println(equals1);<span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(equals2);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//TODO getClass获取对象的类型信息</span></span><br><span class=\"line\">        Class&lt;?&gt; currentClassName = obj.getClass();</span><br><span class=\"line\">        System.out.println(currentClassName.getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">user</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2）常见类和对象——数组\"><a href=\"#2）常见类和对象——数组\" class=\"headerlink\" title=\"2）常见类和对象——数组\"></a>2）常见类和对象——数组</h2><p>在Java中数组的声明方式：<strong>类型[] 变量名；</strong></p>\n<p>数组的创建：<strong>new 类型[容量];</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数组的声明</span></span><br><span class=\"line\">String[] names;</span><br><span class=\"line\"><span class=\"comment\">//数组的创建(创建了一个存储3个数据的names数组)</span></span><br><span class=\"line\">String[] names = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"comment\">//给数组赋值</span></span><br><span class=\"line\">names[<span class=\"number\">0</span>] = <span class=\"string\">&quot;lisi&quot;</span>;</span><br><span class=\"line\">names[<span class=\"number\">1</span>] = <span class=\"string\">&quot;wangwu&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//数组的访问</span></span><br><span class=\"line\">System.out.println(names[<span class=\"number\">0</span>]);<span class=\"comment\">//打印lisi</span></span><br><span class=\"line\">System.out.println(names[<span class=\"number\">0</span>]);<span class=\"comment\">//打印wangwu</span></span><br><span class=\"line\"><span class=\"comment\">//也可以用循环访问数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i;i&lt;names.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> names[i];</span><br><span class=\"line\">    System.out.println(j);</span><br><span class=\"line\">&#125;<span class=\"comment\">//循环执行完打印的是lisi，wangwu</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>如果需要一次创建多个对象可以用数组来完成</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个对象数组user</span></span><br><span class=\"line\">Users[] users = <span class=\"keyword\">new</span> <span class=\"title class_\">Users</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"comment\">//利用for循环来生成该数组的对象</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i ; i&lt;users.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建对象</span></span><br><span class=\"line\">    users[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Users</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3）常见类和对象——二维数组\"><a href=\"#3）常见类和对象——二维数组\" class=\"headerlink\" title=\"3）常见类和对象——二维数组\"></a>3）常见类和对象——二维数组</h2><p>二维数组的定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//二维数组(可以简单理解为3X3的表格)</span></span><br><span class=\"line\">String[][] names = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">3</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"comment\">//二维数组的遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> row= <span class=\"number\">0</span> ;row&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">col</span> <span class=\"operator\">=</span><span class=\"number\">0</span>; col &lt; <span class=\"number\">3</span>; j++)&#123;</span><br><span class=\"line\">        System.out.print(names[row][col]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组——应用\"><a href=\"#数组——应用\" class=\"headerlink\" title=\"数组——应用\"></a>数组——应用</h3><h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.常见类和对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MaoPaoPaiXu</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 将一个数组的最大的数放在数组最后面</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] nums = &#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>，<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//注意不能索引到最后一个数，因为最后一个数的下一位没有数据</span></span><br><span class=\"line\">        <span class=\"comment\">//左边和右边比较，我们先找出最大的数，让他放在数组最后一个元素位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i&lt; nums.length-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">num1</span> <span class=\"operator\">=</span>nums[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">num2</span> <span class=\"operator\">=</span>nums[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(num1&gt;num2)&#123;</span><br><span class=\"line\">                nums[i] = num2;</span><br><span class=\"line\">                nums[i+<span class=\"number\">1</span>] = num1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//打印结果为1,3,2,4,5</span></span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面这个只是找出了我们的最大的数放到了数组最后面，那么我们的冒泡排序的结果应该1,2,3,4,5所以稍加改动如下:</p>\n<p>解析：<strong>那么在上面的基础上，我们每次把最大数放在后面不就可以了吗？也就是说第一次比较5个数，那么5最大放在后面，第二次比较4个数一定是4最大，我们把四放在四个数的最后面。依次类推，不就完成了吗？</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码逻辑(冒泡排序)</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.常见类和对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ErWeiShuZu</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 将一个数组的最大的数放在数组最后面</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] nums = &#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>，<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//注意不能索引到最后一个数，因为最后一个数的下一位没有数据</span></span><br><span class=\"line\">        <span class=\"comment\">//左边和右边比较，我们先找出最大的数，让他放在数组最后一个元素位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//当i=0时，我们下面的循环就找5个数的大小，等于1就找4个数的大小.....</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; nums.length - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">num1</span> <span class=\"operator\">=</span> nums[j];</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">num2</span> <span class=\"operator\">=</span> nums[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (num1 &gt; num2) &#123;</span><br><span class=\"line\">                    nums[j] = num2;</span><br><span class=\"line\">                    nums[j + <span class=\"number\">1</span>] = num1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>思路图解冒泡排序</p>\n<p><img src=\"/2024/04/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240622152436992.png\" alt=\"image-20240622152436992\"></p>\n<h4 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"comment\">//选择排序</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] nums = &#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>，<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//第一步：找到最大值的索引</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//将最大值索引定为0，因为0已经被用了所以下面的循环从1开始</span></span><br><span class=\"line\">          <span class=\"type\">int</span> <span class=\"variable\">maxIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; nums.length-j; i++) &#123;</span><br><span class=\"line\">              <span class=\"type\">int</span> <span class=\"variable\">num1</span> <span class=\"operator\">=</span> nums[i];<span class=\"comment\">//4 3 2 5</span></span><br><span class=\"line\">              <span class=\"type\">int</span> <span class=\"variable\">num2</span> <span class=\"operator\">=</span>nums[maxIndex];<span class=\"comment\">//1 4 4 4</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (num1&gt;num2)&#123;</span><br><span class=\"line\">                  <span class=\"comment\">//循环完成后我们的最大值索引就被找到了</span></span><br><span class=\"line\">                  maxIndex = i;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//把最后一个数和我们的最大值索引对应的数进行交换就完成了将最大的数放在数组最后面</span></span><br><span class=\"line\">          <span class=\"type\">int</span> <span class=\"variable\">num3</span> <span class=\"operator\">=</span> nums[nums.length-j-<span class=\"number\">1</span>];</span><br><span class=\"line\">          <span class=\"type\">int</span> <span class=\"variable\">num4</span> <span class=\"operator\">=</span> nums[maxIndex];</span><br><span class=\"line\">          nums[nums.length-j-<span class=\"number\">1</span>] = num4;</span><br><span class=\"line\">          nums[maxIndex] = num3;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//打印的结果为1，2，3，4，5</span></span><br><span class=\"line\">          System.out.println(num);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二分查找法\"><a href=\"#二分查找法\" class=\"headerlink\" title=\"二分查找法*\"></a>二分查找法*</h4><ul>\n<li>前提：数据有序。</li>\n</ul>\n<p>解释：二分查找法，又称折半查找（Binary Search），是一种在有序数组中高效查找特定元素的算法。其核心思想是通过将待查找区间反复减半来逼近目标值，直至找到目标或者确定目标不存在于数组中。以下是二分查找的基本步骤：</p>\n<ul>\n<li><p><strong>初始化</strong>: 确定查找区间的初始边界，通常是整个数组的开始索引（设为<code>left</code>）和结束索引（设为<code>right</code>），或者说是数组的第一个元素和最后一个元素的索引。</p>\n</li>\n<li><p><strong>计算中间索引</strong>: 在每一轮查找中，计算当前查找区间中间元素的索引 <code>mid = (left + right) / 2</code>（实际应用中为防止整数溢出，通常写作 <code>mid = left + (right - left) / 2</code>）。</p>\n</li>\n</ul>\n<p><strong>比较与分支</strong>:</p>\n<ul>\n<li>如果数组中间元素<code>array[mid]</code>正好等于目标值，查找成功，返回中间元素的索引<code>mid</code>。</li>\n<li>如果<code>array[mid]</code>小于目标值，则说明目标值位于中间元素右侧的子区间，因此更新查找区间为<code>left = mid + 1</code>。</li>\n<li>如果<code>array[mid]</code>大于目标值，则目标值位于中间元素左侧的子区间，更新查找区间为<code>right = mid - 1</code>。</li>\n</ul>\n<ul>\n<li><strong>重复步骤2和3</strong>，直到<code>left &gt; right</code>，此时说明目标值不在数组中，查找失败。</li>\n</ul>\n<p>二分查找的时间复杂度为O(log n)，其中n是数组中的元素数量。这是因为每次操作都将查找范围减半，因此大大减少了需要检查的元素数量，尤其是在处理大数据集时，这种算法的效率优势更为明显。但需要注意的是，二分查找的前提是数组必须是有序的，且通常适用于静态数据结构，因为对数组的插入和删除操作可能会破坏其有序性，从而增加维护成本。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.常见类和对象;</span><br><span class=\"line\"><span class=\"comment\">//演示的是二分法查找，前提是必须数组有序</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SelectPaiXu</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> nums[]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//定义查找的目标数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">targetNumber</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"comment\">//定义开始的索引</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">startIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//定义中间值索引</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">middle</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//定义结束索引</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">endIndex</span> <span class=\"operator\">=</span> nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//查找中间值索引</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (startIndex &lt;=endIndex )&#123;</span><br><span class=\"line\">            middle= (startIndex+endIndex) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[middle] &gt; targetNumber)&#123;</span><br><span class=\"line\">                endIndex = middle -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[middle]&lt;targetNumber)&#123;</span><br><span class=\"line\">                startIndex= middle+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//打印中间值索引</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;数据的位置是：&quot;</span>+middle);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4）常见类和对象——包装类\"><a href=\"#4）常见类和对象——包装类\" class=\"headerlink\" title=\"4）常见类和对象——包装类\"></a>4）常见类和对象——包装类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Byte</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"type\">Short</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"type\">Long</span> <span class=\"variable\">lon</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"type\">Float</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"type\">Double</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"type\">Character</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"type\">Boolean</span> <span class=\"variable\">bln</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将基本数据类型转换为包装类\"><a href=\"#将基本数据类型转换为包装类\" class=\"headerlink\" title=\"将基本数据类型转换为包装类\"></a>将基本数据类型转换为包装类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.常见类和对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaoZhuangLei</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//将基本数据类型转换为包装类型</span></span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> Integer.valueOf(i);</span><br><span class=\"line\">        <span class=\"comment\">//也可以写成,这个过程称为自动装箱</span></span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span>i;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//自动拆箱</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i1.intValue();</span><br><span class=\"line\">        <span class=\"comment\">//也可以写成</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j1</span> <span class=\"operator\">=</span> i1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5）常见类和对象——日期和日历\"><a href=\"#5）常见类和对象——日期和日历\" class=\"headerlink\" title=\"5）常见类和对象——日期和日历\"></a>5）常见类和对象——日期和日历</h2><p>日期类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.常见类和对象;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.ParseException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ParseException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Date :日期类</span></span><br><span class=\"line\">        <span class=\"comment\">//Calendar :日历类</span></span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        System.out.println(d);</span><br><span class=\"line\"><span class=\"comment\">// Java格式化日期格式:</span></span><br><span class=\"line\">        <span class=\"comment\">//y(Y)-&gt;年-&gt; yyyy</span></span><br><span class=\"line\">        <span class=\"comment\">//m(M)-&gt;MM:月份，mm:分钟</span></span><br><span class=\"line\">        <span class=\"comment\">//d(D)-&gt;dd :一个月中的日期，D:一年中的日期</span></span><br><span class=\"line\">        <span class=\"comment\">//h(H)-&gt;h:12进制，HH:24进制</span></span><br><span class=\"line\">        <span class=\"comment\">//s(S)-&gt;s :秒,S:亳秘</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Date -&gt;String</span></span><br><span class=\"line\">        <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">sdf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">dateFormatString</span> <span class=\"operator\">=</span>sdf.format(d);</span><br><span class=\"line\">        System.out.println(dateFormatString);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//string -&gt;Date</span></span><br><span class=\"line\">        String dateString=<span class=\"string\">&quot;2022-06-01&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">parseDate</span> <span class=\"operator\">=</span> sdf.parse(dateString);</span><br><span class=\"line\">        System.out.println(parseDate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>日历类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//拿到日历的对象</span></span><br><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span>Calendar.getInstance();</span><br><span class=\"line\"><span class=\"comment\">//打印日历中的各种属性</span></span><br><span class=\"line\">System.out.println(instance.get(Calendar.YEAR));   System.out.println(instance.get(Calendar.MONTH));</span><br><span class=\"line\">System.out.println(instance.get(Calendar.DATE));</span><br><span class=\"line\"><span class=\"comment\">//在日历中找到当前时间</span></span><br><span class=\"line\">instance.setTime(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">instance.add(Calendar.YEAR,<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6）常见类和对象——工具类\"><a href=\"#6）常见类和对象——工具类\" class=\"headerlink\" title=\"6）常见类和对象——工具类\"></a>6）常见类和对象——工具类</h2><ul>\n<li>工具类不应该创建对象才能使用，也就意味着，可以直接使用类中的属性和方法，一般都声明为静态的。</li>\n<li>工具类对外提供的属性和方法都应该是公共的。</li>\n<li>为了使开发者方便，应该尽量提供丰富的方法和属性。</li>\n</ul>\n<h1 id=\"第五章-异常\"><a href=\"#第五章-异常\" class=\"headerlink\" title=\"第五章 异常\"></a>第五章 异常</h1><p>Java中的异常分为<strong>两大类</strong>：</p>\n<ul>\n<li><p>可以通过代码恢复正常逻辑执行的异常，称之为运行期异常：RuntimeException</p>\n</li>\n<li><p>不可以通过代码恢复正常执行逻辑的异常，称之为编译异常：</p>\n<p>Exception</p>\n</li>\n</ul>\n<p>异常处理的语法：</p>\n<p>try：尝试(放的是可能会出现问题的代码)</p>\n<p>catch：捕捉，捕捉多个异常时，优先选择小的异常，然后将其抛出</p>\n<p>finally：最终</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//可能会出现异常的代码</span></span><br><span class=\"line\">    <span class=\"comment\">//如果出现异常那么JVM会将异常进行封装，形成一个具体的异常类然后将这个异常抛出</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(抛出的异常对象 对象引用)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//异常的解决方案</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>()&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//最 终要执行的逻辑(不论异常处没处理)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>异常的常见类型：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TODO 异常</span></span><br><span class=\"line\"><span class=\"comment\">//1.除数为0的算术异常:java.lang.ArithmeticException</span></span><br><span class=\"line\"><span class=\"comment\">//运行期异常</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(i!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> j= <span class=\"number\">10</span> /i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2:空指针异常:java.lang.NullPointerException，调用了一个成员对象或成员方法为空(null)对象的属性或方法时，就会发生异常</span></span><br><span class=\"line\"><span class=\"type\">User3</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">System.out.println(user.tostring());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3:索引越界，针对数组，字符串索引越界，针对字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User3</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果方法中可能会出现问题，那么需要提前声明，告诉其他人，我的方法可能会出现问题。这时，我们需要使用<strong>throws</strong>关键字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> ArithmeticException&#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span><span class=\"number\">0</span>;</span><br><span class=\"line\">   user.test(i,j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User8</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span> <span class=\"keyword\">throws</span> ArithmeticException &#123;</span><br><span class=\"line\">System.out.println(i/j);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么在运行期的异常，他不会抱任何问题，因为只要你的逻辑对了，代码就能继续运行，那么我们该如何让他出现提示，需要解决异常呢？下面这种方法，<strong>我们手动抛出异常对象，但是使用的是throw关键字，然后new出异常对象</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span><span class=\"number\">0</span>;</span><br><span class=\"line\">    user.test(i,j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User8</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            System.out.println(i/j);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(ArithmeticException e)</span><br><span class=\"line\">\t\t<span class=\"comment\">//这里演示手动抛出异常</span></span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exception</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（1）自定义异常\"><a href=\"#（1）自定义异常\" class=\"headerlink\" title=\"（1）自定义异常\"></a>（1）自定义异常</h4><p>看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.Exception;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZiDingYiException</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;admin&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span><span class=\"string\">&quot;admin&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//对异常进行处理</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//可能出现异常的代码</span></span><br><span class=\"line\">            loginSystem(username,password);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (AccountException e)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;账号输入有误，请重新输入&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (PasswordException e)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;密码输入有误，请重新输入&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;                                                              <span class=\"comment\">//如果下面是运行期异常(RuntimeException)这里可以不用抛出异常</span></span><br><span class=\"line\">                                                                   <span class=\"comment\">//如果下面是编译期异常(Exception)，则需抛出异常</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loginSystem</span><span class=\"params\">(String username,String password)</span> <span class=\"keyword\">throws</span> AccountException,PasswordException&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"string\">&quot;admin&quot;</span>.equals(username))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建异常对象</span></span><br><span class=\"line\">          <span class=\"keyword\">throw</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">AccountException</span>(<span class=\"string\">&quot;用户名不正确&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"string\">&quot;admin&quot;</span>.equals(password))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">PasswordException</span>(<span class=\"string\">&quot;密码不正确&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;登录成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//账户异常</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AccountException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">loginException</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AccountException</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 调用父类里面的方法，传入message参数，详细可以在代码中ctrl+左键点击查看</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//密码异常</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PasswordException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">loginException</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">PasswordException</span><span class=\"params\">(String message)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//自定义异常，如果这里继承运行期异常(RuntimeException)，那么上面就不需要抛出，如果是编译期异常(Exception),责需要抛出异常</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">loginException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RuntimeException</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"title function_\">loginException</span><span class=\"params\">(String message)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"第六章-Java中遇到的各种问题\"><a href=\"#第六章-Java中遇到的各种问题\" class=\"headerlink\" title=\"第六章 Java中遇到的各种问题\"></a>第六章 Java中遇到的各种问题</h1><h3 id=\"1-Mybatis与java\"><a href=\"#1-Mybatis与java\" class=\"headerlink\" title=\"(1)Mybatis与java\"></a>(1)Mybatis与java</h3><p>​        在<strong>Mybatis</strong>和java联合编写xml文件时，有关Mapper.xml（编写SQL的）文件中，增删改查标签中，使用<strong>parameterType属性指定传递参数类，resultType属性指定返回结果类型，resultMap标签完成当数据库表字段和Java实体类属性名或类型不一致时的手动映射，</strong>另外，SQL文中，where条件中只有一个参数时，推荐使用基本类型（int，short，char，byte，float，double，long，boolean）+String，当有多个参数时，使用Java实体类，接下来，我们来讲讲具体的用法。<br>来看示例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--上面是文件头，下面是这个xml文件对应的mapper文件的路径--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.ruoyi.publicController.mapper.proDetailMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proDetailsResult&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;proSelectDetails&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;proName&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;pro_name&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;profounder&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_name&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;proTrack&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;pro_track&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;proScore&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;pro_score&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;countResult&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;proSelectDetails&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;countOne&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;countOne&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;countTwo&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;countTwo&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--查询总表所有项目信息--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectAllInfo&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;proDetailsResult&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;proSelectDetails&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">&quot;selectProDetailsVo&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sql</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectProDetailsVo&quot;</span>&gt;</span></span><br><span class=\"line\">        SELECT DISTINCT pro_details3.pro_id, pro_name, pro_details3.pro_score, user_name, pro_track</span><br><span class=\"line\">        FROM pro_details3</span><br><span class=\"line\">                 INNER JOIN judges_score ON judges_score.pro_id = pro_details3.pro_id</span><br><span class=\"line\">                 INNER JOIN pro_coreteam ON pro_details3.pro_id = pro_coreteam.pro_id</span><br><span class=\"line\">                 INNER JOIN sys_user ON sys_user.user_id = pro_coreteam.student_id</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sql</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--根据项目赛道查询项目信息--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectProDetailsByProTrack&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;proDetailsResult&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;proSelectDetails&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">&quot;selectProDetailsVo&quot;</span>/&gt;</span></span><br><span class=\"line\">        where pro_track = #&#123;proTrack&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>1.parameterType</strong><br>定义在增删改查标签中的属性，<strong>指定SQL文中where条件的参数类型，</strong>可以是基本数据类型（8个）或String或者对象类型<br>例如，根据id查询name，如果数据库中定义的字段id是int类型，就可以指定parameterType的属性值是int，可以参看下边的代码。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt; select id=&quot;queryPersonNameById&quot;  parameterType=&quot;int&quot; resultType=&quot;String&quot;&gt;<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2.resultType</strong><br>也是定义在增删改查标签中的属性，<strong>用于指定查询结果或增删改执行结果的类型</strong>，同样可以是<strong>基本数据类型+String+对象类型</strong>，这里需要注意的是，<strong>当查询结果是多条时，无需写List，MyBatis底层会自动为我们生成List&lt;数据类型&gt;，我们只需指定类型即可</strong>。<br>同样是上边的例子，根据id查询name，name在数据库中是varchar类型，resultType就指定成String类型，类型不区分大小写，尽量保持和Java一致，使用大写。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt; select id=&quot;queryPersonNameById&quot; parameterType=&quot;int&quot; resultType=&quot;String&quot;&gt;<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3.resultMap</strong><br><strong>当实体类的属性名和数据库表字段名或类型不一致时使用</strong><br>例如，Person表中，定义的字段是id和name<br>Java实体类中，定义的是pid和pname，这种情况下，使用resultMap手动完成数据库和Java实体类属性的映射。<br>它是单独的&lt; resultMap&gt;标签，定义<code>id</code>(该属性是下面要用到的resultMap标签对应的值)，<code>type</code>（该属性指定了结果应该映射到的Java类的完全限定名或别名。）通常使用在查询标签中<br>例如下边的代码<br>id标签完成数据库主键的映射<br>result标签完成数据库非主键字段的映射<br>property属性指定java实体类中的属性名，column是数据库字段名</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;xxx.xxx.mapper.PersonMapper&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;person&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;personMapping&quot;</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;pid&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;id&quot;</span>/&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;pname&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;name&quot;</span>/&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;age&quot;</span>/&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sex&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;queryAllPersonUseResultMap&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;personMapping&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from person</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-增强for循环\"><a href=\"#2-增强for循环\" class=\"headerlink\" title=\"(2)增强for循环\"></a>(2)增强for循环</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (元素类型 参数 : 集合名称) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用element(参数)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>通常适配类型：它通常用于遍历数组或实现了<code>Iterable</code>接口的集合类（如<code>ArrayList</code>、<code>HashSet</code>等）。</p>\n</li>\n<li><p>增强for循环的优点：</p>\n<ul>\n<li><p>使用增强型<code>for</code>循环的优点</p>\n<ul>\n<li><p><strong>简洁易读</strong>: 代码更简洁，不需要显式地处理索引。</p>\n</li>\n<li><p><strong>减少错误</strong>: 避免了手动操作索引可能带来的错误，例如越界访问。</p>\n</li>\n</ul>\n</li>\n<li><p>使用增强型<code>for</code>循环的限制</p>\n<ul>\n<li><p><strong>只读访问</strong>: 增强型<code>for</code>循环适用于只读访问集合中的元素，如果需要修改元素或需要索引值，则需要使用传统的<code>for</code>循环。</p>\n</li>\n<li><p><strong>无法跳跃访问</strong>: 不能实现按特定步长跳跃访问元素，只能顺序遍历。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","categories":[],"tags":[{"name":"Java学习","slug":"Java学习","permalink":"http://example.com/tags/Java%E5%AD%A6%E4%B9%A0/"}]},{"title":"记录Hadoop中HDFS命令统计词频错误","date":"2024-03-30T10:07:41.000Z","path":"2024/03/30/记录Hadoop中HDFS命令统计词频错误/","content":"<h1 id=\"关于这次错误\"><a href=\"#关于这次错误\" class=\"headerlink\" title=\"关于这次错误\"></a>关于这次错误</h1><p>我个人搭建了<code>Hadoop</code>集群，当词频统计这个案例的时候，我上传没问题但就是查看有问题，我点击查看文件时，报出了个这么一个错误</p>\n<p><code>Couldn&#39;t preview the file. NetworkError: Failed to execute &#39;send&#39; on &#39;XMLHttpRequest&#39;:xxx</code></p>\n<p>大概翻译就是:<code>无法预览文件。NetworkError：无法在“XMLHttpRequest”上执行“send”：</code></p>\n<p>百度了很多，很多人都在说是配置文件<code>hdfs-site.xml</code>文件中有个叫做</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.webhdfs.enabled<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个的value值是false或者根本没有设置这一条属性，当然了，我属于后者，我的配置文件中并没有这项配置，但是我也照做了，然而在次启动后，依旧报同样的错误。</p>\n<p>实际上解决方法就是在windows上修改文件: <code>C:\\Windows\\System32\\drivers\\etc\\hosts增加内容（Hadoop集群中各节点及主机名的映射</code></p>\n<p>以我为例:</p>\n<p><code>192.168.121.160 主机名1</code></p>\n<p><code>192.168.121.161 主机名2</code></p>\n<p><code>192.168.121.161 主机名3</code></p>\n<p>重启，完美解决成功出现统计的词和文件内容。</p>\n","categories":[],"tags":[{"name":"Linux Error","slug":"Linux-Error","permalink":"http://example.com/tags/Linux-Error/"}]},{"title":"开发(基于ruoyiui)笔记","date":"2024-03-21T07:30:34.000Z","path":"2024/03/21/开发-基于ruoyiui-笔记/","content":"<h1 id=\"问题（一）在查询时参数没有带入\"><a href=\"#问题（一）在查询时参数没有带入\" class=\"headerlink\" title=\"问题（一）在查询时参数没有带入\"></a>问题（一）在查询时参数没有带入</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&lt;el-form-item label=&quot;项目赛道&quot; prop=&quot;proTrack&quot;&gt;*</span><br><span class=\"line\"></span><br><span class=\"line\">​    *&lt;el-select*</span><br><span class=\"line\"></span><br><span class=\"line\">​     *v-model=&quot;queryParams.proTrack&quot;*</span><br><span class=\"line\"></span><br><span class=\"line\">​     *placeholder=&quot;请选择项目赛道&quot;*</span><br><span class=\"line\"></span><br><span class=\"line\">​     *clearable*</span><br><span class=\"line\"></span><br><span class=\"line\">​     *@keyup.enter.native=&quot;handleQuery&quot;*</span><br><span class=\"line\"></span><br><span class=\"line\">​    *\\&gt;*</span><br><span class=\"line\"></span><br><span class=\"line\">​    *&lt;el-option v-for=&quot;item in proTrackList&quot;*</span><br><span class=\"line\"></span><br><span class=\"line\">​    *:key=&quot;item.key&quot;*</span><br><span class=\"line\"></span><br><span class=\"line\">​    *:label=&quot;item.proTrack&quot;*</span><br><span class=\"line\"></span><br><span class=\"line\">​    *:value=&quot;item.proTrack&quot;*</span><br><span class=\"line\"></span><br><span class=\"line\">​    *\\&gt;*</span><br><span class=\"line\"></span><br><span class=\"line\">​    *&lt;/el-option&gt;*</span><br><span class=\"line\"></span><br><span class=\"line\">​    *&lt;/el-select&gt;*</span><br><span class=\"line\"></span><br><span class=\"line\">   *&lt;/el-form-item&gt;*</span><br></pre></td></tr></table></figure>\n\n<p>这是一段vue代码,我出现的问题是再前端页面查询的时候无法带入proTrack这个参数。</p>\n<p>解决方法:因为我们proTrackList中没有value这个字段，导致我再绑定的时候:value&#x3D;”item.value”绑定出错，将value更换为proTrack成功在查询时候带入了参数proTrack</p>\n<p><img src=\"/2024/03/21/%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8Eruoyiui-%E7%AC%94%E8%AE%B0/Users/48531\\OneDrive\\桌面\\hexo-blog\\source_posts\\开发-基于ruoyiui-笔记\\image-20240321174607944.png\" alt=\"image-20240321174607944\"></p>\n<p><img src=\"/2024/03/21/%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8Eruoyiui-%E7%AC%94%E8%AE%B0/Users/48531\\OneDrive\\桌面\\hexo-blog\\source_posts\\开发-基于ruoyiui-笔记\\image-20240321174646796.png\" alt=\"image-20240321174646796\"></p>\n<p><code>还有一种没有带入参数的情况就是，有些需要参数的函数，你可能没有传入函数或者定义接受函数的变量。</code>那这时候我们就需要去定义这个函数对于变量的传与接。下面来举一个我的错误例子</p>\n<p>先来看我原本的写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//查询小组列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">selectGroup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">loading</span>=<span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"title function_\">selectGroupList</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">queryParams</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​    <span class=\"variable language_\">this</span>.<span class=\"property\">tableList</span> = response.<span class=\"property\">rows</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">​    <span class=\"variable language_\">this</span>.<span class=\"property\">total</span> = response.<span class=\"property\">total</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">​    <span class=\"variable language_\">this</span>.<span class=\"property\">loading</span>=<span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//赛道改变清空组列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">selectOnChangeTrack</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">tableList</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"title function_\">selectGroup</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">Track</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>可以看<code>selectOnChangeTrack</code>这个函数里，我在调用 <code>this.selectGroup(this.Track);</code>时，我传入了参数<code>this.Track</code>，<code>this.Track</code>是选择框的数据，<code>proTrack</code>是查询参数。而我在上面的函数时，却没有接收传过来的参数<code>this.Track</code>\t,在vue中，<code>通常定义一个形参，在作为传来参数的载体，然后再将这个形参的值赋值给查询变量，这样就能完成参数的传递</code>，改动如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查询小组列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">selectGroup</span>(<span class=\"params\">tempdata</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//将形参tempdata赋值给查询参数proTrack，这样在查询时就会携带proTrack这个参数.</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">queryParams</span>.<span class=\"property\">proTrack</span> = tempdata</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"property\">loading</span>=<span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"title function_\">selectGroupList</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">queryParams</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tableList</span> = response.<span class=\"property\">rows</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">total</span> = response.<span class=\"property\">total</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">loading</span>=<span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>以上即是改正后的。改正后可以带入要传的参数了。</p>\n<h1 id=\"问题（二）数据库字段名称与后端java应该对应\"><a href=\"#问题（二）数据库字段名称与后端java应该对应\" class=\"headerlink\" title=\"问题（二）数据库字段名称与后端java应该对应\"></a>问题（二）数据库字段名称与后端java应该对应</h1><p>这是一段ruoyi对应的后端代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=<span class=\"string\">&quot;selectRecommendationList&quot;</span> parameterType=<span class=\"string\">&quot;Recommendation&quot;</span> resultMap=<span class=\"string\">&quot;RecommendationResult&quot;</span>&gt;</span><br><span class=\"line\">    &lt;include refid=<span class=\"string\">&quot;selectRecommendationVo&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;where&gt;  </span><br><span class=\"line\">        &lt;<span class=\"keyword\">if</span> test=<span class=\"string\">&quot;time != null &quot;</span>&gt; and pro_details3.time = #&#123;time&#125;&lt;/<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\">        &lt;<span class=\"keyword\">if</span> test=<span class=\"string\">&quot;proName != null  and proName != &#x27;&#x27;&quot;</span>&gt; and pro_name like <span class=\"title function_\">concat</span><span class=\"params\">(<span class=\"string\">&#x27;%&#x27;</span>, #&#123;proName&#125;, <span class=\"string\">&#x27;%&#x27;</span>)</span>&lt;/<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\">        &lt;<span class=\"keyword\">if</span> test=<span class=\"string\">&quot;proScore != null &quot;</span>&gt; <span class=\"type\">and</span> <span class=\"variable\">pro_score</span> <span class=\"operator\">=</span> #&#123;proScore&#125;&lt;/<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\">        &lt;<span class=\"keyword\">if</span> test=<span class=\"string\">&quot;proGroup != null  and proGroup != &#x27;&#x27;&quot;</span>&gt; <span class=\"type\">and</span> <span class=\"variable\">pro_group</span> <span class=\"operator\">=</span> #&#123;proGroup&#125;&lt;/<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\">        &lt;<span class=\"keyword\">if</span> test=<span class=\"string\">&quot;userName != null  and userName != &#x27;&#x27;&quot;</span>&gt; <span class=\"type\">and</span> <span class=\"variable\">user_name</span> <span class=\"operator\">=</span> #&#123;userName&#125;&lt;/<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\">        &lt;<span class=\"keyword\">if</span> test=<span class=\"string\">&quot;deptName != null  and deptName != &#x27;&#x27;&quot;</span>&gt; <span class=\"type\">and</span> <span class=\"variable\">dept_name</span> <span class=\"operator\">=</span> #&#123;deptName&#125;&lt;/<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\">        &lt;<span class=\"keyword\">if</span> test=<span class=\"string\">&quot;proTrack !=null   and  proTrack != &#x27;&#x27;&quot;</span>&gt; and  pro_track=#&#123;proTrack&#125;&lt;/<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\">    &lt;/where&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n\n<p>mybaits中数据查询mapper文件中，值得注意的是在and后的字段名称**(比如uesr_name,dept_name,pro_track,pro_group等等)**要和数据库中的字段对应而前面的proGroup是实体类中我们自己定义的属性。</p>\n<p>不对应，就会报错</p>\n<p>以下这段代码是同样的道理，请注意数据字段是column后面的而实体类是property后面的，数据库字段要和自己的数据库中的字段一致(完全一致)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap type=<span class=\"string\">&quot;Recommendation&quot;</span> id=<span class=\"string\">&quot;RecommendationResult&quot;</span>&gt;</span><br><span class=\"line\">    &lt;result property=<span class=\"string\">&quot;proId&quot;</span>    column=<span class=\"string\">&quot;pro_id&quot;</span>    /&gt;</span><br><span class=\"line\">    &lt;result property=<span class=\"string\">&quot;proName&quot;</span>    column=<span class=\"string\">&quot;pro_name&quot;</span>    /&gt;</span><br><span class=\"line\">    &lt;result property=<span class=\"string\">&quot;proScore&quot;</span>    column=<span class=\"string\">&quot;pro_score&quot;</span>    /&gt;</span><br><span class=\"line\">    &lt;result property=<span class=\"string\">&quot;proGroup&quot;</span>    column=<span class=\"string\">&quot;pro_group&quot;</span>    /&gt;</span><br><span class=\"line\">    &lt;result property=<span class=\"string\">&quot;userName&quot;</span>    column=<span class=\"string\">&quot;user_name&quot;</span>    /&gt;</span><br><span class=\"line\">    &lt;result property=<span class=\"string\">&quot;deptName&quot;</span>    column=<span class=\"string\">&quot;dept_name&quot;</span>    /&gt;</span><br><span class=\"line\">    &lt;result property=<span class=\"string\">&quot;proTrack&quot;</span>     column=<span class=\"string\">&quot;pro_track&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;result property=<span class=\"string\">&quot;proGroupId&quot;</span> column=<span class=\"string\">&quot;pro_group_Id&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;result property=<span class=\"string\">&quot;proGroupName&quot;</span> column=<span class=\"string\">&quot;pro_group_name&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;result property=<span class=\"string\">&quot;time&quot;</span>     column=<span class=\"string\">&quot;time&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"问题-三-对vue中v-for的理解\"><a href=\"#问题-三-对vue中v-for的理解\" class=\"headerlink\" title=\"问题(三)对vue中v-for的理解\"></a>问题(三)对vue中v-for的理解</h1><p>在Vue的<code>v-for</code>循环中，<code>:key</code>、<code>:label</code>和<code>:value</code>是用于绑定循环中每个元素的属性的特殊语法。</p>\n<ul>\n<li><strong><code>:key</code>用于指定循环中每个元素的唯一标识符。它是必需的，用于帮助Vue跟踪每个元素的身份，以便在更新DOM时进行高效的重用和重新排序。通常，你可以使用一个唯一的属性或索引作为<code>key</code>，确保在循环中的元素之间具有唯一性。</strong></li>\n<li><strong><code>:label</code>用于指定循环中每个选项的显示文本。它绑定了每个选项的显示值，这将在选择框中显示给用户。</strong></li>\n<li><strong>:value&#96;用于指定循环中每个选项的实际值。它绑定了每个选项的实际值，当用户选择某个选项时，该值将被传递给绑定的数据模型。</strong></li>\n</ul>\n<p>这些特殊语法（<code>:key</code>、<code>:label</code>和<code>:value</code>）是Vue中用于在循环中绑定属性的常见约定，但你也可以根据需要选择其他属性名称。重要的是确保在循环中的每个元素都有唯一的标识符作为<code>key</code>，以及适当的属性用于<code>label</code>和<code>value</code>。这样可以确保循环中的每个元素都能正确地显示和处理。</p>\n<h1 id=\"问题（四）理解一段代码的含义-以获取学院名称列表为例\"><a href=\"#问题（四）理解一段代码的含义-以获取学院名称列表为例\" class=\"headerlink\" title=\"问题（四）理解一段代码的含义(以获取学院名称列表为例)\"></a>问题（四）理解一段代码的含义(以获取学院名称列表为例)</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**获取学院名称函数 */</span><br><span class=\"line\"></span><br><span class=\"line\">  getDeptNameList()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  this.loading = true;</span><br><span class=\"line\"></span><br><span class=\"line\">   listRecommendation(this.queryParams).then(response =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​     this.deptNameList = response.rows;</span><br><span class=\"line\"></span><br><span class=\"line\">​     console.log(this.deptNameList)</span><br><span class=\"line\"></span><br><span class=\"line\">​     this.total = response.total;</span><br><span class=\"line\"></span><br><span class=\"line\">​     this.loading = false;</span><br><span class=\"line\"></span><br><span class=\"line\">​    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>下面对这段代码剖析：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getDeptNameList</span>(<span class=\"params\"></span>) &#123;  <span class=\"variable language_\">this</span>.<span class=\"property\">loading</span> = <span class=\"literal\">true</span>; *<span class=\"comment\">// 设置 loading 状态为 true，表示正在加载数据*  </span></span><br><span class=\"line\"></span><br><span class=\"line\"> *<span class=\"comment\">// 调用 listRecommendation 函数，并传递 this.queryParams 参数*  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">listRecommendation</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">queryParams</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123; </span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">deptNameList</span> = response.<span class=\"property\">rows</span>; *<span class=\"comment\">// 将返回的学院名称列表赋值给 this.deptNameList*    </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">deptNameList</span>); *<span class=\"comment\">// 打印学院名称列表到控制台*    </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">total</span> = response.<span class=\"property\">total</span>; *<span class=\"comment\">// 设置总数为返回结果的总数*    </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">loading</span> = <span class=\"literal\">false</span>; *<span class=\"comment\">// 设置 loading 状态为 false，表示加载数据完成* </span></span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;); &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>帮助理解</p>\n<h1 id=\"思路（一）选择框一限定选择框二的内容\"><a href=\"#思路（一）选择框一限定选择框二的内容\" class=\"headerlink\" title=\"思路（一）选择框一限定选择框二的内容\"></a>思路（一）选择框一限定选择框二的内容</h1><p>如果想实现两个选择框第一个选择框里面的所选择的内容可以改变第二个选择框里面的数据（比如选择了第一个框里面的2021年，那第二个选择框就会显示在2021里面有什么内容)</p>\n<p>可以考虑使用@change&#x3D;””来绑定一个变化，只要第一个选择框里面的内容变了，那么就会执行@change绑定的事件比如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //选择框一</span><br><span class=\"line\">&lt;el-form-item label=&quot;选择赛事:&quot; prop=&quot;time&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">​     &lt;el-select</span><br><span class=\"line\"></span><br><span class=\"line\">​      v-model=&quot;queryParams.time&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">​      placeholder=&quot;请选择参赛时间&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">​      clearable //表示是否可以清除选择框内容</span><br><span class=\"line\"></span><br><span class=\"line\">​      @change=&quot;handleSelectionChange1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">​     \\&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">​      &lt;el-option v-for=&quot;dict in \t\t dict.type.events_year&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">​      :key=&quot;dict.key&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">​      :label=&quot;dict.value&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">​      :value=&quot;dict.value&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">​      &lt;/el-option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">​     &lt;/el-select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//选择框二</span><br><span class=\"line\">el-form-item label=&quot;&quot; prop=&quot;selectCompetition&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">​    &lt;el-select</span><br><span class=\"line\"></span><br><span class=\"line\">​     class=&quot;custom-select&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">​     v-model=&quot;queryParams.selectCompetition&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">​     placeholder=&quot;请选择赛事&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">​     clearable</span><br><span class=\"line\"></span><br><span class=\"line\">​     @keyup.enter.native=&quot;handleQuery&quot; //回车</span><br><span class=\"line\"></span><br><span class=\"line\">​    \\&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">​    &lt;el-option v-for=&quot; item in competitionList&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">​    :key=&quot;item.key&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">​    :label=&quot;item.eventName&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">​    :value=&quot;item.value&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">​    &lt;/el-option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;/el-select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//@change的所绑定事件的功能</span></span><br><span class=\"line\"> <span class=\"title function_\">handleSelectionChange1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"property\">queryParams</span>.<span class=\"property\">startTime</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">queryParams</span>.<span class=\"property\">time</span>; <span class=\"comment\">// Update the query parameter</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"property\">queryParams</span>.<span class=\"property\">selectCompetition</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// Clear the competition dropdown</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"property\">competitionList</span> = []; <span class=\"comment\">// Clear the competition list</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getEventsList</span>(); <span class=\"comment\">// Call the function to fetch the updated competition list</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"问题（五）-在今天编写代码时候遇到了这么一个问题，就是关于添加数据前端页面他不给我显示。\"><a href=\"#问题（五）-在今天编写代码时候遇到了这么一个问题，就是关于添加数据前端页面他不给我显示。\" class=\"headerlink\" title=\"问题（五）:在今天编写代码时候遇到了这么一个问题，就是关于添加数据前端页面他不给我显示。\"></a>问题（五）:在今天编写代码时候遇到了这么一个问题，就是关于添加数据前端页面他不给我显示。</h1><p><img src=\"/2024/03/21/%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8Eruoyiui-%E7%AC%94%E8%AE%B0/Users/48531\\OneDrive\\桌面\\hexo-blog\\source_posts\\开发-基于ruoyiui-笔记\\image-20240327175415722.png\" alt=\"image-20240327175415722\"></p>\n<p>查看发现是getfilename函数作怪，因为我的这个函数是要获取路径去分割，然而我并没有在数据库给出路径，所以这两个数据显示不出来，更改函数后成功显示，函数更改如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"title function_\">getfileName</span>(<span class=\"params\">path</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span>(path)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​    <span class=\"keyword\">return</span> path.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>).<span class=\"title function_\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​    <span class=\"keyword\">return</span> <span class=\"string\">&quot;暂无资料&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"方法1-在数据库中呢，我删除一个数据，由于这个数据关联很多表，那就需要一同删除，这可以利用触发器，以下是我在该项目中写道的触发器\"><a href=\"#方法1-在数据库中呢，我删除一个数据，由于这个数据关联很多表，那就需要一同删除，这可以利用触发器，以下是我在该项目中写道的触发器\" class=\"headerlink\" title=\"方法1:在数据库中呢，我删除一个数据，由于这个数据关联很多表，那就需要一同删除，这可以利用触发器，以下是我在该项目中写道的触发器\"></a>方法1:在数据库中呢，我删除一个数据，由于这个数据关联很多表，那就需要一同删除，这可以利用触发器，以下是我在该项目中写道的触发器</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> pro_coreteam <span class=\"keyword\">WHERE</span> pro_id <span class=\"operator\">=</span> OLD.pro_id;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br></pre></td></tr></table></figure>\n\n<p>该触发器是当我们根据项目id（pro_id）删除数据时，他会带着通过项目id关联的id里面的内容一同删除,删除的表名称、是<code>pro_coreteam</code></p>\n<p>4.2新添加了一个触发器代码如下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER <span class=\"operator\">/</span><span class=\"operator\">/</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> update_group_id</span><br><span class=\"line\">AFTER <span class=\"keyword\">INSERT</span> <span class=\"keyword\">ON</span> pro_mapping_group</span><br><span class=\"line\"><span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> pro_details3</span><br><span class=\"line\">    <span class=\"keyword\">SET</span> pro_group_id <span class=\"operator\">=</span> NEW.group_id</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> pro_id <span class=\"operator\">=</span> NEW.pro_id;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span></span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n\n<p>解释</p>\n<p>在这个触发器中，当在 <code>pro_mapping_group</code> 表中插入新的记录时，将会更新 <code>pro_details3</code> 表中对应 <code>pro_id</code> 的 <code>pro_group_id</code> 字段。这里假设 <code>pro_mapping_group</code> 表和 <code>pro_details3</code> 表通过 <code>pro_id</code> 字段关联。如果你的实际情况不同，请根据实际情况修改 <code>WHERE</code> 子句。</p>\n<p>请注意，这个触发器只在插入新的记录时触发，如果你更新 <code>pro_mapping_group</code> 表中的 <code>group_id</code> 字段，这个触发器不会触发。如果你希望在更新 <code>group_id</code> 时也触发，你需要创建一个额外的 <code>AFTER UPDATE</code> 触发器</p>\n<h1 id=\"方法2-如何写一个对话框即点击按钮弹出对话框？\"><a href=\"#方法2-如何写一个对话框即点击按钮弹出对话框？\" class=\"headerlink\" title=\"方法2:如何写一个对话框即点击按钮弹出对话框？\"></a>方法2:如何写一个对话框即点击按钮弹出对话框？</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;!-- ... --&gt;</span><br><span class=\"line\">  &lt;el-button type=&quot;success&quot; @click=&quot;showDialog&quot;&gt;导入互联网+大赛官网（大创网）项目资料&lt;/el-button&gt;</span><br><span class=\"line\">  &lt;el-dialog title=&quot;导入互联网+大赛官网（大创网）项目资料&quot; :visible.sync=&quot;dialogVisible&quot; width=&quot;800px&quot; top=&quot;5vh&quot; append-to-body&gt;</span><br><span class=\"line\">    &lt;!-- 对话框内容 --&gt;</span><br><span class=\"line\">    &lt;!-- ... --&gt;</span><br><span class=\"line\">  &lt;/el-dialog&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      dialogVisible: false, // 对话框可见性</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    showDialog() &#123;</span><br><span class=\"line\">      this.dialogVisible = true; // 点击按钮时显示对话框</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 其他方法</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"方法3-如何在插入数据时携带其他参数\"><a href=\"#方法3-如何在插入数据时携带其他参数\" class=\"headerlink\" title=\"方法3:如何在插入数据时携带其他参数\"></a>方法3:如何在插入数据时携带其他参数</h1><p>新建你要插入的属性比如我下面的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Excel(name = &quot;学生账号&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Long StuNumber;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 学生id*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Long userId;</span><br></pre></td></tr></table></figure>\n\n<p>在服务层写好定义的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">insertCore</span><span class=\"params\">(ProCoreteam proCoreteam)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>实现类中实现方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">insertCore</span><span class=\"params\">(ProCoreteam proCoreteam)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> proManagerMapper.insertCore(proCoreteam);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>mapper</code>中定义方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">insertCore</span><span class=\"params\">(ProCoreteam proCoreteam)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>xml</code>文件中使用方法</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insertCore&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;ProCoreteam&quot;</span>  &gt;</span></span><br><span class=\"line\">    insert into pro_coreteam</span><br><span class=\"line\">        (pro_id,student_id) value (#&#123;proId&#125;,#&#123;studentId&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>同理按照以上步骤创建<code>stuNumber</code>的方法</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectstuIdBystuNumber&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;long&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;ProManagerResult&quot;</span>&gt;</span></span><br><span class=\"line\">    select user_id from sys_user where phonenumber = #&#123;stuNumber&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>关键点在下面，我们要先获取插入完成以后的proid</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--      </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\">//获取插入完以后的proid</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">selectKey</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;Long&quot;</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">&quot;proId&quot;</span> <span class=\"attr\">order</span>=<span class=\"string\">&quot;AFTER&quot;</span>&gt;</span></span><br><span class=\"line\">            select LAST_INSERT_ID()</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">selectKey</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>1.最外层的<code>&lt;insert&gt;&lt;/insert&gt;</code>没有返回属性<code>（resultType）</code>，但是里面的<code>&lt;selectKey&gt;&lt;/selectKey&gt;</code>是有返回值类型的。</li>\n<li>2.<code>order=&quot;AFTER&quot;</code>表示先执行插入，之后才执行<code>selectkey</code>语句的。</li>\n<li>3.<code>select @@identity</code>和<code>select LAST_INSERT_ID()</code>都表示选出刚刚插入的最后一条数据的id。</li>\n<li>4.实体类中id属性字段一定需要set以及get方法</li>\n<li>5.此时，接口中仍不需要有返回值，框架会自动将值注入到我们<code>insert</code>的那个对象中，我们可以直接使用就可以了。</li>\n</ul>\n<p>其实，我们的接口中可以有返回值，但是这个返回值不是id,而是表示<strong>插入后影响的行数</strong>，此时sql中仍和上面一样，不需要写返回值。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insertStudentCacheId&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;Student&quot;</span>&gt;</span></span><br><span class=\"line\">    insert into student(name,age,score) values(#&#123;name&#125;,#&#123;age&#125;,#&#123;score&#125;)</span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定结果类型resultType，keyProperty是属性，自动返回到属性id中，order是次序，after是指获取id是在于插入后 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">selectKey</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;int&quot;</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">order</span>=<span class=\"string\">&quot;AFTER&quot;</span>&gt;</span></span><br><span class=\"line\">        select @@identity</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">selectKey</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>最最最核心的一步</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//执行完以后主键自增，获取到自增的proId所以要先执行</span></span><br><span class=\"line\">proManagerMapper.insertProManager(proManager);</span><br><span class=\"line\"><span class=\"comment\">//创建实体类ProManager的对象S存储通过学生账号获得stuid</span></span><br><span class=\"line\"><span class=\"type\">ProManager</span> <span class=\"variable\">S</span> <span class=\"operator\">=</span>  proManagerMapper.selectstuIdBystuNumber(proManager.getStuNumber());</span><br><span class=\"line\"><span class=\"comment\">//带参数的构建对象方法,上面已经获取到了proId和studentId所以下面创建ProCoreteam的对象p_core存储这两个id</span></span><br><span class=\"line\">ProCoreteam p_core=<span class=\"keyword\">new</span> <span class=\"title class_\">ProCoreteam</span>(proManager.getProId(),S.getUserId());</span><br><span class=\"line\"><span class=\"comment\">//调用插入方法插入id，由于是个导入过程所以会在导入过程中执行以上内容自动插入，这样就携带了其他参数</span></span><br><span class=\"line\">proManagerMapper.insertCore(p_core);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"问题（六）基于ruoyiUI新建对话框的一些属性问题\"><a href=\"#问题（六）基于ruoyiUI新建对话框的一些属性问题\" class=\"headerlink\" title=\"问题（六）基于ruoyiUI新建对话框的一些属性问题\"></a>问题（六）基于<code>ruoyiUI</code>新建对话框的一些属性问题</h1><p>我们首先新建一个对话框，代码如下(我这个时<code>ruoyiUI</code>的对话框建法)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-dialog  :title=&quot;title&quot;    :visible.sync=&quot;open&quot; width=&quot;1500px&quot; append-to-body&gt; &lt;/el-dialog&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>:title=&quot;title&quot;</code>：此属性设置对话框的标题。<code>title</code> 应该是你的 Vue 实例的 data 属性之一，用来存放对话框的标题。<code>:</code> 前缀表示这是一个动态属性，它的值会被解析为 JavaScript 表达式。</li>\n<li><code>:visible.sync=&quot;open&quot;</code>：此属性控制对话框的可见性。如果 <code>open</code> 是 <code>true</code>，对话框就会显示；如果 <code>open</code> 是 <code>false</code>，对话框就会隐藏。<code>.sync</code> 修饰符表示这个属性是双向绑定的：当对话框的可见性改变时，<code>open</code> 的值也会相应地改变（对话框自带的<code>×</code>）。</li>\n<li><code>width=&quot;1500px&quot;</code>：此属性设置对话框的宽度。在这个例子中，对话框的宽度被设置为 1500 像素。</li>\n<li><code>append-to-body</code>：此属性表示对话框将被附加到 <code>body</code> 元素。这可以防止对话框被其他 CSS 影响，确保它能正确地显示在其他元素之上。这是一个布尔属性，如果存在，其值就是 <code>true</code>。</li>\n</ul>\n<h1 id=\"方法4-如何获取当前行id？\"><a href=\"#方法4-如何获取当前行id？\" class=\"headerlink\" title=\"方法4: 如何获取当前行id？\"></a>方法4: 如何获取<code>当前行id</code>？</h1><p>面对这个问题我只想说，这可真是让我想的酣畅淋漓的一次啊，为什么这么说？先来看看我犯了什么错误把<br>首先，我当时一心只想着获取<code>当前行id</code>，但是却忽视了原表格是一个静态表格这个前提。所以我花了快一个小时，唉还好脑子转得快(快什么，要是快的话早想到了)突然意识到了，这是<code>一个静态表格</code>，我去哪里动态获取当前行？</p>\n<p>其次，因为脑子当时很热，一点思路也没有，所以就乱撞，白白荒废了时间。</p>\n<p>接下来，让我来整理获取当前行id的一个思路</p>\n<p>首先想，你要在哪一行操作，好的定位到这一行，要用<code>&lt;template&gt;&lt;/template&gt;</code>标签，具体写法如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-table-column prop=&quot;selectPro&quot; label=&quot;查看项目&quot; width=&quot;208&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;el-button </span><br><span class=\"line\"></span><br><span class=\"line\">   class=&quot;ebtn1&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">   style=&quot;color: white;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">   @click=&quot;getAllocationList(scope.row.groupId)&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">   \\&gt;查看&lt;/el-button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure>\n\n<p>比如我就是这一行要注意了，绑定点击事件的时候，必须加<code>scope.row.xxxx</code>其中的<code>xxxx</code>是你要<code>获取的什么什么id</code>，那么这样你就可以获取到当前行的id了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getAllocationList</span>(<span class=\"params\">groupId</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(groupId)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">loading</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"title function_\">alreadyAllocation</span>(groupId).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">alAllocationList</span> = response.<span class=\"property\">rows</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">total</span> = response.<span class=\"property\">total</span>;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">loading</span>=<span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以在你所用的时间<code>console.log(groupId)</code>你获取的id然后查看控制台有没有对应的id输出，然后传递参数就可以了。</p>\n<p>你甚至还可以这么写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getAllocationList</span>(<span class=\"params\">groupId</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 输出传入的 groupId</span></span><br><span class=\"line\">   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(groupId)</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个新对象，包含 groupId</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> params = &#123;groupId&#125;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">loading</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//传递参数</span></span><br><span class=\"line\">   <span class=\"title function_\">alreadyAllocation</span>(params).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">alAllocationList</span> = response.<span class=\"property\">rows</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">total</span> = response.<span class=\"property\">total</span>;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">loading</span>=<span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>也是可以的，ok今天就写这么多0.0</p>\n<h1 id=\"问题7-在传入参数时的错误\"><a href=\"#问题7-在传入参数时的错误\" class=\"headerlink\" title=\"问题7:在传入参数时的错误\"></a>问题7:在传入参数时的错误</h1><p>报错是这样对的</p>\n<p> <code>Error: nested exception is org.apache.ibatis.binding.BindingException: Parameter &#39;groupId&#39; not found. Available parameters are [arg1, arg0, param1, param2]</code> 翻译一下就是</p>\n<p><code>错误：嵌套异常是 org.apache.ibatis.binding.BindingException：找不到参数“groupId”。可用参数为 [arg1， arg0， param1， param2]</code></p>\n<p>这是我传入参数的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getAllocationList</span>(<span class=\"params\">row</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">const</span> proTrack = <span class=\"variable language_\">this</span>.<span class=\"property\">Track</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">const</span> groupId=row.<span class=\"property\">groupId</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">const</span> groupName=row.<span class=\"property\">groupName</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">loading</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"title function_\">alreadyAllocation</span>(groupId,proTrack).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​    <span class=\"variable language_\">this</span>.<span class=\"property\">alAllocationList</span> = response.<span class=\"property\">data</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">​    <span class=\"comment\">// console.log(this.alAllocationList)</span></span><br><span class=\"line\"></span><br><span class=\"line\">​    <span class=\"variable language_\">this</span>.<span class=\"title function_\">sendArrayToParent</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">alAllocationList</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">​    <span class=\"variable language_\">this</span>.<span class=\"title function_\">sendArrayToParent2</span>(groupName);</span><br><span class=\"line\"></span><br><span class=\"line\">​    <span class=\"comment\">// console.log(tableList);</span></span><br><span class=\"line\"></span><br><span class=\"line\">​    <span class=\"variable language_\">this</span>.<span class=\"property\">total</span> = response.<span class=\"property\">total</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">​    <span class=\"variable language_\">this</span>.<span class=\"property\">loading</span>=<span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是js里面对应的接口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">alreadyAllocation</span>(<span class=\"params\">groupId,proTrack</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​    <span class=\"attr\">url</span>:  <span class=\"string\">&#x27;/project/csxmfp/group/&#x27;</span> + groupId +<span class=\"string\">&#x27;/&#x27;</span>+ proTrack,</span><br><span class=\"line\"></span><br><span class=\"line\">​    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>报错问题是<code>gruopId</code>找不到，可用参数给出了<code>[arg1, arg0, param1, param2]</code> 这四个参数，这时我就在想，那是不是传入的参数得用这四个中的几个呢？于是我检查了后端，在处理器(proAllocationController)中打印了我从前端带过来的两个参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过赛道名称和小组获取参赛项目分配详细信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PreAuthorize(&quot;@ss.hasPermi(&#x27;project:csxmfp:querybygroupId&#x27;)&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;group/&#123;groupId&#125;/&#123;trackName&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AjaxResult <span class=\"title function_\">getInfoByGroupId</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;groupId&quot;)</span> Long groupId,<span class=\"meta\">@PathVariable(&quot;trackName&quot;)</span> String trackName)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(groupId);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;aaaa&quot;</span>+trackName);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> success(proAllocationService.selectGroupProjectByGroupId(groupId,trackName));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出</p>\n<p><img src=\"/2024/03/21/%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8Eruoyiui-%E7%AC%94%E8%AE%B0/Users/48531\\OneDrive\\桌面\\hexo-blog\\source_posts\\开发-基于ruoyiui-笔记\\image-20240403220611894.png\" alt=\"image-20240403220611894\"></p>\n<p>可以看到控制台是有<code>groupId</code>的输出<code>1</code>这就是说拿到了前端数据那为什么后端确说我没有定义呢？检查xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectGroupProjectByGroupId&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;GroupProject&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;GroupProjectresultMap&quot;</span>&gt;</span></span><br><span class=\"line\">    SELECT</span><br><span class=\"line\">        pro_details3.pro_id,</span><br><span class=\"line\">        pro_details3.pro_name,</span><br><span class=\"line\">        pro_details3.pro_logo,</span><br><span class=\"line\">        pro_details3.pro_track,</span><br><span class=\"line\">        pro_details3.pro_group_id</span><br><span class=\"line\">    FROM</span><br><span class=\"line\">        pro_details3</span><br><span class=\"line\">            INNER JOIN</span><br><span class=\"line\">        pro_mapping_group ON pro_details3.pro_id = pro_mapping_group.pro_id</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        pro_mapping_group.group_id = #&#123;group_id&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;proTrack != &#x27;null&#x27; and proTrack != &#x27;&#x27; and arg1!= null&quot;</span>&gt;</span> and pro_details3.pro_track = #&#123;proTrack&#125;<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">    ORDER BY</span><br><span class=\"line\">        pro_details3.pro_id;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>于是就想到会不会是参数的传递问题呢？于是我就尝试用<code>arg0</code>代替<code>groupId</code>，用<code>age1</code>代替了<code>proTrack</code>,下面是更新完xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectGroupProjectByGroupId&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;GroupProject&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;GroupProjectresultMap&quot;</span>&gt;</span></span><br><span class=\"line\">    SELECT</span><br><span class=\"line\">        pro_details3.pro_id,</span><br><span class=\"line\">        pro_details3.pro_name,</span><br><span class=\"line\">        pro_details3.pro_logo,</span><br><span class=\"line\">        pro_details3.pro_track,</span><br><span class=\"line\">        pro_details3.pro_group_id</span><br><span class=\"line\">    FROM</span><br><span class=\"line\">        pro_details3</span><br><span class=\"line\">            INNER JOIN</span><br><span class=\"line\">        pro_mapping_group ON pro_details3.pro_id = pro_mapping_group.pro_id</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        pro_mapping_group.group_id = #&#123;arg0&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;arg1 != &#x27;null&#x27; and arg1 != &#x27;&#x27; and arg1!= null&quot;</span>&gt;</span> and pro_details3.pro_track = #&#123;arg1&#125;<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">    ORDER BY</span><br><span class=\"line\">        pro_details3.pro_id;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>运行代码，成功传递了数据，问题解决了。你要是问我为什么这样做，其实我也不清楚，但是通过报错信息给出了<code>可用的</code>四个参数，所以说有错误还是要从报错信息入手啊 </p>\n<h1 id=\"问题8：vue-ruoyi前端内网在线预览ppt\"><a href=\"#问题8：vue-ruoyi前端内网在线预览ppt\" class=\"headerlink\" title=\"问题8：vue+ruoyi前端内网在线预览ppt\"></a>问题8：vue+ruoyi前端内网在线预览ppt</h1><p>在内网在线预览ppt时，我踩了很多坑，这里记录一下我都翻过什么错误。</p>\n<ul>\n<li><p>错误一：在给数据模型里面的数据赋值时，没有搞清楚层级，来看代码<img src=\"/2024/03/21/%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8Eruoyiui-%E7%AC%94%E8%AE%B0/image-20240506225835352.png\" alt=\"image-20240506225835352\">这里，我定义了一个<code>prevForm</code>对象，里面有<code>prev</code>和<code>url</code>两个数据。然而在我进行赋值操作时错写成了this.prev &#x3D; xxxx，this.url&#x3D;xxxx，看似没错，但是实际上已经少写了一层了那就是丢了一个最大的对象<code>prevForm</code>正确写法是这样的<img src=\"/2024/03/21/%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8Eruoyiui-%E7%AC%94%E8%AE%B0/image-20240506230117170.png\" alt=\"image-20240506230117170\"></p>\n</li>\n<li><p>错误二：<img src=\"/2024/03/21/%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8Eruoyiui-%E7%AC%94%E8%AE%B0/image-20240506230225944.png\" alt=\"image-20240506230225944\">没有搞清楚&#x3D;，&#x3D;&#x3D;，&#x3D;&#x3D;&#x3D;这三个符号的意思，&#x3D;：意味着赋值操作，左边的值赋值给右边的，&#x3D;&#x3D;是比较运算符，当左右两边相等时返回true，不相等时返回false，而&#x3D;&#x3D;&#x3D;在前端中表示全等，意味着完全相等，意思就是在做运算判断时，等式两边的数值以及数据类型都必须相同。</p>\n</li>\n<li><p>在线预览ppt：</p>\n<ul>\n<li>我完成这次任务主要使用了vue-office，官网：<a href=\"https://gitee.com/ye-jizeng/vue-office\">vue-office: 支持word(.docx)、excel(.xlsx)、pdf等各类型office文件预览的vue组件集合，提供一站式office文件预览方案，支持vue2和3 (gitee.com)</a></li>\n</ul>\n</li>\n<li><p>思路是，我在a标签中写了一个函数whatType用来判断这是一个以什么结尾的文件，这里用到了方法pop()取最后一个元素</p>\n<ul>\n<li><img src=\"/2024/03/21/%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8Eruoyiui-%E7%AC%94%E8%AE%B0/image-20240506230845450.png\" alt=\"image-20240506230845450\"></li>\n</ul>\n</li>\n<li><p>来说一下在线预览ppt的模板：</p>\n<ul>\n<li><p>第一步，确定你要在线预览文件的类型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//docx文档预览组件</span><br><span class=\"line\">npm install @vue-office/docx vue-demi</span><br><span class=\"line\"></span><br><span class=\"line\">//excel文档预览组件</span><br><span class=\"line\">npm install @vue-office/excel vue-demi</span><br><span class=\"line\"></span><br><span class=\"line\">//pdf文档预览组件</span><br><span class=\"line\">npm install @vue-office/pdf vue-demi</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>vue模板</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;vue-office-docx :src=&quot;docx&quot; @rendered=&quot;rendered&quot;/&gt;</span><br><span class=\"line\">    &lt;vue-office-excel :src=&quot;excel&quot; @rendered=&quot;rendered&quot;/&gt;</span><br><span class=\"line\">    &lt;vue-office-pdf :src=&quot;pdf&quot; @rendered=&quot;rendered&quot;/&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">//引入VueOfficeDocx组件</span><br><span class=\"line\">import VueOfficeDocx from &#x27;@vue-office/docx&#x27;</span><br><span class=\"line\">//引入VueOfficeExcel组件</span><br><span class=\"line\">import VueOfficeExcel from &#x27;@vue-office/excel&#x27;</span><br><span class=\"line\">//引入VueOfficePdf组件</span><br><span class=\"line\">import VueOfficePdf from &#x27;@vue-office/pdf&#x27;</span><br><span class=\"line\">//引入相关样式</span><br><span class=\"line\">import &#x27;@vue-office/docx/lib/index.css&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">    VueOfficeDocx</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      docx: &#x27;http://static.shanhuxueyuan.com/test6.docx&#x27; //设置文档网络地址，可以是相对地址</span><br><span class=\"line\">      excel：</span><br><span class=\"line\">      pdf:</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    rendered()&#123;</span><br><span class=\"line\">      console.log(&quot;渲染完成&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>一次性引入了三个，这样会渲染三个</p>\n<ul>\n<li><p>最后，展示一下我写的点击弹出弹窗，来展示对应的内容，代码如下(只展示核心部分，多余代码省略)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">.........</span><br><span class=\"line\">  &lt;el-table-column label=&quot;项目计划书&quot; align=&quot;center&quot; prop=&quot;proPlan&quot; &gt;</span><br><span class=\"line\">  &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class=\"line\">    &lt;a @click=&quot;whatType(scope.row.proPlan)&quot; v-if=&quot;getfileName(scope.row.proPt) !== &#x27;暂无资料&#x27;&quot;&gt;  </span><br><span class=\"line\">      &#123;&#123; getfileName(scope.row.proPlan) &#125;&#125;</span><br><span class=\"line\">      &lt;/a&gt;</span><br><span class=\"line\">      &lt;a v-else&gt;</span><br><span class=\"line\">        &#123;&#123; getfileName(scope.row.proPlan) &#125;&#125;</span><br><span class=\"line\">      &lt;/a&gt;</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\">.......</span><br><span class=\"line\">&lt;!--弹出各种文件预览弹窗--&gt;</span><br><span class=\"line\">&lt;el-dialog :visible.sync=&quot;dialogPrevVisible&quot; title=&quot;文件预览&quot; width=&quot;90%&quot; &gt;</span><br><span class=\"line\">    &lt;el-form style=&quot;margin-top: 10px;&quot; :model=&quot;prevForm&quot;&gt;</span><br><span class=\"line\">      &lt;template v-if=&quot;prevForm.prev == &#x27;docx&#x27;&quot;&gt;</span><br><span class=\"line\">          &lt;vue-office-docx style=&quot;height: 90%&quot; :src=&quot;prevForm.url&quot; @rendered=&quot;rendered&quot;/&gt;</span><br><span class=\"line\">      &lt;/template&gt;</span><br><span class=\"line\">      &lt;template v-if=&quot;prevForm.prev == &#x27;xlsx&#x27;&quot;&gt;</span><br><span class=\"line\">          &lt;vue-office-excel style=&quot;height: 90%&quot; :src=&quot;prevForm.url&quot; @rendered=&quot;rendered&quot; /&gt;</span><br><span class=\"line\">      &lt;/template&gt;</span><br><span class=\"line\">      &lt;template v-if=&quot;prevForm.prev == &#x27;pdf&#x27;&quot;&gt;</span><br><span class=\"line\">          &lt;vue-office-pdf style=&quot;height: 90%&quot; :src=&quot;prevForm.url&quot; @rendered=&quot;rendered&quot;/&gt;</span><br><span class=\"line\">      &lt;/template&gt;</span><br><span class=\"line\">    &lt;/el-form&gt;</span><br><span class=\"line\">  &lt;/el-dialog&gt;</span><br><span class=\"line\">......</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">//引入VueOfficeDocx组件</span><br><span class=\"line\">import VueOfficeDocx from &#x27;@vue-office/docx&#x27;;</span><br><span class=\"line\">import VueOfficeExcel from &#x27;@vue-office/excel&#x27;;</span><br><span class=\"line\">import VueOfficePdf from &#x27;@vue-office/pdf&#x27;;</span><br><span class=\"line\">//引入相关样式</span><br><span class=\"line\">import &#x27;@vue-office/docx/lib/index.css&#x27;;</span><br><span class=\"line\">data() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">   //设置弹窗初始状态</span><br><span class=\"line\">   dialogPrevVisible:false,</span><br><span class=\"line\">   prevForm:&#123;</span><br><span class=\"line\">    prev:&#x27;&#x27;,</span><br><span class=\"line\">    url:&#x27;&#x27;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">.....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  //判断路径的类型</span><br><span class=\"line\">  whatType(path)&#123;</span><br><span class=\"line\">    //获取文件拓展名并改为小写</span><br><span class=\"line\">    var tempPath = path;</span><br><span class=\"line\">    console.log(tempPath);</span><br><span class=\"line\">    //pop函数取最后一个元素，然后在转成小写。</span><br><span class=\"line\">    var fileType = path.split(&#x27;.&#x27;).pop().toLowerCase(); </span><br><span class=\"line\">    console.log(fileType);</span><br><span class=\"line\">    </span><br><span class=\"line\">   if(fileType == &#x27;docx&#x27;)&#123;</span><br><span class=\"line\">    this.prevForm.prev = &#x27;docx&#x27;,</span><br><span class=\"line\">    this.prevForm.url=&#x27;http://192.168.1.104/dev-api&#x27;+ tempPath</span><br><span class=\"line\">    this.dialogPrevVisible = true;</span><br><span class=\"line\">   </span><br><span class=\"line\">   &#125;else if(fileType == &#x27;excel&#x27;)&#123;</span><br><span class=\"line\">    this.prevForm.prev = &#x27;excel&#x27;,</span><br><span class=\"line\">    this.prevForm.url=&#x27;http://192.168.1.104/dev-api&#x27;+ tempPath</span><br><span class=\"line\">    this.dialogPrevVisible = true;</span><br><span class=\"line\">    </span><br><span class=\"line\">   &#125;else if(fileType ==&#x27;pdf&#x27;)&#123;</span><br><span class=\"line\">    this.prevForm.prev = &#x27;pdf&#x27;,</span><br><span class=\"line\">    this.prevForm.url=&#x27;http://192.168.1.104/dev-api&#x27;+ tempPath</span><br><span class=\"line\">    this.dialogPrevVisible = true;</span><br><span class=\"line\">   &#125;else&#123;</span><br><span class=\"line\">    window.alert(&quot;不支持查看该文件格式&quot;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">  rendered()&#123;</span><br><span class=\"line\">      console.log(&quot;渲染完成&quot;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"Vue中v-model数据绑定问题-绑定对象\"><a href=\"#Vue中v-model数据绑定问题-绑定对象\" class=\"headerlink\" title=\"Vue中v-model数据绑定问题(绑定对象)\"></a>Vue中v-model数据绑定问题(绑定对象)</h1><ul>\n<li><p>在vue中，选择框中如果需要传递多个值到后端进行带参数的查询，这时，我们就应该将这两个值，绑定在一个对象上，那么关于如何绑定到对象以及进行参数的传递，下面是我的理解：</p>\n</li>\n<li><p>示例代码：</p>\n<ul>\n<li><pre><code class=\"vue\">&lt;el-form :model=&quot;queryParams&quot;&gt;\n          &lt;el-form-item label=&quot;请选择赛事：&quot; prop=&quot;proGameId&quot;&gt;\n            &lt;el-select v-model=&quot;this.selectedOption&quot; placeholder=&quot;请选择下拉选择&quot; clearable :style=&quot;&#123;width: &#39;100%&#39;&#125;&quot; @change=&quot;getList2&quot;&gt;\n          &lt;el-option v-for=&quot;(item, index) in EventList&quot; :key=&quot;index&quot;  :label=&quot;`$&#123;item.proGame&#125;——$&#123;item.groupName&#125;`&quot;\n          :value=&quot;&#123; proGameId: item.proGameId, groupId: item.groupId &#125;&quot; :disabled=&quot;item.disabled&quot;&gt;&lt;/el-option&gt;\n        &lt;/el-select&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-form&gt; \n</code></pre>\n<p>解释：**:label&#x3D;”<code>$&#123;item.proGame&#125;——$&#123;item.groupName&#125;</code>“**绑定成这样的label，在我们的选择框中就会是下面的样式</p>\n<p><img src=\"/2024/03/21/%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8Eruoyiui-%E7%AC%94%E8%AE%B0/image-20240610141757357.png\" alt=\"image-20240610141757357\"></p>\n<p> **:value&#x3D;”{ proGameId: item.proGameId, groupId: item.groupId }”**通过这样的绑定，想要将proGameId和groupId同时绑定到该选择框中，那么首先v-model的绑定应该是一个对象<img src=\"/2024/03/21/%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8Eruoyiui-%E7%AC%94%E8%AE%B0/image-20240610141930131.png\" alt=\"image-20240610141930131\"></p>\n<p>并且在对象中，还必须包含你所绑定的这两个属性值，初始化为null。(初始化为空的原因是对象初始化就是空对象)，如下图</p>\n<p><img src=\"/2024/03/21/%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8Eruoyiui-%E7%AC%94%E8%AE%B0/image-20240610142031387.png\" alt=\"image-20240610142031387\"></p>\n<p>这样，就完成了数据在选择框层面的绑定。那么如何传递这两个数据呢？比如我今天就遇到这样的问题，从后端查询到这两个的值，同时也需要把查询到的值 ，再绑定到选择框中，当选择框的内的选项一改变就会传递这两个对象的值到后端再进行一次查询。</p>\n<p>首先要做的就是绑定@change事件，比如我上面代码中的</p>\n<p><img src=\"/2024/03/21/%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8Eruoyiui-%E7%AC%94%E8%AE%B0/image-20240610142336415.png\" alt=\"image-20240610142336415\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>然后</p>\n<p><img src=\"/2024/03/21/%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8Eruoyiui-%E7%AC%94%E8%AE%B0/image-20240610142457202.png\" alt=\"image-20240610142457202\"></p>\n<p>这样就成功把值带到查询参数里面，就可以在次传递给后端进行查询啦。</p>\n<p>最后，如果在调用函数getList2的时候我并没有指定参数，那么在方法中的getList2(value)中，这个value就指的是:value所绑定的内容。也就是用户选择的值</p>\n","categories":[],"tags":[{"name":"java和vue开发中遇到的错误以及如何改正和对他们的理解整理(参加的项目)","slug":"java和vue开发中遇到的错误以及如何改正和对他们的理解整理-参加的项目","permalink":"http://example.com/tags/java%E5%92%8Cvue%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E6%94%B9%E6%AD%A3%E5%92%8C%E5%AF%B9%E4%BB%96%E4%BB%AC%E7%9A%84%E7%90%86%E8%A7%A3%E6%95%B4%E7%90%86-%E5%8F%82%E5%8A%A0%E7%9A%84%E9%A1%B9%E7%9B%AE/"}]},{"title":"SpingCloud学习","date":"2023-12-10T02:04:18.000Z","path":"2023/12/10/SpingCloud学习/","content":"<h2 id=\"1-系统架构演变概述\"><a href=\"#1-系统架构演变概述\" class=\"headerlink\" title=\"1. 系统架构演变概述\"></a>1. 系统架构演变概述</h2><p><strong>目标</strong>：了解项目架构的演变历程</p>\n<p><strong>小结</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR;</span><br><span class=\"line\">1[集中式架构] --&gt; 2[垂直拆分]</span><br><span class=\"line\">2 --&gt; 3[分布式服务]</span><br><span class=\"line\">3 --&gt; 4[SOA面向服务架构]</span><br><span class=\"line\">4 --&gt; 5[微服务架构]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-微服务架构说明\"><a href=\"#2-微服务架构说明\" class=\"headerlink\" title=\"2. 微服务架构说明\"></a>2. 微服务架构说明</h2><p><strong>目标</strong>：了解SOA与微服务架构的区别以及说出微服务架构的特点</p>\n<p><strong>分析</strong>：</p>\n<p>SOA使用了ESB组件的面向服务架构：ESB自身实现复杂；应用服务粒度较大，所有服务之间的通信都经过ESB会降低通信速度；部署、测试ESB比较麻烦。</p>\n<p><strong>小结</strong>：</p>\n<p><strong>微服务架构</strong>：是一套使用小服务或者单一业务来开发单个应用的方式或途径。</p>\n<p>微服务架构特点：</p>\n<ul>\n<li>单一职责</li>\n<li>服务粒度小</li>\n<li>面向服务（对外暴露REST api）</li>\n<li>服务之间相互独立</li>\n</ul>\n<p>与使用ESB的SOA架构的区别：微服务架构没有使用ESB，有服务治理注册中心；业务粒度小。</p>\n<h2 id=\"3-服务调用方式说明\"><a href=\"#3-服务调用方式说明\" class=\"headerlink\" title=\"3. 服务调用方式说明\"></a>3. 服务调用方式说明</h2><p><strong>目标</strong>：能够说出服务调用方式种类</p>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>RPC：基于socket，速度快，效率高；webservice、dubbo</li>\n<li>HTTP：基于TCP，封装比较臃肿；对服务和调用方没有任何技术、语言的限定，自由灵活；RESTful，Spring Cloud</li>\n</ul>\n<h2 id=\"4-Spring-RestTemplate示例工程导入\"><a href=\"#4-Spring-RestTemplate示例工程导入\" class=\"headerlink\" title=\"4. Spring RestTemplate示例工程导入\"></a>4. Spring RestTemplate示例工程导入</h2><p><strong>目标</strong>：了解Spring RestTemplate的应用</p>\n<p><strong>分析</strong>：</p>\n<p>一般情况下有如下三种http客户端工具类包都可以方便的进行http服务调用：</p>\n<ul>\n<li>httpClient</li>\n<li>okHttp</li>\n<li>JDK原生URLConnection</li>\n</ul>\n<p>spring 提供了RestTemplate的工具类对上述的3种http客户端工具类进行了封装，可在spring项目中使用RestTemplate进行服务调用。</p>\n<p><strong>小结</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestTemplateTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;http://localhost/user/8&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//restTemplate可以对json格式字符串进行反序列化</span></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> restTemplate.getForObject(url, User.class);</span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-Spring-Cloud概述\"><a href=\"#5-Spring-Cloud概述\" class=\"headerlink\" title=\"5. Spring Cloud概述\"></a>5. Spring Cloud概述</h2><p><strong>目标</strong>：Spring Cloud整合的组件和版本特征</p>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>整合的组件可以有很多组件；常见的组件有：eureka注册中心，Gateway网关，Ribbon负载均衡，Feign服务调用，Hystrix熔断器。在有需要的时候项目添加对于的启动器依赖即可。</li>\n<li>版本特征：以英文单词命名（伦敦地铁站名）</li>\n</ul>\n<h2 id=\"6-创建微服务工程\"><a href=\"#6-创建微服务工程\" class=\"headerlink\" title=\"6. 创建微服务工程\"></a>6. 创建微服务工程</h2><p><strong>目标</strong>：创建微服务父工程heima-springcloud、用户服务工程user-service、服务消费工程consumer-demo</p>\n<p><strong>分析</strong>：</p>\n<p>需求：查询数据库中的用户数据并输出到浏览器</p>\n<ul>\n<li>父工程heima-springcloud：添加spring boot父坐标和管理其它组件的依赖</li>\n<li>用户服务工程user-service：整合mybatis查询数据库中用户数据；提供查询用户服务</li>\n<li>服务消费工程consumer-demo：利用查询用户服务获取用户数据并输出到浏览器</li>\n</ul>\n<p><strong>小结</strong>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- springCloud --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过 <code>scope</code> 的import可以继承 <code>spring-cloud-dependencies</code> 工程中的依赖</p>\n<h2 id=\"7-搭建配置user-service工程\"><a href=\"#7-搭建配置user-service工程\" class=\"headerlink\" title=\"7. 搭建配置user-service工程\"></a>7. 搭建配置user-service工程</h2><p><strong>目标</strong>：配置user-service工程并能够根据用户id查询数据库中用户</p>\n<p><strong>分析</strong>：</p>\n<p>需求：可以访问<a href=\"http://localhost:9091/user/8%E8%BE%93%E5%87%BA%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE\">http://localhost:9091/user/8输出用户数据</a></p>\n<p>实现步骤：</p>\n<ol>\n<li>添加启动器依赖（web、通用Mapper）；</li>\n<li>创建启动引导类和配置文件；</li>\n<li>修改配置文件中的参数；</li>\n<li>编写测试代码（UserMapper，UserService，UserController）；</li>\n<li>测试</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>添加启动器依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 通用Mapper启动器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>tk.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- mysql驱动 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>编写配置文件</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9091</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/springcloud</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">type-aliases-package:</span> <span class=\"string\">com.itheima.user.pojo</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"8-搭建配置consumer-demo工程\"><a href=\"#8-搭建配置consumer-demo工程\" class=\"headerlink\" title=\"8. 搭建配置consumer-demo工程\"></a>8. 搭建配置consumer-demo工程</h2><p><strong>目标</strong>：编写测试类使用restTemplate访问user-service的路径根据id查询用户</p>\n<p><strong>分析</strong>：</p>\n<p>需求：访问<a href=\"http://localhost:8080/consumer/8\">http://localhost:8080/consumer/8</a> 使用RestTemplate获取<a href=\"http://localhost:9091/user/8%E7%9A%84%E6%95%B0%E6%8D%AE\">http://localhost:9091/user/8的数据</a></p>\n<p>实现步骤：</p>\n<ol>\n<li>添加启动器依赖；</li>\n<li>创建启动引导类（注册RestTemplate）和配置文件；</li>\n<li>编写测试代码（ConsumerController中使用restTemplate访问服务获取数据）</li>\n<li>测试</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>服务管理<br>如何自动注册和发现<br>如何实现状态监管<br>如何实现动态路由</li>\n<li>服务如何实现负载均衡</li>\n<li>服务如何解决容灾问题</li>\n<li>服务如何实现统一配置</li>\n</ul>\n<p>上述的问题都可以通过Spring Cloud的各种组件解决。</p>\n<h2 id=\"9-Eureka注册中心说明\"><a href=\"#9-Eureka注册中心说明\" class=\"headerlink\" title=\"9. Eureka注册中心说明\"></a>9. Eureka注册中心说明</h2><p><strong>目标</strong>：说出Eureka的主要功能</p>\n<p><strong>小结</strong>：</p>\n<p>Eureka的主要功能是进行服务管理，定期检查服务状态，返回服务地址列表。</p>\n<p><img src=\"/2023/12/10/SpingCloud%E5%AD%A6%E4%B9%A0/Users/48531\\OneDrive\\桌面\\hexo-blog\\source_posts\\SpingCloud学习\\1560439174201-1709728468837-5.png\" alt=\"1560439174201\"></p>\n<h2 id=\"10-搭建eureka-server工程\"><a href=\"#10-搭建eureka-server工程\" class=\"headerlink\" title=\"10. 搭建eureka-server工程\"></a>10. 搭建eureka-server工程</h2><p><strong>目标</strong>：添加eureka对应依赖和编写引导类搭建eureka服务并可访问eureka服务界面</p>\n<p><strong>分析</strong>：</p>\n<p>Eureka是服务注册中心，只做服务注册；自身并不提供服务也不消费服务。可以搭建web工程使用Eureka，可以使用Spring Boot方式搭建。</p>\n<p>搭建步骤：</p>\n<ol>\n<li>创建工程；</li>\n<li>添加启动器依赖；</li>\n<li>编写启动引导类（添加Eureka的服务注解）和配置文件；</li>\n<li>修改配置文件（端口，应用名称…）；</li>\n<li>启动测试</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>启动器依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>配置文件</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">10086</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">eureka-server</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"comment\"># eureka 服务地址，如果是集群的话；需要指定其它集群eureka地址</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://127.0.0.1:10086/eureka</span></span><br><span class=\"line\">    <span class=\"comment\"># 不注册自己</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\"># 不拉取服务</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"11-服务注册与发现\"><a href=\"#11-服务注册与发现\" class=\"headerlink\" title=\"11. 服务注册与发现\"></a>11. 服务注册与发现</h2><p><strong>目标</strong>：将user-service的服务注册到eureka并在consumer-demo中可以根据服务名称调用</p>\n<p><strong>分析</strong>：</p>\n<ul>\n<li>服务注册：在服务提供工程user-service上添加Eureka客户端依赖；自动将服务注册到EurekaServer服务地址列表。<ul>\n<li>添加依赖；</li>\n<li>改造启动引导类；添加开启Eureka客户端发现的注解；</li>\n<li>修改配置文件；设置Eureka 服务地址</li>\n</ul>\n</li>\n<li>服务发现：在服务消费工程consumer-demo上添加Eureka客户端依赖；可以使用工具类根据服务名称获取对应的服务地址列表。<ul>\n<li>添加依赖；</li>\n<li>改造启动引导类；添加开启Eureka客户端发现的注解；</li>\n<li>修改配置文件；设置Eureka 服务地址；</li>\n<li>改造处理器类ConsumerController，可以使用工具类DiscoveryClient根据服务名称获取对应服务地址列表。</li>\n</ul>\n</li>\n</ul>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>添加Eureka客户端依赖；</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>添加启动引导类注解；</p>\n<p><img src=\"/2023/12/10/SpingCloud%E5%AD%A6%E4%B9%A0/Users/48531\\OneDrive\\桌面\\hexo-blog\\source_posts\\SpingCloud学习\\1560519608668-1709728458655-3.png\" alt=\"1560519608668\"></p>\n</li>\n<li><p>修改配置</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">consumer-demo</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"12-Eureka-Server高可用配置\"><a href=\"#12-Eureka-Server高可用配置\" class=\"headerlink\" title=\"12. Eureka Server高可用配置\"></a>12. Eureka Server高可用配置</h2><p><strong>目标</strong>：可以启动两台eureka-server实例；在eureka管理界面看到两个实例</p>\n<p><strong>分析</strong>：</p>\n<p>Eureka Server是一个web应用，可以启动多个实例（配置不同端口）保证Eureka Server的高可用。</p>\n<p><strong>小结</strong>：</p>\n<p><strong>高可用配置</strong>：将Eureka Server作为一个服务注册到其它Eureka Server，这样多个Eureka Server之间就能够互相发现对方，同步服务，实现Eureka Server集群。</p>\n<h2 id=\"13-Eureka客户端与服务端配置\"><a href=\"#13-Eureka客户端与服务端配置\" class=\"headerlink\" title=\"13. Eureka客户端与服务端配置\"></a>13. Eureka客户端与服务端配置</h2><p><strong>目标</strong>：配置eureka客户端user-service的注册、续约等配置项，配置eureka客户端consumer-demo的获取服务间隔时间；了解失效剔除和自我保护</p>\n<p><strong>分析</strong>：</p>\n<ul>\n<li>Eureka客户端工程<ul>\n<li>user-service 服务提供<ul>\n<li>服务地址使用ip方式</li>\n<li>续约</li>\n</ul>\n</li>\n<li>consumer-demo 服务消费<ul>\n<li>获取服务地址的频率</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Eureka服务端工程 eureka-server<ul>\n<li>失效剔除</li>\n<li>自我保护</li>\n</ul>\n</li>\n</ul>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>user-service</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://127.0.0.1:10086/eureka</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"comment\"># 更倾向使用ip地址，而不是host名</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># ip地址</span></span><br><span class=\"line\">    <span class=\"attr\">ip-address:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">    <span class=\"comment\"># 续约间隔，默认30秒</span></span><br><span class=\"line\">    <span class=\"attr\">lease-renewal-interval-in-seconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"comment\"># 服务失效时间，默认90秒</span></span><br><span class=\"line\">    <span class=\"attr\">lease-expiration-duration-in-seconds:</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>consumer-demo</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://127.0.0.1:10086/eureka</span></span><br><span class=\"line\">    <span class=\"comment\"># 获取服务地址列表间隔时间，默认30秒</span></span><br><span class=\"line\">    <span class=\"attr\">registry-fetch-interval-seconds:</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>eureka-server</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"comment\"># 服务失效剔除时间间隔，默认60秒</span></span><br><span class=\"line\">    <span class=\"attr\">eviction-interval-timer-in-ms:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">    <span class=\"comment\"># 关闭自我保护模式（默认是打开的）</span></span><br><span class=\"line\">    <span class=\"attr\">enable-self-preservation:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"14-负载均衡Ribbon简介\"><a href=\"#14-负载均衡Ribbon简介\" class=\"headerlink\" title=\"14. 负载均衡Ribbon简介\"></a>14. 负载均衡Ribbon简介</h2><p><strong>目标</strong>：描述负载均衡和ribbon的作用</p>\n<p><strong>分析</strong>：</p>\n<p>负载均衡是一个算法，可以通过该算法实现从地址列表中获取一个地址进行服务调用。</p>\n<p>在Spring Cloud中提供了负载均衡器：Ribbon</p>\n<p><strong>小结</strong>：</p>\n<p>Ribbon提供了轮询、随机两种负载均衡算法（默认是轮询）可以实现从地址列表中使用负载均衡算法获取地址进行服务调用。</p>\n<h2 id=\"15-Ribbon负载均衡应用\"><a href=\"#15-Ribbon负载均衡应用\" class=\"headerlink\" title=\"15. Ribbon负载均衡应用\"></a>15. Ribbon负载均衡应用</h2><p><strong>目标</strong>：配置启动两个用户服务，在consumer-demo中使用服务名实现根据用户id获取用户</p>\n<p><strong>分析</strong>：</p>\n<p>需求：可以使用RestTemplate访问<a href=\"http://user-service/user/8%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E6%95%B0%E6%8D%AE%E3%80%82\">http://user-service/user/8获取服务数据。</a></p>\n<p>可以使用Ribbon负载均衡：在执行RestTemplate发送服务地址请求的时候，使用负载均衡拦截器拦截，根据服务名获取服务地址列表，使用Ribbon负载均衡算法从服务地址列表中选择一个服务地址，访问该地址获取服务数据。</p>\n<p>实现步骤：</p>\n<ol>\n<li>启动多个user-service实例（9091,9092）；</li>\n<li>修改RestTemplate实例化方法，添加负载均衡注解；</li>\n<li>修改ConsumerController；</li>\n<li>测试</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<p>在实例化RestTemplate的时候使用@LoadBalanced，服务地址直接可以使用服务名。</p>\n<h2 id=\"16-熔断器Hystrix简介\"><a href=\"#16-熔断器Hystrix简介\" class=\"headerlink\" title=\"16. 熔断器Hystrix简介\"></a>16. 熔断器Hystrix简介</h2><p><strong>目标</strong>：了解熔断器Hystrix的作用</p>\n<p><strong>小结</strong>：</p>\n<p>Hystrix是一个延迟和容错库，用于隔离访问远程服务，防止出现级联失败。</p>\n<h2 id=\"17-线程隔离-服务降级\"><a href=\"#17-线程隔离-服务降级\" class=\"headerlink\" title=\"17. 线程隔离&amp;服务降级\"></a>17. 线程隔离&amp;服务降级</h2><p><strong>目标</strong>：了解什么是线程隔离和服务降级</p>\n<p><strong>分析</strong>：</p>\n<p>Hystrix解决雪崩效应：</p>\n<ul>\n<li>线程隔离：用户请求不直接访问服务，而是使用线程池中空闲的线程访问服务，加速失败判断时间。</li>\n<li>服务降级：及时返回服务调用失败的结果，让线程不因为等待服务而阻塞。</li>\n</ul>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>添加依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>开启熔断</p>\n<p><img src=\"/2023/12/10/SpingCloud%E5%AD%A6%E4%B9%A0/Users/48531\\OneDrive\\桌面\\hexo-blog\\source_posts\\SpingCloud学习\\1560662674993.png\" alt=\"1560662674993\"> </p>\n</li>\n<li><p>降级逻辑</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/consumer&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@DefaultProperties(defaultFallback = &quot;defaultFallback&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsumerController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DiscoveryClient discoveryClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\">//@HystrixCommand(fallbackMethod = &quot;queryByIdFallback&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">queryById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/*String url = &quot;http://localhost:9091/user/&quot;+id;</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">        //获取eureka中注册的user-service的实例</span></span><br><span class=\"line\"><span class=\"comment\">        List&lt;ServiceInstance&gt; serviceInstances = discoveryClient.getInstances(&quot;user-service&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        ServiceInstance serviceInstance = serviceInstances.get(0);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        url = &quot;http://&quot; + serviceInstance.getHost() + &quot;:&quot; + serviceInstance.getPort() + &quot;/user/&quot; + id;*/</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;http://user-service/user/&quot;</span> + id;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate.getForObject(url, String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">queryByIdFallback</span><span class=\"params\">(Long id)</span>&#123;</span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;查询用户信息失败。id：&#123;&#125;&quot;</span>, id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;对不起，网络太拥挤了！&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">defaultFallback</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;默认提示：对不起，网络太拥挤了！&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>修改超时配置</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">hystrix:</span></span><br><span class=\"line\">  <span class=\"attr\">command:</span></span><br><span class=\"line\">    <span class=\"attr\">default:</span></span><br><span class=\"line\">      <span class=\"attr\">execution:</span></span><br><span class=\"line\">        <span class=\"attr\">isolation:</span></span><br><span class=\"line\">          <span class=\"attr\">thread:</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutInMilliseconds:</span> <span class=\"number\">2000</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"18-服务熔断演示\"><a href=\"#18-服务熔断演示\" class=\"headerlink\" title=\"18. 服务熔断演示\"></a>18. 服务熔断演示</h2><p><strong>目标</strong>：了解熔断器工作原理</p>\n<p><strong>小结</strong>：</p>\n<p><img src=\"/2023/12/10/SpingCloud%E5%AD%A6%E4%B9%A0/Users/48531\\OneDrive\\桌面\\hexo-blog\\source_posts\\SpingCloud学习\\1560682028169-1709728438301-1.png\" alt=\"1560682028169\"></p>\n<p>可以通过配置服务熔断参数修改默认：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">hystrix:</span></span><br><span class=\"line\">  <span class=\"attr\">command:</span></span><br><span class=\"line\">    <span class=\"attr\">default:</span></span><br><span class=\"line\">      <span class=\"attr\">execution:</span></span><br><span class=\"line\">        <span class=\"attr\">isolation:</span></span><br><span class=\"line\">          <span class=\"attr\">thread:</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutInMilliseconds:</span> <span class=\"number\">2000</span></span><br><span class=\"line\">      <span class=\"attr\">circuitBreaker:</span></span><br><span class=\"line\">        <span class=\"attr\">errorThresholdPercentage:</span> <span class=\"number\">50</span> <span class=\"comment\"># 触发熔断错误比例阈值，默认值50%</span></span><br><span class=\"line\">        <span class=\"attr\">sleepWindowInMilliseconds:</span> <span class=\"number\">10000</span> <span class=\"comment\"># 熔断后休眠时长，默认值5秒</span></span><br><span class=\"line\">        <span class=\"attr\">requestVolumeThreshold:</span> <span class=\"number\">10</span> <span class=\"comment\"># 熔断触发最小请求次数，默认值是20</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SpringCloud第二天\"><a href=\"#SpringCloud第二天\" class=\"headerlink\" title=\"SpringCloud第二天\"></a>SpringCloud第二天</h1><h2 id=\"1-Feign应用\"><a href=\"#1-Feign应用\" class=\"headerlink\" title=\"1. Feign应用\"></a>1. Feign应用</h2><p><strong>目标</strong>：Feign的作用；使用Feign实现consumer-demo代码中调用服务</p>\n<p><strong>分析</strong>：</p>\n<ol>\n<li>导入启动器依赖；</li>\n<li>开启Feign功能；</li>\n<li>编写Feign客户端；</li>\n<li>编写一个处理器ConsumerFeignController，注入Feign客户端并使用；</li>\n<li>测试</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<p>Feign主要作用：自动根据参数拼接http请求地址。</p>\n<ul>\n<li>启动器依赖；</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>Feign客户端：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明当前类是一个Feign客户端，指定服务名为user-service</span></span><br><span class=\"line\"><span class=\"meta\">@FeignClient(&quot;user-service&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserClient</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//http://user-service/user/123</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    User <span class=\"title function_\">queryById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Long id)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-Feign负载均衡及熔断\"><a href=\"#2-Feign负载均衡及熔断\" class=\"headerlink\" title=\"2. Feign负载均衡及熔断\"></a>2. Feign负载均衡及熔断</h2><p><strong>目标</strong>：可以配置Feign内置ribbon配置项和Hystrix熔断的Fallback配置</p>\n<p><strong>分析</strong>：</p>\n<ul>\n<li>负载均衡</li>\n<li>服务熔断</li>\n<li>请求压缩</li>\n<li>日志级别</li>\n</ul>\n<p>都可以通过配置项在Feign中开启使用。</p>\n<p><strong>小结</strong>：</p>\n<p>在服务消费工程consumer-demo中的配置文件：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ribbon:</span></span><br><span class=\"line\">  <span class=\"attr\">ConnectTimeout:</span> <span class=\"number\">1000</span> <span class=\"comment\"># 连接超时时长</span></span><br><span class=\"line\">  <span class=\"attr\">ReadTimeout:</span> <span class=\"number\">2000</span> <span class=\"comment\"># 数据通信超时时长</span></span><br><span class=\"line\">  <span class=\"attr\">MaxAutoRetries:</span> <span class=\"number\">0</span> <span class=\"comment\"># 当前服务器的重试次数</span></span><br><span class=\"line\">  <span class=\"attr\">MaxAutoRetriesNextServer:</span> <span class=\"number\">0</span> <span class=\"comment\"># 重试多少次服务</span></span><br><span class=\"line\">  <span class=\"attr\">OkToRetryOnAllOperations:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 是否对所有的请求方式都重试</span></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">hystrix:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 开启Feign的熔断功能</span></span><br><span class=\"line\">  <span class=\"attr\">compression:</span></span><br><span class=\"line\">    <span class=\"attr\">request:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 开启请求压缩</span></span><br><span class=\"line\">      <span class=\"attr\">mime-types:</span> <span class=\"string\">text/html,application/xml,application/json</span> <span class=\"comment\"># 设置压缩的数据类型</span></span><br><span class=\"line\">      <span class=\"attr\">min-request-size:</span> <span class=\"number\">2048</span> <span class=\"comment\"># 设置触发压缩的大小下限</span></span><br><span class=\"line\">    <span class=\"attr\">response:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"attr\">com.itheima:</span> <span class=\"string\">debug</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-Spring-Cloud-Gateway网关简介\"><a href=\"#3-Spring-Cloud-Gateway网关简介\" class=\"headerlink\" title=\"3. Spring Cloud Gateway网关简介\"></a>3. Spring Cloud Gateway网关简介</h2><p><strong>目标</strong>：Spring Cloud Gateway网关的作用</p>\n<p><strong>小结</strong>：</p>\n<p>Spring Cloud Gateway的核心就是一系列的过滤器，可以将客户端的请求转发到不同的微服务。主要作用：<strong>过滤和路由</strong>。</p>\n<h2 id=\"4-Spring-Cloud-Gateway入门\"><a href=\"#4-Spring-Cloud-Gateway入门\" class=\"headerlink\" title=\"4. Spring Cloud Gateway入门\"></a>4. Spring Cloud Gateway入门</h2><p><strong>目标</strong>：搭建网关服务工程测试网关服务作用</p>\n<p><strong>分析</strong>：</p>\n<p>需求：通过网关系统heima-gateway将包含有 &#x2F;user 的请求 路由到 <a href=\"http://127.0.0.1:9091/user/%E7%94%A8%E6%88%B7id\">http://127.0.0.1:9091/user/用户id</a> </p>\n<p>实现步骤：</p>\n<ol>\n<li>创建工程；</li>\n<li>添加启动器依赖；</li>\n<li>编写启动引导类和配置文件；</li>\n<li>修改配置文件，设置路由信息；</li>\n<li>启动测试</li>\n</ol>\n<p><a href=\"http://127.0.0.1:10010/user/8\">http://127.0.0.1:10010/user/8</a> –&gt; <a href=\"http://127.0.0.1:9091/user/8\">http://127.0.0.1:9091/user/8</a></p>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>启动器依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>配置文件</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">10010</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">api-gateway</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">        <span class=\"comment\"># 路由id，可以任意</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">user-service-route</span></span><br><span class=\"line\">          <span class=\"comment\"># 代理的服务地址</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">http://127.0.0.1:9091</span></span><br><span class=\"line\">          <span class=\"comment\"># 路由断言： 可以匹配映射路径</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/user/**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://127.0.0.1:10086/eureka</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-面向服务的路由\"><a href=\"#5-面向服务的路由\" class=\"headerlink\" title=\"5. 面向服务的路由\"></a>5. 面向服务的路由</h2><p><strong>目标</strong>：使用在eureka注册的服务作为路由地址</p>\n<p><strong>分析</strong>：</p>\n<p>如果将路由服务地址写死明显是不合理的；在Spring Cloud Gateway中可以通过配置动态路由解决。</p>\n<p><strong>小结</strong>：</p>\n<p>面向服务的路由；只需要在配置文件中指定路由路径类似： <code>lb://user-service</code></p>\n<blockquote>\n<p>lb 之后编写的服务名必须要在eureka中注册才能使用</p>\n</blockquote>\n<h2 id=\"6-路由前缀处理\"><a href=\"#6-路由前缀处理\" class=\"headerlink\" title=\"6. 路由前缀处理\"></a>6. 路由前缀处理</h2><p><strong>目标</strong>：可以对请求到网关服务的地址添加或去除前缀</p>\n<p><strong>分析</strong>：</p>\n<p>提供服务的地址：<a href=\"http://127.0.0.1:9091/user/8\">http://127.0.0.1:9091/user/8</a></p>\n<ul>\n<li>添加前缀：对请求地址添加前缀路径之后再作为代理的服务地址；</li>\n</ul>\n<p><a href=\"http://127.0.0.1:10010/8\">http://127.0.0.1:10010/8</a> –&gt; <a href=\"http://127.0.0.1:9091/user/8\">http://127.0.0.1:9091/user/8</a> 添加前缀路径&#x2F;user</p>\n<ul>\n<li>去除前缀：将请求地址中路径去除一些前缀路径之后再作为代理的服务地址；</li>\n</ul>\n<p><a href=\"http://127.0.0.1:10010/api/user/8\">http://127.0.0.1:10010/api/user/8</a> –&gt; <a href=\"http://127.0.0.1:9091/user/8\">http://127.0.0.1:9091/user/8</a> 去除前缀路径&#x2F;api</p>\n<p><strong>小结</strong>：</p>\n<p>客户端的请求地址与微服务的服务地址如果不一致的时候，可以通过配置路径过滤器实现路径前缀的添加和去除。</p>\n<h2 id=\"7-过滤器简介\"><a href=\"#7-过滤器简介\" class=\"headerlink\" title=\"7. 过滤器简介\"></a>7. 过滤器简介</h2><p><strong>目标</strong>：Gateway默认过滤器的用法和过滤器类型</p>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>用法：在配置文件中指定要使用的过滤器名称；</li>\n<li>类型：局部、全局；</li>\n<li>使用场景：请求鉴权、异常处理、记录调用时长等。</li>\n</ul>\n<h2 id=\"8-自定义局部过滤器\"><a href=\"#8-自定义局部过滤器\" class=\"headerlink\" title=\"8. 自定义局部过滤器\"></a>8. 自定义局部过滤器</h2><p><strong>目标</strong>：按照默认过滤器编写并配置一个自定义局部过滤器，该过滤器可以通过配置文件中的参数名称获取请求的参数值</p>\n<p><strong>分析</strong>：</p>\n<p>需求：在过滤器（MyParamGatewayFilterFactory）中将<a href=\"http://localhost:10010/api/user/8?name=itcast%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0name%E7%9A%84%E5%80%BC%E8%8E%B7%E5%8F%96%E5%88%B0%E5%B9%B6%E8%BE%93%E5%87%BA%E5%88%B0%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%9B%E5%B9%B6%E4%B8%94%E5%8F%82%E6%95%B0%E5%90%8D%E6%98%AF%E5%8F%AF%E5%8F%98%E7%9A%84%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%AF%8F%E6%AC%A1%E9%83%BD%E6%98%AFname%EF%BC%9B%E9%9C%80%E8%A6%81%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E9%85%8D%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E6%97%B6%E5%80%99%E5%81%9A%E5%88%B0%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%90%8D%E3%80%82\">http://localhost:10010/api/user/8?name=itcast中的参数name的值获取到并输出到控制台；并且参数名是可变的，也就是不一定每次都是name；需要可以通过配置过滤器的时候做到配置参数名。</a></p>\n<p>实现步骤：</p>\n<ol>\n<li>配置过滤器；</li>\n<li>编写过滤器；</li>\n<li>测试</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<ul>\n<li><p>配置；与其他过滤器的配置一致。</p>\n</li>\n<li><p>实现过滤器</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.gateway.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyParamGatewayFilterFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractGatewayFilterFactory</span>&lt;MyParamGatewayFilterFactory.Config&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PARAM_NAME</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;param&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyParamGatewayFilterFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Config.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">shortcutFieldOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.asList(PARAM_NAME);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> GatewayFilter <span class=\"title function_\">apply</span><span class=\"params\">(Config config)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (exchange, chain) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// http://localhost:10010/api/user/8?name=itcast   config.param ==&gt; name</span></span><br><span class=\"line\">            <span class=\"comment\">//获取请求参数中param对应的参数名 的参数值</span></span><br><span class=\"line\">            <span class=\"type\">ServerHttpRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> exchange.getRequest();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(request.getQueryParams().containsKey(config.param))&#123;</span><br><span class=\"line\">                request.getQueryParams().get(config.param).</span><br><span class=\"line\">                        forEach(value -&gt; System.out.printf(<span class=\"string\">&quot;------------局部过滤器--------%s = %s------&quot;</span>, config.param, value));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> chain.filter(exchange);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Config</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//对应在配置过滤器的时候指定的参数名</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String param;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getParam</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> param;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setParam</span><span class=\"params\">(String param)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.param = param;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"9-自定义全局过滤器\"><a href=\"#9-自定义全局过滤器\" class=\"headerlink\" title=\"9. 自定义全局过滤器\"></a>9. 自定义全局过滤器</h2><p><strong>目标</strong>：定义一个全局过滤器检查请求中是否携带有token参数</p>\n<p><strong>分析</strong>：</p>\n<p>需求：编写全局过滤器，在过滤器中检查请求地址是否携带token参数。如果token参数的值存在则放行；如果token的参数值为空或者不存在则设置返回的状态码为：未授权也不再执行下去。</p>\n<p>实现步骤：</p>\n<ol>\n<li>编写全局过滤器；</li>\n<li>测试</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyGlobalFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">GlobalFilter</span>, Ordered &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Mono&lt;Void&gt; <span class=\"title function_\">filter</span><span class=\"params\">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;--------------全局过滤器MyGlobalFilter------------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> exchange.getRequest().getQueryParams().getFirst(<span class=\"string\">&quot;token&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isBlank(token))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置响应状态码为未授权</span></span><br><span class=\"line\">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> exchange.getResponse().setComplete();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chain.filter(exchange);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//值越小越先执行</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"10-Gateway其它配置说明\"><a href=\"#10-Gateway其它配置说明\" class=\"headerlink\" title=\"10. Gateway其它配置说明\"></a>10. Gateway其它配置说明</h2><p><strong>目标</strong>：Gateway网关的负载均衡和熔断参数配置</p>\n<p><strong>小结</strong>：</p>\n<p>网关服务配置文件：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">10010</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">api-gateway</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">        <span class=\"comment\"># 路由id，可以任意</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">user-service-route</span></span><br><span class=\"line\">          <span class=\"comment\"># 代理的服务地址</span></span><br><span class=\"line\">          <span class=\"comment\">#uri: http://127.0.0.1:9091</span></span><br><span class=\"line\">          <span class=\"comment\"># lb表示从eureka中获取具体服务</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">lb://user-service</span></span><br><span class=\"line\">          <span class=\"comment\"># 路由断言： 可以匹配映射路径</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"comment\">#- Path=/user/**</span></span><br><span class=\"line\">            <span class=\"comment\">#- Path=/**</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/api/user/**</span></span><br><span class=\"line\">          <span class=\"attr\">filters:</span></span><br><span class=\"line\">            <span class=\"comment\"># 添加请求路径的前缀</span></span><br><span class=\"line\">            <span class=\"comment\">#- PrefixPath=/user</span></span><br><span class=\"line\">            <span class=\"comment\">#1表示过滤1个路径，2表示两个路径，以此类推</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">StripPrefix=1</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">MyParam=name</span></span><br><span class=\"line\">      <span class=\"comment\"># 默认过滤器，对所有路由都生效</span></span><br><span class=\"line\">      <span class=\"attr\">default-filters:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">AddResponseHeader=X-Response-Foo,</span> <span class=\"string\">Bar</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">AddResponseHeader=abc-myname,heima</span></span><br><span class=\"line\">      <span class=\"attr\">globalcors:</span></span><br><span class=\"line\">        <span class=\"attr\">corsConfigurations:</span></span><br><span class=\"line\">          <span class=\"string\">&#x27;[/**]&#x27;</span><span class=\"string\">:</span></span><br><span class=\"line\">            <span class=\"comment\">#allowedOrigins: * # 这种写法或者下面的都可以，*表示全部</span></span><br><span class=\"line\">            <span class=\"attr\">allowedOrigins:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">&quot;http://docs.spring.io&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">allowedMethods:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">GET</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://127.0.0.1:10086/eureka</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">hystrix:</span></span><br><span class=\"line\">  <span class=\"attr\">command:</span></span><br><span class=\"line\">    <span class=\"attr\">default:</span></span><br><span class=\"line\">      <span class=\"attr\">execution:</span></span><br><span class=\"line\">        <span class=\"attr\">isolation:</span></span><br><span class=\"line\">          <span class=\"attr\">thread:</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutInMilliseconds:</span> <span class=\"number\">6000</span></span><br><span class=\"line\"><span class=\"attr\">ribbon:</span></span><br><span class=\"line\">  <span class=\"attr\">ConnectTimeout:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">  <span class=\"attr\">ReadTimeout:</span> <span class=\"number\">2000</span></span><br><span class=\"line\">  <span class=\"attr\">MaxAutoRetries:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">MaxAutoRetriesNextServer:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Gateway网关一般直接给终端请求使用；Feign一般用在微服务之间调用。</p>\n</blockquote>\n<h2 id=\"11-Spring-Cloud-Config分布式配置中心简介\"><a href=\"#11-Spring-Cloud-Config分布式配置中心简介\" class=\"headerlink\" title=\"11. Spring Cloud Config分布式配置中心简介\"></a>11. Spring Cloud Config分布式配置中心简介</h2><p><strong>目标</strong>：分布式配置中心的作用</p>\n<p><strong>小结</strong>：</p>\n<p><img src=\"/2023/12/10/SpingCloud%E5%AD%A6%E4%B9%A0/Users/48531\\OneDrive\\桌面\\hexo-blog\\source_posts\\SpingCloud学习\\1560919656472.png\" alt=\"1560919656472\"></p>\n<p>spring cloud config作用：可以通过修改在git仓库中的配置文件实现其它所有微服务的配置文件的修改。</p>\n<h2 id=\"12-搭建配置中心微服务\"><a href=\"#12-搭建配置中心微服务\" class=\"headerlink\" title=\"12. 搭建配置中心微服务\"></a>12. 搭建配置中心微服务</h2><p><strong>目标</strong>：创建码云的远程公开git仓库，搭建配置中心微服务config-server</p>\n<p><strong>分析</strong>：</p>\n<ul>\n<li>创建git仓库：在码云上创建仓库</li>\n<li>搭建配置中心config-server：使用spring boot方式搭建和配置</li>\n</ul>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>配置中心依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-config-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>配置中心的配置文件</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">12000</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">config-server</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">git:</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">https://gitee.com/goheima/heima-config.git</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在gitee中修改了配置文件会在配置中心服务及时更新。</p>\n</blockquote>\n<h2 id=\"13-获取配置中心配置\"><a href=\"#13-获取配置中心配置\" class=\"headerlink\" title=\"13. 获取配置中心配置\"></a>13. 获取配置中心配置</h2><p><strong>目标</strong>：改造用户微服务user-service，配置文件信息不再由微服务项目提供，而是从配置中心获取</p>\n<p><strong>分析</strong>：</p>\n<p>需求：将服务提供工程user-service的application.yml配置文件删除，修改为从配置中心config-server中获取。</p>\n<p>实现步骤：</p>\n<ol>\n<li>添加启动器依赖；</li>\n<li>修改配置文件；</li>\n<li>启动测试</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<p>将原来的application.yml删除；然后添加bootstrap.yml配置文件，该文件也是spring boot的默认配置文件，其内容经常配置一些项目中固定的配置项。如果是项目经常变动的应该配置到application.yml中，现在使用了配置中心则应该配置到git仓库中对于的配置文件。</p>\n<ul>\n<li>依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>配置文件bootstrap.yml</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"comment\"># 要与仓库中的配置文件的application保持一致</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">user</span></span><br><span class=\"line\">      <span class=\"comment\"># 要与仓库中的配置文件的profile保持一致</span></span><br><span class=\"line\">      <span class=\"attr\">profile:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">      <span class=\"comment\"># 要与仓库中的配置文件所属的版本（分支）一样</span></span><br><span class=\"line\">      <span class=\"attr\">label:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用配置中心</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"comment\"># 配置中心服务名</span></span><br><span class=\"line\">        <span class=\"attr\">service-id:</span> <span class=\"string\">config-server</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"14-Spring-Cloud-Bus简介\"><a href=\"#14-Spring-Cloud-Bus简介\" class=\"headerlink\" title=\"14. Spring Cloud Bus简介\"></a>14. Spring Cloud Bus简介</h2><p><strong>目标</strong>：了解Spring Cloud Bus作用</p>\n<p><strong>小结</strong>：</p>\n<p>Spring Cloud Bus作用：将git仓库的配置文件更新，在不重启系统的情况下实现及时同步到各个微服务。</p>\n<h2 id=\"15-Spring-Cloud-Bus应用\"><a href=\"#15-Spring-Cloud-Bus应用\" class=\"headerlink\" title=\"15. Spring Cloud Bus应用\"></a>15. Spring Cloud Bus应用</h2><p><strong>目标</strong>：启动RabbitMQ通过修改码云中的配置文件后发送Post请求实现及时更新用户微服务中的配置项</p>\n<p><strong>分析</strong>：</p>\n<p>需求：在码云的git仓库中修改user-dev.yml配置文件，实现不重启user-service的情况下可以及时更新配置文件。</p>\n<p>实现步骤：</p>\n<ol>\n<li>启动RabbitMQ；</li>\n<li>修改配置中心config-server；</li>\n<li>修改服务提供工程user-service；</li>\n<li>测试</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>config-server的依赖添加内容</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-bus<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>config-server的配置文件添加内容</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">12000</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">config-server</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">git:</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">https://gitee.com/goheima/heima-config.git</span></span><br><span class=\"line\">  <span class=\"comment\"># 配置rabbitmq信息；如果是都与默认值一致则不需要配置</span></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://127.0.0.1:10086/eureka</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"comment\"># 暴露触发消息总线的地址</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">bus-refresh</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>user-service的依赖添加内容</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-bus<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>user-service的配置文件添加内容</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置rabbitmq信息；如果是都与默认值一致则不需要配置</span></span><br><span class=\"line\"><span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">  <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">  <span class=\"attr\">username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>UserController的修改</li>\n</ul>\n<p><img src=\"/2023/12/10/SpingCloud%E5%AD%A6%E4%B9%A0/Users/48531\\OneDrive\\桌面\\hexo-blog\\source_posts\\SpingCloud学习\\1561003475491-1709728505732-7.png\" alt=\"1561003475491\"> </p>\n<h2 id=\"16-Spring-Cloud-体系技术综合应用说明\"><a href=\"#16-Spring-Cloud-体系技术综合应用说明\" class=\"headerlink\" title=\"16. Spring Cloud 体系技术综合应用说明\"></a>16. Spring Cloud 体系技术综合应用说明</h2><p><strong>目标</strong>：了解Spring Cloud中的Eureka、GateWay、Config、Bus、Feign等技术的综合应用</p>\n<p><strong>小结</strong>：</p>\n<p><img src=\"/2023/12/10/SpingCloud%E5%AD%A6%E4%B9%A0/Users/48531\\OneDrive\\桌面\\hexo-blog\\source_posts\\SpingCloud学习\\1561004983897.png\" alt=\"1561004983897(1)\"></p>\n","categories":[],"tags":[]},{"title":"后端获取图片数据的开发文档","date":"2023-12-06T13:42:11.048Z","path":"2023/12/06/基于ruoyi框架的开发笔记/","content":"<h1 id=\"后端获取图片数据的开发文档\"><a href=\"#后端获取图片数据的开发文档\" class=\"headerlink\" title=\"后端获取图片数据的开发文档\"></a>后端获取图片数据的开发文档</h1><h2 id=\"1-后端获取图片数据的基本需求（文件）\"><a href=\"#1-后端获取图片数据的基本需求（文件）\" class=\"headerlink\" title=\"1.后端获取图片数据的基本需求（文件）\"></a>1.后端获取图片数据的基本需求（文件）</h2><p>在com&#x2F;ruoyi&#x2F;system&#x2F;domain&#x2F;目录下创建SysPicture.java</p>\n<p><strong>在该类中编写你在图片数据库中定义的属性:以下拿我的举例子</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 图片表 data_entires</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">public class SysPicture extends BaseEntity&#123;</span><br><span class=\"line\">    private static final long serialVersionUID = 1L;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /** 图片序号 */</span><br><span class=\"line\">    @Excel(name = &quot;图片序号&quot;, cellType = Excel.ColumnType.NUMERIC)</span><br><span class=\"line\">    private Long pictureId;</span><br><span class=\"line\"></span><br><span class=\"line\">    /** 图片编码 */</span><br><span class=\"line\">    @Excel(name = &quot;图片编码&quot;)</span><br><span class=\"line\">    private String pictureCode;</span><br><span class=\"line\"></span><br><span class=\"line\">    /** 图片名称 */</span><br><span class=\"line\">    @Excel(name = &quot;图片名称&quot;)</span><br><span class=\"line\">    private String pictureName;</span><br><span class=\"line\"></span><br><span class=\"line\">    /** 图片排序 */</span><br><span class=\"line\">    @Excel(name = &quot;图片排序&quot;)</span><br><span class=\"line\">    private Integer pictureSort;</span><br><span class=\"line\"></span><br><span class=\"line\">    /** 状态（0正常 1停用） */</span><br><span class=\"line\">    @Excel(name = &quot;状态&quot;, readConverterExp = &quot;0=正常,1=停用&quot;)</span><br><span class=\"line\">    private String status;</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加Set,Get方法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Long getPictureId() &#123;</span><br><span class=\"line\">    return pictureId;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void setPictureId(Long pictureId) &#123;</span><br><span class=\"line\">    this.pictureId = pictureId;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public String getPictureCode() &#123;</span><br><span class=\"line\">    return pictureCode;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void setPictureCode(String pictureCode) &#123;</span><br><span class=\"line\">    this.pictureCode = pictureCode;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public String getPictureName() &#123;</span><br><span class=\"line\">    return pictureName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void setPictureName(String pictureName) &#123;</span><br><span class=\"line\">    this.pictureName = pictureName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public Integer getPictureSort() &#123;</span><br><span class=\"line\">    return pictureSort;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void setPictureSort(Integer pictureSort) &#123;</span><br><span class=\"line\">    this.pictureSort = pictureSort;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public String getStatus() &#123;</span><br><span class=\"line\">    return status;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void setStatus(String status) &#123;</span><br><span class=\"line\">    this.status = status;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加toString()方法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public String toString() &#123;</span><br><span class=\"line\">    return new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)</span><br><span class=\"line\">            .append(&quot;pictureId&quot;, getPictureId())</span><br><span class=\"line\">            .append(&quot;postCode&quot;, getPictureCode())</span><br><span class=\"line\">            .append(&quot;postName&quot;, getPictureName())</span><br><span class=\"line\">            .append(&quot;postSort&quot;, getPictureSort())</span><br><span class=\"line\">            .append(&quot;status&quot;, getStatus())</span><br><span class=\"line\">            .append(&quot;createBy&quot;, getCreateBy())</span><br><span class=\"line\">            .append(&quot;createTime&quot;, getCreateTime())</span><br><span class=\"line\">            .append(&quot;updateBy&quot;, getUpdateBy())</span><br><span class=\"line\">            .append(&quot;updateTime&quot;, getUpdateTime())</span><br><span class=\"line\">            .append(&quot;remark&quot;, getRemark())</span><br><span class=\"line\">            .toString();</span><br></pre></td></tr></table></figure>\n\n<p>可以参考其他的domian类文件。</p>\n<p>在com&#x2F;ruoyi&#x2F;web&#x2F;controller&#x2F;system&#x2F;目录下创建SysPictureController.java</p>\n<p><strong>控制层中我们主要添加</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;/system/picture&quot;)</span><br><span class=\"line\">public class SysPictureController extends BaseController</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//创建并注入服务处的对象</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private ISysPictureService pictureService;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取图片</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @PreAuthorize(&quot;@ss.hasPermi(&#x27;system:picture:list&#x27;)&quot;)</span><br><span class=\"line\">    @GetMapping(&quot;/list&quot;)</span><br><span class=\"line\">    public TableDataInfo list(SysPicture picture)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        startPage();</span><br><span class=\"line\">        List&lt;SysPicture&gt; list = pictureService.selectPictureList(picture);</span><br><span class=\"line\">        return getDataTable(list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在com&#x2F;ruoyi&#x2F;system&#x2F;service&#x2F;目录下创建服务层的类ISysPictureService.java</p>\n<p>在该类中添加如下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ISysPictureService &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查询图片信息集合</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param picture 图片信息</span><br><span class=\"line\">     * @return 图片列表</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;SysPicture&gt; selectPictureList(SysPicture picture);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在com&#x2F;ruoyi&#x2F;system&#x2F;service&#x2F;impl&#x2F;目录下编写SysPictureServiceImpl.java类并添加如下代码:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class SysPictureServiceImpl implements ISysPictureService &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private SysPictureMapper pictureMapper;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;SysPicture&gt; selectPictureList(SysPicture picture)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return pictureMapper.selectPictureList(picture);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在com&#x2F;ruoyi&#x2F;system&#x2F;mapper&#x2F;目录下编写SysPictureMapper.java类</p>\n<p>在该类中添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *图片信息 数据层</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Repository</span><br><span class=\"line\">public interface SysPictureMapper &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查询图片数据集合</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param picture 图片信息</span><br><span class=\"line\">     * @return 图片数据集合</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;SysPicture&gt; selectPictureList(SysPicture picture);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在mapper&#x2F;system&#x2F;目录下添加SysPictureMapper.xml文件</p>\n<p>内容如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\">       以上部分为文件头，可复制直接使用</span><br><span class=\"line\">       </span><br><span class=\"line\">       </span><br><span class=\"line\">       </span><br><span class=\"line\">&lt;mapper namespace=&quot;com.ruoyi.system.mapper.SysPictureMapper&quot;&gt;//该位置必须要找到Mapper文件所在位置</span><br><span class=\"line\">    &lt;resultMap type=&quot;SysPicture&quot; id=&quot;SysPictureResult&quot;&gt;</span><br><span class=\"line\">        &lt;id     property=&quot;pictureId&quot;        column=&quot;picture_id&quot;       /&gt;</span><br><span class=\"line\">        &lt;result property=&quot;pictureCode&quot;      column=&quot;picture_code&quot;     /&gt;</span><br><span class=\"line\">        &lt;result property=&quot;pictureName&quot;      column=&quot;picture_name&quot;     /&gt;</span><br><span class=\"line\">        &lt;result property=&quot;pictureSort&quot;      column=&quot;picture_sort&quot;     /&gt;</span><br><span class=\"line\">        &lt;result property=&quot;status&quot;        column=&quot;status&quot;        /&gt;</span><br><span class=\"line\">        &lt;result property=&quot;createBy&quot;      column=&quot;create_By&quot;     /&gt;</span><br><span class=\"line\">        &lt;result property=&quot;createTime&quot;    column=&quot;create_time&quot;   /&gt;</span><br><span class=\"line\">        &lt;result property=&quot;updateBy&quot;      column=&quot;update_by&quot;     /&gt;</span><br><span class=\"line\">        &lt;result property=&quot;updateTime&quot;    column=&quot;update_time&quot;   /&gt;</span><br><span class=\"line\">        &lt;result property=&quot;remark&quot;        column=&quot;remark&quot;        /&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\">    &lt;sql id=&quot;selectPictureVo&quot;&gt;</span><br><span class=\"line\">        select picture_id, picture_code, picture_name, picture_sort, status, create_by, create_time, remark</span><br><span class=\"line\">        from data_entires</span><br><span class=\"line\">    &lt;/sql&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;select id=&quot;selectPictureList&quot; parameterType=&quot;SysPost&quot; resultMap=&quot;SysPictureResult&quot;&gt;</span><br><span class=\"line\">        &lt;include refid=&quot;selectPictureVo&quot;/&gt;</span><br><span class=\"line\">        &lt;where&gt;</span><br><span class=\"line\">            &lt;if test=&quot;pictureCode != null and pictureCode != &#x27;&#x27;&quot;&gt;</span><br><span class=\"line\">                AND picture_code like concat(&#x27;%&#x27;, #&#123;pictureCode&#125;, &#x27;%&#x27;)</span><br><span class=\"line\">            &lt;/if&gt;</span><br><span class=\"line\">            &lt;if test=&quot;status != null and status != &#x27;&#x27;&quot;&gt;</span><br><span class=\"line\">                AND status = #&#123;status&#125;</span><br><span class=\"line\">            &lt;/if&gt;</span><br><span class=\"line\">            &lt;if test=&quot;pictureName != null and pictureName != &#x27;&#x27;&quot;&gt;</span><br><span class=\"line\">                AND picture_name like concat(&#x27;%&#x27;, #&#123;pictureName&#125;, &#x27;%&#x27;)</span><br><span class=\"line\">            &lt;/if&gt;</span><br><span class=\"line\">        &lt;/where&gt;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>以上的大部分代码，均参考ruoyi官方编写的其他内容改编</strong></p>\n<p>由于ruoyi设置了查询权限，我们在运行项目进行数据查询时会提示权限不足,这时候我们需要带着两个请求头去查询</p>\n<p><strong>Cookie</strong> </p>\n<hr>\n<p><strong>Authorization</strong></p>\n<hr>\n","categories":[],"tags":[]},{"title":"SpringBoot学习","date":"2023-12-04T10:27:49.000Z","path":"2023/12/04/SpringBoot学习/","content":"<h1 id=\"1-SpringBoot基础\"><a href=\"#1-SpringBoot基础\" class=\"headerlink\" title=\"1.SpringBoot基础\"></a>1.SpringBoot基础</h1><h2 id=\"1-1-SpringBoot的目标既是提供了一种快速使用Spring的方式，提高开发效率。\"><a href=\"#1-1-SpringBoot的目标既是提供了一种快速使用Spring的方式，提高开发效率。\" class=\"headerlink\" title=\"1.1 SpringBoot的目标既是提供了一种快速使用Spring的方式，提高开发效率。\"></a>1.1 <em>SpringBoot的目标既是提供了一种快速使用Spring的方式，提高开发效率</em>。</h2><p>那么Spring有什么缺点呢？</p>\n<p>1.配置繁琐</p>\n<p>2.依赖繁琐</p>\n<p>这样就引出了SpringBoot技术，下面介绍一下SpringBoot功能</p>\n<p>（1）自动配置</p>\n<p><img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231127121051118.png\" alt=\"image-20231127121051118\"></p>\n<p>（2）起步依赖</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231127121111083.png\" class title=\"image-20231127121111083\">\n\n<p>（3）辅助功能</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231127121129264.png\" class title=\"image-20231127121129264\">\n\n<p> <strong>SpringBoot并不是对Spring功能上的增强，而是提供了一种快速使用Spring的方式</strong></p>\n<h2 id=\"1-2-SpringBoot快速入门\"><a href=\"#1-2-SpringBoot快速入门\" class=\"headerlink\" title=\"1.2 SpringBoot快速入门\"></a>1.2 SpringBoot快速入门</h2><p>利用一个简单的小项目来入门一下</p>\n<ul>\n<li>SpringBoot在创建项目时，使用jar的打包方式。</li>\n<li>SpringBoot的引导类，是项目入口，运行main方法就可以启动项目。</li>\n<li>使用SpringBoot和Spring构建的项目，业务代码编写方式完全一样。</li>\n</ul>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231127124611176.png\" class title=\"image-20231127124611176\">\n\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231127124630645.png\" class title=\"image-20231127124630645\">\n\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231127124650281.png\" class title=\"image-20231127124650281\">\n\n<p>同时利用idea工具可实现快速构建</p>\n<p>在new–&gt;Module下的Spring Initializr选项卡中实现快速构建项目</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231127165625244.png\" class title=\"image-20231127165625244\">\n\n<h2 id=\"1-3-Spring-Boot-起步依赖原理\"><a href=\"#1-3-Spring-Boot-起步依赖原理\" class=\"headerlink\" title=\"1.3 Spring Boot 起步依赖原理\"></a>1.3 Spring Boot 起步依赖原理</h2><p>（1）spring-boot-starter-parent</p>\n<p>（2）spring-boot-starter-web</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231127170537725.png\" class title=\"image-20231127170537725\">\n\n<h2 id=\"1-4-Spring-Boot配置原理\"><a href=\"#1-4-Spring-Boot配置原理\" class=\"headerlink\" title=\"1.4 Spring Boot配置原理\"></a>1.4 Spring Boot配置原理</h2><p><strong>配置文件分类:</strong></p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231127170743378.png\" class title=\"image-20231127170743378\">\n\n<p>在<strong>application.properties</strong>下编写如下代码:</p>\n<p><strong>server.port &#x3D;8080</strong></p>\n<p>或者yml方式(在idea中的<strong>resources</strong>下创建<strong>application.yml</strong>或<strong>application.yaml</strong>文件里面编写如下配置):</p>\n<p><strong>server:</strong></p>\n<p>​\t<strong>port: 8080</strong></p>\n<p>以上三个配置文件的优先级(按照后缀来排序):</p>\n<p><em><strong>.properties&gt;.yml&gt;.yaml</strong></em></p>\n<ul>\n<li><p>yaml</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231127171638640.png\" class title=\"image-20231127171638640\">\n\n<p><strong>yaml:基本语法</strong>:joy:</p>\n<p><strong><img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231127171856985.png\" class title=\"image-20231127171856985\"></strong></p>\n<p><strong>yaml:数据格式</strong>:</p>\n<ul>\n<li>对象(map):键值对的集合。</li>\n</ul>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231127172159576.png\" class title=\"image-20231127172159576\">\n\n<ul>\n<li>数组:一组按次序排列的值。</li>\n</ul>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231127172231099.png\" class title=\"image-20231127172231099\">\n\n<ul>\n<li><p>纯量:单个的、不可再分的值。</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231127172305038.png\" class title=\"image-20231127172305038\"></li>\n</ul>\n<p>以上注意 <strong>属性名称:(空格)+属性值</strong></p>\n<p><strong>yaml:参数引用</strong></p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231127172922753.png\" class title=\"image-20231127172922753\">\n\n<p><strong>YAML:小结</strong></p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231127173040450.png\" class title=\"image-20231127173040450\">\n</li>\n<li><p>读取配置文件内容</p>\n<p>(1)@Value</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231130144357066.png\" class title=\"image-20231130144357066\">\n\n<p><strong>@Value(“${name}”)</strong></p>\n<p>​\t<strong>private String name</strong></p>\n<p>​\t采用这样的方式来获取<strong>application.yaml</strong>里对应的<strong>name</strong>的值</p>\n<p>​\t如果获取数组的值我们在@Value中取得是数组的<strong>下标</strong></p>\n<p>(2)Environment</p>\n<p>使用Environment获取值时的步骤如下:</p>\n<p>1)使用**@Autowired<strong>注解让Springboot启动时注入一个对象</strong>env**</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231130150414772.png\" class title=\"image-20231130150414772\">\n\n<p>2)直接在输出这一行利用env.getProperty(“”)输入你要获取的值的属性名字即可</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231130150424354.png\" class title=\"image-20231130150424354\">\n\n<p>(3)@ConfigurationProperties</p>\n<p>创建一个你需要用到的对象类(如我图中的person类):</p>\n<p>两个注解:</p>\n<p>​\t@Component:让Spring识别</p>\n<p>​\t@ConfigurationProperties</p>\n<p>注意了!!!!</p>\n<p>如果此时你的@ConfigurationProperties并没有写前缀，那么它会读取配置文件中你所配置的属性名的属性值</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231130151741953.png\" class title=\"image-20231130151741953\">\n\n<p>如下<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231130151702681.png\" class title=\"image-20231130151702681\"><img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231130151723394.png\" class title=\"image-20231130151723394\"></p>\n<p>但是如果你加了前缀@ConfigurationProperties(<strong>prefix &#x3D; “person”</strong>)那么它读取的是你在.yaml文件里前缀为person：下的属性名的属性值</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231130151805714.png\" class title=\"image-20231130151805714\">\n\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231130151825782.png\" class title=\"image-20231130151825782\">\n\n\n</li>\n<li><p>profile</p>\n<p>1)profile配置方式</p>\n<ul>\n<li><p>多profile文件方式</p>\n<p>一般来讲结构是这样的</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231130154714615.png\" class title=\"image-20231130154714615\">\n\n<p>我们分别在dev、pro、test里面配置需要的属性</p>\n<p>然后再主要文件<strong>application.properties</strong>里面加上</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.profiles.active=dev/pro/test</span><br><span class=\"line\">这就是启动dev/pro/test配置文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>yml多文档方式</p>\n<p>在yml中用—分割即可</p>\n<p>2)profile激活方式</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231130155050196.png\" class title=\"image-20231130155050196\">\n\n<p>在运行位置编辑运行设置找到这两个;</p>\n<p>虚拟机参数:-Dspring.profiles.active&#x3D;pro</p>\n<p>命令行参数:–spring.profiles.active&#x3D;pro</p>\n<p><strong><img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231130155606679.png\" class title=\"image-20231130155606679\"></strong></p>\n</li>\n</ul>\n</li>\n<li><p>内部配置加载顺序</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202194402571.png\" class title=\"image-20231202194402571\">\n</li>\n<li><p>外部配置加载顺序</p>\n</li>\n</ul>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202195819000.png\" class title=\"image-20231202195819000\">\n\n<h1 id=\"2-SpringBoot整合其他框架\"><a href=\"#2-SpringBoot整合其他框架\" class=\"headerlink\" title=\"2.SpringBoot整合其他框架\"></a>2.SpringBoot整合其他框架</h1><h3 id=\"2-1-SpringBoot整合Junit。\"><a href=\"#2-1-SpringBoot整合Junit。\" class=\"headerlink\" title=\"2.1 SpringBoot整合Junit。\"></a>2.1 SpringBoot整合Junit。</h3><img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202200030447.png\" class title=\"image-20231202200030447\">\n\n<p>1.在搭建的com&#x2F;itheima&#x2F;Springboottest&#x2F;下创建类UserService</p>\n<p>并编写以下内容</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202201519254.png\" class title=\"image-20231202201519254\">\n\n<p>这里我们编写了一个名为add()的方法，作用是打印add……</p>\n<p>在test包下的com&#x2F;itheima&#x2F;目录下创建test目录，在test下创建UserServiceTest类作为测试类</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202201650084.png\" class title=\"image-20231202201650084\">\n\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202201659097.png\" class title=\"image-20231202201659097\">\n\n<p>利用@Autowired注入一个类的对象userService</p>\n<p>@Test下创建一个test()函数，通过对象去访问UserService下的add方法即</p>\n<p><strong>userService.add()</strong></p>\n<p>以上注意点有:</p>\n<p>当你的测试路径和的包名和上面主目录的包名一致时,@SpringBootTest(classes &#x3D; SpringbootTestApplication.class)中的classes &#x3D; SpringbootTestApplication.class可以省略不写</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/1.png\" class width=\"1\">\n\n<h3 id=\"2-2-SpringBoot整合Redis\"><a href=\"#2-2-SpringBoot整合Redis\" class=\"headerlink\" title=\"2.2 SpringBoot整合Redis\"></a>2.2 SpringBoot整合Redis</h3><img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202202259105.png\" class title=\"image-20231202202259105\">\n\n<p>在pom.xml文件中添加Redis依赖 </p>\n<p><img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20240609140122090.png\" alt=\"image-20240609140122090\"></p>\n<p>编写实体类，这里演示Spring Boot 与Redis数据库的整合使用，分别在domain包下编写实体类如下</p>\n<p><img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20240609141256791.png\" alt=\"image-20240609141256791\"></p>\n<p>persoon类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itcast.springbootandredis.domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.annotation.Id;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisHash;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.index.Indexed;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指定操作实体类对象在Redis数据库中的存储空间</span></span><br><span class=\"line\"><span class=\"meta\">@RedisHash(&quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span> <span class=\"comment\">//表示实体类主键</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> Id;</span><br><span class=\"line\">    <span class=\"meta\">@Indexed</span> <span class=\"comment\">//标识对应属性在Redis数据库中生成的二级索引</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String firstName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Indexed</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Family&gt; familyList;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//无参构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//有参构造器</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String firstName, String lastName)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.firstName = firstName;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.lastName = lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;</span><br><span class=\"line\">        Id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getFirstName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFirstName</span><span class=\"params\">(String firstName)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.firstName = firstName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getLastName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setLastName</span><span class=\"params\">(String lastName)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.lastName = lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Address <span class=\"title function_\">getAddress</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAddress</span><span class=\"params\">(Address address)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Family&gt; <span class=\"title function_\">getFamilyList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> familyList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFamilyList</span><span class=\"params\">(List&lt;Family&gt; familyList)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.familyList = familyList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;Id=&quot;</span> + Id +</span><br><span class=\"line\">                <span class=\"string\">&quot;, firstName=&#x27;&quot;</span> + firstName + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, lastName=&#x27;&quot;</span> + lastName + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, address=&quot;</span> + address +</span><br><span class=\"line\">                <span class=\"string\">&quot;, familyList=&quot;</span> + familyList +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Address类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itcast.springbootandredis.domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.index.Indexed;</span><br><span class=\"line\"><span class=\"meta\">@Data</span> <span class=\"comment\">//该注解会帮你自动生成get，set方法和tostring方法</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span> <span class=\"comment\">// 生成有参构造器</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span> <span class=\"comment\">//生产无参构造器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Address</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Indexed</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"meta\">@Indexed</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Family类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itcast.springbootandredis.domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.index.Indexed;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Family</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Indexed</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String type;</span><br><span class=\"line\">    <span class=\"meta\">@Indexed</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>针对springboot整合Redis数据库操作有以下几个注解需要解释一下：</p>\n<ul>\n<li>@RedisHash(“person”)：用于操作指定实体类对象在Redis数据库中存储空间，此处表示针对Person实体类的数据操作都存储在Redis数据库中名为person的存储空间下。</li>\n<li>@Id：用于标识实体类主键，在Redis数据库中会默认生成字符串形式的HashKey表示唯一实体类对象id，当然也可以在数据存储时手动指定id。</li>\n<li>@Indexed：用于标识对应属性在Redis数据库中生成二级索引。使用该注解后会在Redis数据库中生成属性对应的二级索引 ，索引名称就是属性名。</li>\n</ul>\n<p>（3）编写Repository接口SrpingBoot针对包括Redis在内的一些常用数据库提供了简化配置，可以通过实现Respository接口简化对数据库中的数据进行增删改查操作，这些操作同Spring DATA JPA 操作数据的使用方法基本相同，可以使用方法名的关键字进行对数据的操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itcast.springbootandredis.Repository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itcast.springbootandredis.domain.Family;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itcast.springbootandredis.domain.Person;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.repository.CrudRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.print.Pageable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PersonRepository</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">CrudRepository</span>&lt;Person,String&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Person&gt; <span class=\"title function_\">findByLastName</span><span class=\"params\">(String lastName)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Person&gt; <span class=\"title function_\">findPersonByLastName</span><span class=\"params\">(String lastName, Pageable pageable)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Person&gt; <span class=\"title function_\">findFirstByFirstNameAndLastName</span><span class=\"params\">(String firstName,String lastName)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Person&gt; <span class=\"title function_\">findByAddress_City</span><span class=\"params\">(String city)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Person&gt; <span class=\"title function_\">findByFamilyList_userName</span><span class=\"params\">(String userName)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Redis配置连接</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Redis服务器地址</span></span><br><span class=\"line\"><span class=\"attr\">spring.redis.host</span>=<span class=\"string\">127.0.0.1</span></span><br><span class=\"line\"><span class=\"comment\">#Redis服务器连接端口</span></span><br><span class=\"line\"><span class=\"attr\">spring.redis.port</span>=<span class=\"string\">6379</span></span><br><span class=\"line\"><span class=\"comment\">#Redis服务器连接密码(默认为空)</span></span><br><span class=\"line\"><span class=\"attr\">spring.redis.password</span> = <span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n<p>编写模板进行测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itcast.springbootandredis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itcast.springbootandredis.Repository.PersonRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itcast.springbootandredis.domain.Address;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itcast.springbootandredis.domain.Family;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itcast.springbootandredis.domain.Person;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jdk.jfr.internal.Repository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PersonRepository repository;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">savePerson</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;张&quot;</span>,<span class=\"string\">&quot;有才&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;James&quot;</span>,<span class=\"string\">&quot;Harden&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//创建并添加住址信息</span></span><br><span class=\"line\">        <span class=\"type\">Address</span> <span class=\"variable\">address</span>  <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Address</span>(<span class=\"string\">&quot;北京&quot;</span>,<span class=\"string\">&quot;中国&quot;</span>);</span><br><span class=\"line\">        person.setAddress(address);</span><br><span class=\"line\">        <span class=\"comment\">//创建并添加家庭成员</span></span><br><span class=\"line\">        List&lt;Family&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">Family</span> <span class=\"variable\">dad</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Family</span>(<span class=\"string\">&quot;父亲&quot;</span>,<span class=\"string\">&quot;李先生&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Family</span> <span class=\"variable\">mon</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Family</span>(<span class=\"string\">&quot;母亲&quot;</span>,<span class=\"string\">&quot;陈女士&quot;</span>);</span><br><span class=\"line\">        list.add(dad);</span><br><span class=\"line\">        list.add(mon);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//向Redis数据库添加数据</span></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">save</span> <span class=\"operator\">=</span> repository.save(person);</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">save2</span> <span class=\"operator\">=</span> repository.save(person2);</span><br><span class=\"line\">        System.out.println(save);</span><br><span class=\"line\">        System.out.println(save2);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectPerson</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Person&gt; personList = repository.findByAddress_City(<span class=\"string\">&quot;北京&quot;</span>);</span><br><span class=\"line\">        System.out.println(personList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updatePerson</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> repository.findFirstByFirstNameAndLastName(<span class=\"string\">&quot;张&quot;</span>, <span class=\"string\">&quot;有才&quot;</span>).get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        person.setLastName(<span class=\"string\">&quot;小明&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">update</span> <span class=\"operator\">=</span> repository.save(person);</span><br><span class=\"line\">        System.out.println(update);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deletePerson</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">delete</span> <span class=\"operator\">=</span> repository.findFirstByFirstNameAndLastName(<span class=\"string\">&quot;张&quot;</span>,<span class=\"string\">&quot;小明&quot;</span>).get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        repository.delete(delete);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上只是Redis和SpringBoot项目合起来，Redis作为数据库的使用方法，下面介绍Redis的别的用法。</p>\n<h3 id=\"2-3-SpringBoot整合mybaits\"><a href=\"#2-3-SpringBoot整合mybaits\" class=\"headerlink\" title=\"2.3 SpringBoot整合mybaits\"></a>2.3 SpringBoot整合mybaits</h3><img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202204301365.png\" class title=\"image-20231202204301365\">\n\n<p>按步骤如下排列:</p>\n<p>在主目录domain下创建类User</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202214054020.png\" class title=\"image-20231202214054020\">\n\n<p>并且写好get，set方法最后写上toString()</p>\n<p>在com&#x2F;itheima&#x2F;springbiittestmybaits&#x2F;下创建UserMapper文件</p>\n<p>内容如下</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202214211600.png\" class title=\"image-20231202214211600\">\n\n<p><strong>注意写好@Mpper注解,@Repository注解，@Select(“”)里面写好查询语句(select * from t_user)</strong></p>\n<p>来到test目录下操作</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202214343730.png\" class title=\"image-20231202214343730\">\n\n<p><strong>在测试类中编写如下代码，其中@Autowired注解注入了UserMapper的对象userMapper</strong></p>\n<p><strong>@Test注解中编写了testFindAll()方法来调用对象userMapper中的findAll()方法并打印输出列表list</strong></p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202223054341.png\" class title=\"image-20231202223054341\">\n\n<p>我们的<strong>application.yaml</strong>文件的内容如下</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202214536961.png\" class title=\"image-20231202214536961\">\n\n<h4 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h4><p>在主目录下创建mapper目录，目录下创建UserXmlMapper接口并编写里面的内容</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202215945150.png\" class title=\"image-20231202215945150\">\n\n<p>在resources目录下创建mapper文件，在里面创建UserMapper.xml文件并且编写如下</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202220056745.png\" class title=\"image-20231202220056745\">\n\n<p><strong>这一步注意:一定要指定namespace的路径(其实是UserMapper的路径)</strong></p>\n<p>在applications.yaml里面编写</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202220208781.png\" class title=\"image-20231202220208781\">\n\n<p>在主要测试类中添加@Autowired注解注入UserXmlMapper的对象userXmlMapper，并且添加对象对应的findAll()方法</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202220322506.png\" class title=\"image-20231202220322506\">\n\n<p>运行测试的结果</p>\n<img src=\"/2023/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/12/04/SpringBoot%E5%AD%A6%E4%B9%A0/image-20231202223058753.png\" class title=\"image-20231202223058753\">\n\n<h3 id=\"2-4-Spring-Data-JPA基本使用\"><a href=\"#2-4-Spring-Data-JPA基本使用\" class=\"headerlink\" title=\"2.4 Spring Data JPA基本使用\"></a>2.4 Spring Data JPA基本使用</h3><h4 id=\"2-4-1-Spring-Data-JPA简介\"><a href=\"#2-4-1-Spring-Data-JPA简介\" class=\"headerlink\" title=\"2.4.1 Spring Data JPA简介\"></a>2.4.1 Spring Data JPA简介</h4><ul>\n<li><p>Spring Data JPA是Spring基于<strong>ORM</strong>框架、JPA规范的基础上封装的一套JPA应用框架，它提供了增删改查等常用功能，使开发者可以用较少的代码实现数据操作，同时还易于扩展。</p>\n<ul>\n<li><p>ORM框架：</p>\n</li>\n<li><p>对象关系映射（Object Relational Mapping，简称ORM）是一种编程技术，用于在面向对象编程语言中表示和操作关系型数据库中的数据。ORM框架充当了一座桥梁，使得开发者可以使用面向对象的方式去处理数据库中的数据，而无需直接编写SQL语句。</p>\n<h3 id=\"ORM的核心概念\"><a href=\"#ORM的核心概念\" class=\"headerlink\" title=\"ORM的核心概念\"></a>ORM的核心概念</h3><ul>\n<li><strong>对象</strong>：在面向对象的语言中，数据以对象的形式存在，每个对象通常对应于数据库中的一行记录。</li>\n<li><strong>关系型数据库</strong>：数据存储在表中，表之间通过外键等关系相互联系。</li>\n<li><strong>映射</strong>：ORM框架提供了一种机制，用于描述对象和数据库表之间的映射关系，包括对象的属性到数据库列的映射，以及对象实例到数据库行的映射。</li>\n</ul>\n<h3 id=\"ORM的工作原理\"><a href=\"#ORM的工作原理\" class=\"headerlink\" title=\"ORM的工作原理\"></a>ORM的工作原理</h3><ol>\n<li><strong>元数据定义</strong>：ORM框架允许你定义对象和数据库表之间的映射规则，这通常是通过注解、XML配置或者代码生成完成的。</li>\n<li><strong>对象持久化</strong>：ORM框架会将对象的状态变化持久化到数据库中，当对象被修改后，框架会自动更新对应的数据库记录。</li>\n<li><strong>查询</strong>：ORM框架提供了一种方式让你用面向对象的方式来查询数据库，而不是直接写SQL语句。</li>\n</ol>\n<h3 id=\"ORM的优点\"><a href=\"#ORM的优点\" class=\"headerlink\" title=\"ORM的优点\"></a>ORM的优点</h3><ul>\n<li><strong>简化数据库交互</strong>：开发者可以直接操作对象，而无需关心底层的SQL语句和数据库交互细节。</li>\n<li><strong>提高开发效率</strong>：减少了手动编写SQL语句的工作量，也降低了出错的机会。</li>\n<li><strong>可移植性</strong>：更换数据库时，只需要更改配置，而不需要修改大量的SQL代码。</li>\n</ul>\n<h3 id=\"ORM的常见框架\"><a href=\"#ORM的常见框架\" class=\"headerlink\" title=\"ORM的常见框架\"></a>ORM的常见框架</h3><ul>\n<li><strong>Hibernate</strong>：一个全表映射的ORM框架，非常流行，适用于大型项目。</li>\n<li><strong>MyBatis</strong>：一个半自动映射的框架，允许更细粒度的控制，比如支持存储过程和动态SQL。</li>\n<li><strong>EclipseLink</strong>：另一个成熟的ORM框架，原名为TopLink，由Oracle公司贡献给Eclipse基金会。</li>\n<li>**JPA (Java Persistence API)**：一个标准的Java持久化规范，多个ORM框架（如Hibernate和EclipseLink）实现了这一规范。</li>\n</ul>\n<h3 id=\"ORM的局限性\"><a href=\"#ORM的局限性\" class=\"headerlink\" title=\"ORM的局限性\"></a>ORM的局限性</h3><ul>\n<li><strong>性能问题</strong>：过度的封装可能会导致性能下降，特别是在大量数据读取和复杂查询的情况下。</li>\n<li><strong>灵活性受限</strong>：对于一些复杂的SQL查询，使用ORM可能不如直接写SQL灵活。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-4-2-Spring-DATA-JPA基本使用\"><a href=\"#2-4-2-Spring-DATA-JPA基本使用\" class=\"headerlink\" title=\"2.4.2 Spring DATA JPA基本使用\"></a>2.4.2 Spring DATA JPA基本使用</h4><ul>\n<li>1.编写ORM实体类:实体类与数据表进行映射，并且配置好映射关系。</li>\n<li>2.编写<strong>Repository</strong>接口:针对不同的表数据操作编写各自对应的Repositor接口，并根据需要编写对应的数据操作方法，</li>\n</ul>\n<p>编写ORM实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//标主要与数据库做映射的实体类，默认数据表名称是首字母小写的类名</span></span><br><span class=\"line\"><span class=\"meta\">@Entity(name = &quot;t_comment&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@DATA</span><span class=\"comment\">//使用javalombok插件里面DATA注解快速生成get，set方法以及tostring方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Discuss</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//标注在类属性或者getter方法上，表示某一个属性对应表中的主键</span></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"comment\">//与@Id注解标注在同一位置，用于表示属性对应主键的生成策略，可省略</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;a_id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer aId;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>&#x3D;</p>\n","categories":[],"tags":[{"name":"SpringBoot学习","slug":"SpringBoot学习","permalink":"http://example.com/tags/SpringBoot%E5%AD%A6%E4%B9%A0/"}]},{"title":"Hello World","date":"2023-12-04T09:46:55.840Z","path":"2023/12/04/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"","date":"2023-12-04T08:59:28.628Z","path":"2023/12/04/Springboot模块学习2/","content":"<h1 id=\"SpringBoot模块学习-二-—-SpringBoot高级\"><a href=\"#SpringBoot模块学习-二-—-SpringBoot高级\" class=\"headerlink\" title=\"SpringBoot模块学习(二)—-SpringBoot高级\"></a>SpringBoot模块学习(二)—-SpringBoot高级</h1><h2 id=\"1-SpringBoot自动配置\"><a href=\"#1-SpringBoot自动配置\" class=\"headerlink\" title=\"1.SpringBoot自动配置\"></a>1.SpringBoot自动配置</h2><h3 id=\"1-Condition\"><a href=\"#1-Condition\" class=\"headerlink\" title=\"1)Condition\"></a>1)Condition</h3><p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231206145641002.png\" alt=\"image-20231206145641002\"></p>\n<p>以上是Condition的作用</p>\n<h3 id=\"2-切换内置web服务器\"><a href=\"#2-切换内置web服务器\" class=\"headerlink\" title=\"2)切换内置web服务器\"></a>2)切换内置web服务器</h3><p>SpringBoot的web环境中默认使用tomcat作为内置服务器，其实SpringBoot提供了4种内置服务器供我们选择，我们可以很方便进行切换</p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231206205702290.png\" alt=\"image-20231206205702290\"></p>\n<p>那么我们如何在这四种服务器之间切换呢？</p>\n<p><strong>只需要在pom.xml文件中引入对应的服务器坐标就可以了</strong></p>\n<p><strong><code>&lt;dependency&gt;</code></strong></p>\n<p><strong><code>&lt;artifactID&gt;spring-boot-starter-tomcat&lt;/artifactID&gt;</code></strong></p>\n<p><strong><code>&lt;groupID&gt;org.springframework.boot&lt;/groupID&gt;</code></strong></p>\n<p><strong><code>&lt;/dependency&gt;</code></strong></p>\n<p><strong>以上是我们的tomcat的坐标</strong></p>\n<p><strong>只需要将tomcat位置替换成jetty就可以了</strong></p>\n<h3 id=\"3-Enable注解\"><a href=\"#3-Enable注解\" class=\"headerlink\" title=\"3)@Enable注解\"></a>3)@Enable注解</h3><p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231206210416016.png\" alt=\"image-20231206210416016\"></p>\n<p>下面我们利用项目来加深一下理解</p>\n<p>创建一个叫springboot-enable的模块和为名springboot-enable-other的模块，第二个模块的作用是提供一些Bean来查询。</p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231206211815199.png\" alt=\"image-20231206211815199\"></p>\n<p><strong>以上是第一个项目需要的代码</strong></p>\n<p>第二个项目我们在包下创建</p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231206212626748.png\" alt=\"image-20231206212626748\"></p>\n<p>在UserConfig下编写如下代码即可</p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231206212647527.png\" alt=\"image-20231206212647527\"></p>\n<p>随后我们在springbootenable模块的pom文件中引入springbootenableother的依赖即可</p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231206212737274.png\" alt=\"image-20231206212737274\"></p>\n<p>运行第一个项目报错为正常情况，然后我们来说@Enable注解的作用。</p>\n<p>我们自己写一个EnableUser注解</p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231206212930295.png\" alt=\"image-20231206212930295\"></p>\n<p>接下来我们在启动类里面运用上自己写的@EnableUser注解启动</p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231209131920545.png\" alt=\"image-20231209131920545\"></p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231206213139508.png\" alt=\"image-20231206213139508\"></p>\n<p>成功访问到其他类的Bean！</p>\n<h3 id=\"4-Import注解\"><a href=\"#4-Import注解\" class=\"headerlink\" title=\"4)@Import注解\"></a>4)@Import注解</h3><p>Import注解有4种用法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 1.直接导入Bean:@Import(User.class)Bean名字</span><br><span class=\"line\">* 2.导入配置类:@Import(UserConfig.class)配置类名字</span><br><span class=\"line\">* 3.导入ImportSelector的实现类</span><br><span class=\"line\">* 4.导入ImportBeanDefinitionRegistrar实现类</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-EnableAutoConfiguration注解\"><a href=\"#5-EnableAutoConfiguration注解\" class=\"headerlink\" title=\"5)@EnableAutoConfiguration注解\"></a>5)@EnableAutoConfiguration注解</h3><p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231209133911053.png\" alt=\"image-20231209133911053\"></p>\n<h3 id=\"6-自定义stater案例\"><a href=\"#6-自定义stater案例\" class=\"headerlink\" title=\"6)自定义stater案例\"></a>6)自定义stater案例</h3><p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231209163725826.png\" alt=\"image-20231209163725826\"></p>\n<h3 id=\"7-SpringBoot监听器\"><a href=\"#7-SpringBoot监听器\" class=\"headerlink\" title=\"7)SpringBoot监听器\"></a>7)SpringBoot监听器</h3><p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231209165608666.png\" alt=\"image-20231209165608666\"></p>\n<p><strong>这些监听器，是一些列的接口，我们要使用就要创建实现这些接口的类并实现里面的方法。</strong></p>\n<h2 id=\"2-SpringBoot监控\"><a href=\"#2-SpringBoot监控\" class=\"headerlink\" title=\"2.SpringBoot监控\"></a>2.SpringBoot监控</h2><p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231209180436343.png\" alt=\"image-20231209180436343\"></p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231209182525637.png\" alt=\"image-20231209182525637\"></p>\n<p>上面的信息当中三个是health信息,一个是info</p>\n<p>这里推荐使用json,cn网站来进行解析:</p>\n<p>得到如下结果</p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231209182726341.png\" alt=\"image-20231209182726341\"></p>\n<p>我们访问info信息发现是空的，如果想要在info里面添加内容，需要在配置文件中写上以info.开头的属性名称和其对应的属性值,我下面只举一个例子:</p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231209182911535.png\" alt=\"image-20231209182911535\"></p>\n<p>在配置文件中添加如下内容后重新启动再次进入</p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231209183000907.png\" alt=\"image-20231209183000907\"></p>\n<p>关于health信息，初次访问只会显示一个内容</p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231209183119864.png\" alt=\"image-20231209183119864\"></p>\n<p>如果你想开启有关健康方面的所有内容，需要在配置文件中配置上如下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">management.endpoint.health.show-details=always</span><br></pre></td></tr></table></figure>\n\n<p>即可！</p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231209183221189.png\" alt=\"image-20231209183221189\"></p>\n<p>如果你想开启所有监控信息全部暴露出来你需要在配置文件中添加:</p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231209183332240.png\" alt=\"image-20231209183332240\"></p>\n<h3 id=\"2-SpringBoot-监控-Spring-Boot-Admin\"><a href=\"#2-SpringBoot-监控-Spring-Boot-Admin\" class=\"headerlink\" title=\"2)SpringBoot 监控 Spring Boot Admin\"></a>2)SpringBoot 监控 Spring Boot Admin</h3><p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231209184045796.png\" alt=\"image-20231209184045796\"></p>\n<p>使用步骤:</p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231209184206537.png\" alt=\"image-20231209184206537\"></p>\n<h2 id=\"3-SpringBoot项目部署\"><a href=\"#3-SpringBoot项目部署\" class=\"headerlink\" title=\"3.SpringBoot项目部署\"></a>3.SpringBoot项目部署</h2><p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231209185754370.png\" alt=\"image-20231209185754370\">利用idea中的maven打包默认打jar包</p>\n<p>可以在目录下用Powershell终端 </p>\n<p>java -jar+ jar包名</p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231209190150879.png\" alt=\"image-20231209190150879\"></p>\n<p>也可以打war包</p>\n<p>在pom中将打包方式改为war</p>\n<p>然后再启动类中继承一个名为SoringBootServletInitializer的类</p>\n<p>随后在加一个@Override注解</p>\n<p><img src=\"/2023/12/04/Springboot%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A02/image-20231209190325853.png\" alt=\"image-20231209190325853\"></p>\n<p>将war包放在Tomcat的wabapp下启动Tomcat访问但注意:</p>\n<p>1.目录发生了变化</p>\n<p>2.端口号内置的不在起作用，需要从外置tomcat配置文件中更改</p>\n","categories":[],"tags":[]}]